canonical_id,F72,F54,F55,F25,F26,F62,F65,F64,F67,F34,F66,F69,F68,F101,F102,F103,F104,F105,F107,F108,F16-Comparable<String>,F16-String[],F16-Comparable<Boolean>,F16-Map<String String>,F16-List<ObjectName>,F16-long,F16-PreparedStatement,F16-Object,F16-NA,F16-void,F16-SSLSupport,F16-int,F16-boolean,F16-Comparable<Date>,F16-ELContextImpl,F16-String,F16-Method,F16-JspApplicationContext,F16-Void,F16-WebResource,F3-NA,F3-Session,F3-Integer,F3-Class<?>[],F3-InputStream,F3-null,F3-ELContext,F3-byte[],F3-boolean,F3-Object,F3-Object[],F3-FileInputStream,F3-String,F3-long,F3-HttpServletRequest,F3-Reader,F3-int,F3-String[],F3-ObjectName,F3-Level,F7--,F7-&=,F7-++,F7-|=,F7-+=,F7-NA,F7-*,F7-+,F12-long,F12-int,F12-HashMap<String Method>,F12-NA,F12-Room,F12-TemplatePathMatchComparator,F12-boolean,F12-byte[],F12-String,F12-StringManager,F12-Comparator<Session>,F17-static,F17-static-final,F17-final,F17-NA,F2-StringBuilder,F2-Socket,F2-ELParser,F2-Thread,F2-NA,F2-SimpleCharStream,F2-MBeanServer,F2-Properties,F2-Object,F2-MessageSender,F2-Connection,F2-String,F2-JDBCStore,F2-Hashtable<String Integer>,F2-AccessibleObject,F2-Class<>,F2-Long,F2-System,F2-Map<String LockRecord>,F2-File,F6-java.io.ByteArrayOutputStream,F6-NA,F6-java.lang.Long,F6-org.apache.jasper.compiler.JspConfig.JspProperty,F6-java.io.InputStreamReader,F6-org.xml.sax.InputSource,F6-java.io.FileInputStream,F6-java.util.Properties,F6-java.io.BufferedInputStream,F6-org.apache.el.parser.Token,F6-java.io.PrintStream,F6-java.lang.Integer,F6-java.io.File,F6-java.lang.String,F6-java.lang.StringBuilder,F6-org.apache.tomcat.jni.Library,F6-java.util.Date,F6-java.lang.Double,F6-java.io.BufferedReader,F6-chat.ChatServlet.MessageSender,F13-private,F13-NA,F13-protected,F18-private,F18-NA,F18-public,F14-static-final,F14-NA,F14-final,F1-invoke,F1-ReInit,F1-delete,F1-NA,F1-jj_ntk,F1-close,F1-prepareStatement,F1-jj_consume_token,F1-getString,F1-longValue,F1-get,F1-append,F1-getConnection,F1-openNodeScope,F1-getValue,F1-put,F1-currentTimeMillis,F1-toString,F1-list,F1-length,F5-java.lang.Object,F5-NA,F5-java.io.Writer,F5-java.util.logging.Logger,F5-java.lang.Thread,F5-java.util.zip.ZipFile,F5-java.io.FilterOutputStream,F5-java.util.Hashtable,F5-java.io.InputStream,F5-java.io.FilterInputStream,F5-java.lang.Number,F5-java.io.Reader,F5-java.lang.AbstractStringBuilder,F5-java.io.OutputStream,F5-java.lang.Exception,F9-cluster,F9-encoding,F9-displayName,F9-accessed,F9-sessionIdCol,F9-sessionAppCol,F9-locks,F9-lastAccess,F9-size,F9-servletClass,F9-jaasConfiguration,F9-view,F9-NA,F9-wrapper,F9-channel,F9-uniqueId,F9-compressableMimeTypes,F9-hosts,F9-membershipService,F9-message,F10-NA,F10-true,F19-NA,F15-NA,F15-private,F15-protected,F15-public,F0-NA,F4-NA,F4-String[],F4-Integer,F4-boolean,F4-Constructor,F4-InputStream,F4-long,F4-PreparedStatement,F4-LockRecord,F4-Token,F4-Connection,F4-Object,F4-byte[],F4-File,F4-void,F4-Buffer,F4-StringBuilder,F4-String,F4-int,F4-Method,F8-AccessLogValve,F8-StandardContext,F8-JarInputStreamWrapper,F8-ValueExpressionImpl,F8-StandardWrapper,F8-ResultSetProxy,F8-McastService,F8-MapMessage,F8-JAASRealm,F8-ContextService,F8-ChannelData,F8-AbstractReplicatedMap<K V>,F8-CloseReason,F8-CoordinationEvent,F8-JDBCStore,F8-NA,F8-FaultyMember,F8-Mapper,F8-ObjectReader,F8-ChannelCoordinator,F11-START_DATA,F11-INSTANCE,F11-type,F11-fnmap,F11-room,F11-class_name,F11-NA,F11-serialVersionUID,F11-comparator,F11-sm,F11-hasHashCode,F11-hashCode,F94,F95,F21,F109,F20,F23,F22,F79,F111,F112,F113,F116,F117,F118,F119,F120,F110,F121,F122,F123,F114,F115,F61,F77,F88,F70,F41,F40,F43,F42,F45,F44,F46,F126,F127,F128,F129,F36,F130,F35,F131,F38,F132,F37,F133,F134,F39,F135,F136,F137,F83,F71-mturk@apache.org,F71-jboynes@apache.org,F71-remm@apache.org,F71-fhanik@apache.org,F71-kfujino@apache.org,F71-kpreisser@apache.org,F71-funkman@apache.org,F71-costin@apache.org,F71-kkolinko@apache.org,F71-jhook@apache.org,F71-markt@apache.org,F71-timw@apache.org,F71-billbarker@apache.org,F71-jfclere@apache.org,F71-idarwin@apache.org,F71-rjung@apache.org,F71-pero@apache.org,F71-schultz@apache.org,F71-violetagg@apache.org,F71-slaurent@apache.org,F74,F73,F84,url,method_name,F146,category,method_content
tomcat-C-3,15284,async,async/Async0.java,1609,True,33,1,108,2,8,17,3,11,0.5671641791044776,44,16,0.3636363636363636,0.0606060606060606,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,10,2,BAD_PRACTICE,0.0033898305084745,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,16,2,1,0.0061462814996926,0.0012292562999385,0.0006146281499692685,-1.0,0.3333333333333333,0.0069444444444444,0.128099173553719,0.106556527989236,-0.3333333333333333,0.0,0.0218926553672316,0.106556527989236,-1.0,-1.0,3,7769,1376,14075,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,4625,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,10929,18084,3056,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//webapps/examples/WEB-INF/classes/async/Async0.java,service,9360,close,"@Override
    protected void service(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {
        if (Boolean.TRUE == req.getAttribute(""dispatch"")) {
            log.info(""Received dispatch, completing on the worker thread."");
            log.info(""After complete called started:""+req.isAsyncStarted());
            resp.getWriter().write(""Async dispatch worked:+""+System.currentTimeMillis()+""\n"");
        } else {
            resp.setContentType(""text/plain"");
            final AsyncContext actx = req.startAsync();
            actx.setTimeout(Long.MAX_VALUE);
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    try {
                        req.setAttribute(""dispatch"", Boolean.TRUE);
                        Thread.currentThread().setName(""Async0-Thread"");
                        log.info(""Putting AsyncThread to sleep"");
                        Thread.sleep(2*1000);
                        log.info(""Dispatching"");
                        actx.dispatch();
                    }catch (InterruptedException x) {
                        log.error(""Async1"",x);
                    }catch (IllegalStateException x) {
                        log.error(""Async1"",x);
                    }
                }
            };
            Thread t = new Thread(run);
            t.start();
        }
    }"
tomcat-C-23,7568,javax/el,javax/el/BeanNameELResolver.java,182,True,21,7,579,1,16,226,4,56,0.6987951807228916,117,21,0.1794871794871795,0.5714285714285714,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,10,4,STYLE,0.0203389830508474,NP_LOAD_OF_KNOWN_NULL_VALUE,16,2,1,0.0061462814996926,0.002458512599877,0.0006146281499692685,0.0,0.0769230769230769,0.0022189349112426,0.1053719008264462,0.0543030765297002,-0.7692307692307693,0.0,0.0360169491525423,0.0543030765297002,-1.0,0.0,0,1191,176,7497,3,0.0,0,4,-1,7,0.0100674678473539,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1193,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7497,18084,395,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/javax/el/BeanNameELResolver.java,getType,6699,open,"@Override
    public Class<?> getType(ELContext context, Object base, Object property) {

        if (context == null) {
            throw new NullPointerException();
        }
        if (base != null || !(property instanceof String)) {
            return null;
        }

        String beanName = (String) property;

        try {
            if (beanNameResolver.isNameResolved(beanName)) {
                Class<?> result = beanNameResolver.getBean(beanName).getClass();
                context.setPropertyResolved(base, property);
                return result;
            }
        } catch (Throwable t) {
            Util.handleThrowable(t);
            throw new ELException(t);
        }

        return null;
    }"
tomcat-C-60,7105,nonblocking,nonblocking/ByteCounter.java,124,True,6,2,110,3,0,3,1,6,0.4577464788732394,77,43,0.5584415584415584,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,1,STYLE,0.0257627118644067,DLS_DEAD_LOCAL_STORE,15,1,1,0.0018438844499078,0.0006146281499692685,0.0006146281499692685,0.0,0.131578947368421,0.0035708102493074,0.1053719008264462,0.0543030765297002,-0.6842105263157895,0.0,0.0360169491525423,0.0543030765297002,0.0,0.0,1,799,124,7105,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,797,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7101,18084,726,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//webapps/examples/WEB-INF/classes/nonblocking/ByteCounter.java,doPost,7030,open,"@Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        resp.setContentType(""text/plain"");
        resp.setCharacterEncoding(""UTF-8"");

        // Non-blocking IO requires async
        AsyncContext ac = req.startAsync();

        // Use a single listener for read and write. Listeners often need to
        // share state to coordinate reads and writes and this is much easier as
        // a single object.
        @SuppressWarnings(""unused"")
        CounterListener listener = new CounterListener(
                ac, req.getInputStream(), resp.getOutputStream());
    }"
tomcat-C-61,7068,nonblocking,nonblocking/NumberWriter.java,120,True,6,1,110,3,0,3,1,6,0.3783783783783784,81,43,0.5308641975308642,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,2,STYLE,0.0257627118644067,DLS_DEAD_LOCAL_STORE,15,1,1,0.0018438844499078,0.0012292562999385,0.0006146281499692685,0.0,0.131578947368421,0.0035708102493074,0.1053719008264462,0.0543030765297002,-0.6842105263157895,0.0,0.0360169491525423,0.0543030765297002,0.0,0.0,1,762,120,7068,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,726,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7030,18084,726,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//webapps/examples/WEB-INF/classes/nonblocking/NumberWriter.java,doGet,7030,open,"@Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        resp.setContentType(""text/plain"");
        resp.setCharacterEncoding(""UTF-8"");

        // Non-blocking IO requires async
        AsyncContext ac = req.startAsync();

        // Use a single listener for read and write. Listeners often need to
        // share state to coordinate reads and writes and this is much easier as
        // a single object.
        @SuppressWarnings(""unused"")
        NumberWriterListener listener = new NumberWriterListener(
                ac, req.getInputStream(), resp.getOutputStream());

    }"
tomcat-C-75,18084,org/apache/catalina/ant/jmx,org/apache/catalina/ant/jmx/JMXAccessorTask.java,2836,True,56,40,382,1,16,134,15,10,0.7332382310984308,409,217,0.530562347188264,0.25,32,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,8,4,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,4,0.0049170251997541,0.002458512599877,0.002458512599877,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,18,11778,2836,18084,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3336,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,9640,18084,3336,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/ant/jmx/JMXAccessorTask.java,convertStringToType,9640,close,"protected Object convertStringToType(String value, String valueType) {
        if (""java.lang.String"".equals(valueType))
            return value;

        Object convertValue = value;
        if (""java.lang.Integer"".equals(valueType) || ""int"".equals(valueType)) {
            try {
                convertValue = new Integer(value);
            } catch (NumberFormatException ex) {
                if (isEcho())
                    handleErrorOutput(""Unable to convert to integer:"" + value);
            }
        } else if (""java.lang.Long"".equals(valueType)
                || ""long"".equals(valueType)) {
            try {
                convertValue = new Long(value);
            } catch (NumberFormatException ex) {
                if (isEcho())
                    handleErrorOutput(""Unable to convert to long:"" + value);
            }
        } else if (""java.lang.Boolean"".equals(valueType)
                || ""boolean"".equals(valueType)) {
            convertValue = Boolean.valueOf(value);
        } else if (""java.lang.Float"".equals(valueType)
                || ""float"".equals(valueType)) {
            try {
                convertValue = new Float(value);
            } catch (NumberFormatException ex) {
                if (isEcho())
                    handleErrorOutput(""Unable to convert to float:"" + value);
            }
        } else if (""java.lang.Double"".equals(valueType)
                || ""double"".equals(valueType)) {
            try {
                convertValue = new Double(value);
            } catch (NumberFormatException ex) {
                if (isEcho())
                    handleErrorOutput(""Unable to convert to double:"" + value);
            }
        } else if (""javax.management.ObjectName"".equals(valueType)
                || ""name"".equals(valueType)) {
            try {
                convertValue = new ObjectName(value);
            } catch (MalformedObjectNameException e) {
                if (isEcho())
                    handleErrorOutput(""Unable to convert to ObjectName:""
                            + value);
            }
        } else if (""java.net.InetAddress"".equals(valueType)) {
            try {
                convertValue = InetAddress.getByName(value);
            } catch (UnknownHostException exc) {
                if (isEcho())
                    handleErrorOutput(""Unable to resolve host name:"" + value);
            }
        }
        return convertValue;
    }"
tomcat-C-78,13906,org/apache/catalina/authenticator,org/apache/catalina/authenticator/DigestAuthenticator.java,1342,True,0,20,1274,4,0,122,1,17,0.7695652173913043,402,164,0.4079601990049751,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,10,4,STYLE,0.0515254237288135,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,18,2,1,0.0061462814996926,0.002458512599877,0.0006146281499692685,-1.0,0.1282051282051282,0.0034927679158448,0.1053719008264462,0.0543030765297002,-0.6923076923076923,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,20,5579,1005,11885,18,0.0,0,4,14,22,0.0321553446553446,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,996,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7300,18084,96,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/authenticator/DigestAuthenticator.java,validate,6400,open,"public boolean validate(Request request) {
            if ( (userName == null) || (realmName == null) || (nonce == null)
                 || (uri == null) || (response == null) ) {
                return false;
            }

            // Validate the URI - should match the request line sent by client
            if (validateUri) {
                String uriQuery;
                String query = request.getQueryString();
                if (query == null) {
                    uriQuery = request.getRequestURI();
                } else {
                    uriQuery = request.getRequestURI() + ""?"" + query;
                }
                if (!uri.equals(uriQuery)) {
                    // Some clients (older Android) use an absolute URI for
                    // DIGEST but a relative URI in the request line.
                    // request. 2.3.5 < fixed Android version <= 4.0.3
                    String host = request.getHeader(""host"");
                    String scheme = request.getScheme();
                    if (host != null && !uriQuery.startsWith(scheme)) {
                        StringBuilder absolute = new StringBuilder();
                        absolute.append(scheme);
                        absolute.append(""://"");
                        absolute.append(host);
                        absolute.append(uriQuery);
                        if (!uri.equals(absolute.toString())) {
                            return false;
                        }
                    } else {
                        return false;
                    }
                }
            }

            // Validate the Realm name
            String lcRealm = getRealmName(request.getContext());
            if (!lcRealm.equals(realmName)) {
                return false;
            }

            // Validate the opaque string
            if (!opaque.equals(opaqueReceived)) {
                return false;
            }

            // Validate nonce
            int i = nonce.indexOf("":"");
            if (i < 0 || (i + 1) == nonce.length()) {
                return false;
            }
            long nonceTime;
            try {
                nonceTime = Long.parseLong(nonce.substring(0, i));
            } catch (NumberFormatException nfe) {
                return false;
            }
            String md5clientIpTimeKey = nonce.substring(i + 1);
            long currentTime = System.currentTimeMillis();
            if ((currentTime - nonceTime) > nonceValidity) {
                nonceStale = true;
                synchronized (nonces) {
                    nonces.remove(nonce);
                }
            }
            String serverIpTimeKey =
                request.getRemoteAddr() + "":"" + nonceTime + "":"" + key;
            byte[] buffer = ConcurrentMessageDigest.digestMD5(
                    serverIpTimeKey.getBytes(StandardCharsets.ISO_8859_1));
            String md5ServerIpTimeKey = MD5Encoder.encode(buffer);
            if (!md5ServerIpTimeKey.equals(md5clientIpTimeKey)) {
                return false;
            }

            // Validate qop
            if (qop != null && !QOP.equals(qop)) {
                return false;
            }

            // Validate cnonce and nc
            // Check if presence of nc and Cnonce is consistent with presence of qop
            if (qop == null) {
                if (cnonce != null || nc != null) {
                    return false;
                }
            } else {
                if (cnonce == null || nc == null) {
                    return false;
                }
                // RFC 2617 says nc must be 8 digits long. Older Android clients
                // use 6. 2.3.5 < fixed Android version <= 4.0.3
                if (nc.length() < 6 || nc.length() > 8) {
                    return false;
                }
                long count;
                try {
                    count = Long.parseLong(nc, 16);
                } catch (NumberFormatException nfe) {
                    return false;
                }
                NonceInfo info;
                synchronized (nonces) {
                    info = nonces.get(nonce);
                }
                if (info == null) {
                    // Nonce is valid but not in cache. It must have dropped out
                    // of the cache - force a re-authentication
                    nonceStale = true;
                } else {
                    if (!info.nonceCountValid(count)) {
                        return false;
                    }
                }
            }
            return true;
        }"
tomcat-C-80,18084,org/apache/catalina/authenticator,org/apache/catalina/authenticator/SingleSignOnEntry.java,2836,True,3,10,1274,1,8,122,1,17,0.601063829787234,65,97,1.4923076923076923,0.6666666666666666,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,10,1,MALICIOUS_CODE,0.0616949152542372,EI_EXPOSE_REP,18,2,1,0.0061462814996926,0.0006146281499692685,0.0006146281499692685,-1.0,0.1136363636363636,0.0077479338842975,0.1337579617834395,0.0441823027852679,-0.6931818181818182,0.0,0.0296610169491525,0.0441823027852679,-1.0,-1.0,8,11778,2836,18084,18,0.0,0,4,14,22,0.0321553446553446,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,4497,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,10801,18084,96,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/authenticator/SingleSignOnEntry.java,findSessions,6400,open,"public synchronized Session[] findSessions() {
        return (this.sessions);
    }"
tomcat-C-91,18084,org/apache/catalina/connector,org/apache/catalina/connector/Request.java,2836,True,108,147,1710,10,8,565,29,53,0.8276785714285714,1859,917,0.4932759548144163,0.1111111111111111,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,21,9,STYLE,0.0515254237288135,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,18,2,1,0.0129071911493546,0.0055316533497234,0.0006146281499692685,-1.0,0.1282051282051282,0.0034927679158448,0.1053719008264462,0.0543030765297002,-0.6923076923076923,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,190,11778,2836,18084,44,0.4181818181818181,2,15,29,61,0.0608224496092143,0,0,0,0,0,0,23,0.0,23,0,0,0,0,23,0,0,0.0,117,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1,1,0,6421,18084,97,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/connector/Request.java,doGetSession,6401,close,"protected Session doGetSession(boolean create) {

        // There cannot be a session if no context has been assigned yet
        if (context == null) {
            return (null);
        }

        // Return the current session if it exists and is valid
        if ((session != null) && !session.isValid()) {
            session = null;
        }
        if (session != null) {
            return (session);
        }

        // Return the requested session if it exists and is valid
        Manager manager = null;
        if (context != null) {
            manager = context.getManager();
        }
        if (manager == null)
         {
            return (null);      // Sessions are not supported
        }
        if (requestedSessionId != null) {
            try {
                session = manager.findSession(requestedSessionId);
            } catch (IOException e) {
                session = null;
            }
            if ((session != null) && !session.isValid()) {
                session = null;
            }
            if (session != null) {
                session.access();
                return (session);
            }
        }

        // Create a new session if requested and the response is not committed
        if (!create) {
            return (null);
        }
        if ((context != null) && (response != null) &&
            context.getServletContext().getEffectiveSessionTrackingModes().
                    contains(SessionTrackingMode.COOKIE) &&
            response.getResponse().isCommitted()) {
            throw new IllegalStateException
              (sm.getString(""coyoteRequest.sessionCreateCommitted""));
        }

        // Attempt to reuse session id if one was submitted in a cookie
        // Do not reuse the session id if it is from a URL, to prevent possible
        // phishing attacks
        // Use the SSL session ID if one is present.
        if ((""/"".equals(context.getSessionCookiePath())
                && isRequestedSessionIdFromCookie()) || requestedSessionSSL ) {
            session = manager.createSession(getRequestedSessionId());
        } else {
            session = manager.createSession(null);
        }

        // Creating a new session cookie based on that session
        if ((session != null) && (getContext() != null)
               && getContext().getServletContext().
                       getEffectiveSessionTrackingModes().contains(
                               SessionTrackingMode.COOKIE)) {
            Cookie cookie =
                ApplicationSessionCookieConfig.createSessionCookie(
                        context, session.getIdInternal(), isSecure());

            response.addSessionCookieInternal(cookie);
        }

        if (session == null) {
            return null;
        }

        session.access();
        return session;
    }"
tomcat-C-92,18084,org/apache/catalina/connector,org/apache/catalina/connector/Request.java,2836,True,3,147,1710,10,0,565,1,53,0.6086309523809523,1859,917,0.4932759548144163,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,21,9,STYLE,0.0515254237288135,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,18,2,2,0.0129071911493546,0.0055316533497234,0.0012292562999385,-1.0,0.1282051282051282,0.0034927679158448,0.1053719008264462,0.0543030765297002,-0.6923076923076923,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,190,11778,2836,18084,44,0.4181818181818181,2,15,29,61,0.0608224496092143,0,0,0,0,0,0,23,0.0,23,0,0,0,0,23,0,0,0.0,117,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1,1,0,6421,18084,97,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/connector/Request.java,getPathTranslated,6401,open,"@Override
    public String getPathTranslated() {

        if (context == null) {
            return null;
        }

        if (getPathInfo() == null) {
            return null;
        }

        return context.getServletContext().getRealPath(getPathInfo());
    }"
tomcat-C-95,18084,org/apache/catalina/connector,org/apache/catalina/connector/Request.java,2836,True,9,147,1710,10,8,565,2,53,0.475595238095238,1859,917,0.4932759548144163,0.5555555555555556,3,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,21,9,STYLE,0.0061016949152542,UC_USELESS_OBJECT,17,2,1,0.0129071911493546,0.0055316533497234,0.0006146281499692685,-1.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,190,11778,2836,18084,44,0.4181818181818181,2,15,29,61,0.0608224496092143,0,0,0,0,0,0,23,0.0,23,0,0,0,0,23,0,0,0.0,117,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1,1,0,6421,18084,97,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/connector/Request.java,setCharacterEncoding,6401,open,"@Override
    public void setCharacterEncoding(String enc)
        throws UnsupportedEncodingException {

        if (usingReader) {
            return;
        }

        // Ensure that the specified encoding is valid
        byte buffer[] = new byte[1];
        buffer[0] = (byte) 'a';

        // Confirm that the encoding name is valid
        B2CConverter.getCharset(enc);

        // Save the validated encoding
        coyoteRequest.setCharacterEncoding(enc);
    }"
tomcat-C-111,13906,org/apache/catalina/core,org/apache/catalina/core/ApplicationHttpRequest.java,1342,True,8,36,2419,2,0,1067,5,70,0.3798126951092612,456,289,0.6337719298245614,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,85,4,STYLE,0.0020338983050847,BC_VACUOUS_INSTANCEOF,17,2,1,0.0522433927473878,0.002458512599877,0.0006146281499692685,-1.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-0.9545454545454546,-1.0,28,11778,2836,18084,127,0.0,50,204,-77,381,0.0540011137224841,0,0,0,0,0,0,0,0.0,0,2,0,92,11,0,105,-90,0.0127570967193608,1292,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,7596,18084,7,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/core/ApplicationHttpRequest.java,getParameter,6311,close,"@Override
    public String getParameter(String name) {

        parseParameters();

        Object value = parameters.get(name);
        if (value == null)
            return (null);
        else if (value instanceof String[])
            return (((String[]) value)[0]);
        else if (value instanceof String)
            return ((String) value);
        else
            return (value.toString());

    }"
tomcat-C-112,13906,org/apache/catalina/core,org/apache/catalina/core/ApplicationHttpRequest.java,1342,True,16,36,2419,2,0,1067,5,70,0.4297606659729448,456,289,0.6337719298245614,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,85,4,STYLE,0.0020338983050847,BC_VACUOUS_INSTANCEOF,17,2,2,0.0522433927473878,0.002458512599877,0.0012292562999385,-1.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-0.9545454545454546,-1.0,28,11778,2836,18084,127,0.0,50,204,-77,381,0.0540011137224841,0,0,0,0,0,0,0,0.0,0,2,0,92,11,0,105,-90,0.0127570967193608,1292,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,7596,18084,7,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/core/ApplicationHttpRequest.java,getParameterValues,6311,close,"@Override
    public String[] getParameterValues(String name) {

        parseParameters();
        Object value = parameters.get(name);
        if (value == null)
            return null;
        else if (value instanceof String[])
            return ((String[]) value);
        else if (value instanceof String) {
            String values[] = new String[1];
            values[0] = (String) value;
            return (values);
        } else {
            String values[] = new String[1];
            values[0] = value.toString();
            return (values);
        }

    }"
tomcat-C-114,13906,org/apache/catalina/core,org/apache/catalina/core/ApplicationHttpRequest.java,1342,True,18,36,2419,2,16,1067,5,70,0.9209157127991676,456,289,0.6337719298245614,0.6666666666666666,11,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,85,4,PERFORMANCE,0.0027118644067796,WMI_WRONG_MAP_ITERATOR,18,2,1,0.0522433927473878,0.002458512599877,0.0006146281499692685,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-0.4,0.0,0.0098870056497175,0.0755918430465237,-0.9545454545454546,-1.0,28,11778,2836,18084,127,0.0,50,204,-77,381,0.0540011137224841,0,0,0,0,0,0,0,0.0,0,2,0,92,11,0,105,-90,0.0127570967193608,1292,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,7596,18084,7,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/core/ApplicationHttpRequest.java,mergeParameters,6311,open,"private void mergeParameters() {

        if ((queryParamString == null) || (queryParamString.length() < 1))
            return;

        HashMap<String, String[]> queryParameters = new HashMap<>();
        String encoding = getCharacterEncoding();
        if (encoding == null)
            encoding = ""ISO-8859-1"";
        RequestUtil.parseParameters(queryParameters, queryParamString,
                encoding);
        Iterator<String> keys = parameters.keySet().iterator();
        while (keys.hasNext()) {
            String key = keys.next();
            Object value = queryParameters.get(key);
            if (value == null) {
                queryParameters.put(key, parameters.get(key));
                continue;
            }
            queryParameters.put
                (key, mergeValues(value, parameters.get(key)));
        }
        parameters = queryParameters;

    }"
tomcat-C-136,18084,org/apache/catalina/core,org/apache/catalina/core/StandardContext.java,2836,True,3,293,2419,4,8,1067,1,70,0.1682945154019534,3635,1704,0.4687757909215956,0.6666666666666666,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,85,17,MALICIOUS_CODE,0.0616949152542372,EI_EXPOSE_REP,18,2,1,0.0522433927473878,0.0104486785494775,0.0006146281499692685,-1.0,0.1136363636363636,0.0077479338842975,0.1337579617834395,0.0441823027852679,-0.6931818181818182,0.0,0.0296610169491525,0.0441823027852679,-0.9545454545454546,-1.0,277,11778,2836,18084,127,0.3006076123097638,50,204,-77,381,0.0540011137224841,2,92,11,105,160,-90,60,0.4720125786163522,250,2,30,92,11,-100,105,-90,0.0127570967193608,7,1,1,1,1,0,0,1,1,1,0,1,0,0,0,0,1,1,1,0,1,6311,18084,7,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/core/StandardContext.java,getApplicationEventListeners,6311,close,"@Override
    public Object[] getApplicationEventListeners() {
        return (applicationEventListenersObjects);
    }"
tomcat-C-137,18084,org/apache/catalina/core,org/apache/catalina/core/StandardContext.java,2836,True,3,293,2419,4,8,1067,2,70,0.174305033809166,3635,1704,0.4687757909215956,0.6666666666666666,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,85,17,MALICIOUS_CODE,0.0616949152542372,EI_EXPOSE_REP,18,2,1,0.0522433927473878,0.0104486785494775,0.0006146281499692685,-1.0,0.1136363636363636,0.0077479338842975,0.1337579617834395,0.0441823027852679,-0.6931818181818182,0.0,0.0296610169491525,0.0441823027852679,-0.9545454545454546,-1.0,277,11778,2836,18084,127,0.3006076123097638,50,204,-77,381,0.0540011137224841,2,92,11,105,160,-90,60,0.4720125786163522,250,2,30,92,11,-100,105,-90,0.0127570967193608,7,1,1,1,1,0,0,1,1,1,0,1,0,0,0,0,1,1,1,0,1,6311,18084,7,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/core/StandardContext.java,getApplicationLifecycleListeners,6311,open,"@Override
    public Object[] getApplicationLifecycleListeners() {
        return (applicationLifecycleListenersObjects);
    }"
tomcat-C-140,18084,org/apache/catalina/core,org/apache/catalina/core/StandardContext.java,2836,True,3,293,2419,4,8,1067,1,70,0.1702479338842975,3635,1704,0.4687757909215956,0.6666666666666666,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,85,17,MALICIOUS_CODE,0.0481355932203389,EI_EXPOSE_REP2,18,2,1,0.0522433927473878,0.0104486785494775,0.0006146281499692685,-1.0,0.1168831168831168,0.0079401118362157,0.1337579617834395,0.0441823027852679,-0.7012987012987013,0.0,0.0296610169491525,0.0441823027852679,-0.9545454545454546,-1.0,277,11778,2836,18084,127,0.3006076123097638,50,204,-77,381,0.0540011137224841,2,92,11,105,160,-90,60,0.4720125786163522,250,2,30,92,11,-100,105,-90,0.0127570967193608,7,1,1,1,1,0,0,1,1,1,0,1,0,0,0,0,1,1,1,0,1,6311,18084,7,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/core/StandardContext.java,setApplicationEventListeners,6311,close,"@Override
    public void setApplicationEventListeners(Object listeners[]) {
        applicationEventListenersObjects = listeners;
    }"
tomcat-C-141,18084,org/apache/catalina/core,org/apache/catalina/core/StandardContext.java,2836,True,3,293,2419,4,8,1067,2,70,0.1762584522915101,3635,1704,0.4687757909215956,0.6666666666666666,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,85,17,MALICIOUS_CODE,0.0481355932203389,EI_EXPOSE_REP2,18,2,1,0.0522433927473878,0.0104486785494775,0.0006146281499692685,-1.0,0.1168831168831168,0.0079401118362157,0.1337579617834395,0.0441823027852679,-0.7012987012987013,0.0,0.0296610169491525,0.0441823027852679,-0.9545454545454546,-1.0,277,11778,2836,18084,127,0.3006076123097638,50,204,-77,381,0.0540011137224841,2,92,11,105,160,-90,60,0.4720125786163522,250,2,30,92,11,-100,105,-90,0.0127570967193608,7,1,1,1,1,0,0,1,1,1,0,1,0,0,0,0,1,1,1,0,1,6311,18084,7,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/core/StandardContext.java,setApplicationLifecycleListeners,6311,open,"@Override
    public void setApplicationLifecycleListeners(Object listeners[]) {
        applicationLifecycleListenersObjects = listeners;
    }"
tomcat-C-142,18084,org/apache/catalina/core,org/apache/catalina/core/StandardContext.java,2836,True,3,293,2419,4,8,1067,1,70,0.9517655897821188,3635,1704,0.4687757909215956,0.6666666666666666,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,85,17,MALICIOUS_CODE,0.0481355932203389,EI_EXPOSE_REP2,18,2,1,0.0522433927473878,0.0104486785494775,0.0006146281499692685,-1.0,0.1168831168831168,0.0079401118362157,0.1337579617834395,0.0441823027852679,-0.7012987012987013,0.0,0.0296610169491525,0.0441823027852679,-0.9545454545454546,-1.0,277,11778,2836,18084,127,0.3006076123097638,50,204,-77,381,0.0540011137224841,2,92,11,105,160,-90,60,0.4720125786163522,250,2,30,92,11,-100,105,-90,0.0127570967193608,7,1,1,1,1,0,0,1,1,1,0,1,0,0,0,0,1,1,1,0,1,6311,18084,7,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/core/StandardContext.java,setJavaVMs,6311,open,"public String[] setJavaVMs(String[] javaVMs) {
        return this.javaVMs = javaVMs;
    }"
tomcat-C-148,18084,org/apache/catalina/core,org/apache/catalina/core/StandardContext.java,2836,True,14,293,2419,4,16,1067,4,70,0.6868519909842223,3635,1704,0.4687757909215956,0.5714285714285714,11,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,85,17,PERFORMANCE,0.0027118644067796,WMI_WRONG_MAP_ITERATOR,18,2,1,0.0522433927473878,0.0104486785494775,0.0006146281499692685,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-0.4,0.0,0.0098870056497175,0.0755918430465237,-0.9545454545454546,-1.0,244,10200,2068,16506,127,0.3006076123097638,50,204,-77,381,0.0540011137224841,2,92,11,105,160,-90,60,0.4720125786163522,250,2,30,92,11,-100,105,-90,0.0127570967193608,7,0,1,0,1,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,1,6311,18084,7,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/core/StandardContext.java,filterStop,6311,close,"public boolean filterStop() {

        if (getLogger().isDebugEnabled())
            getLogger().debug(""Stopping filters"");

        // Release all Filter and FilterConfig instances
        synchronized (filterConfigs) {
            Iterator<String> names = filterConfigs.keySet().iterator();
            while (names.hasNext()) {
                String name = names.next();
                if (getLogger().isDebugEnabled())
                    getLogger().debug("" Stopping filter '"" + name + ""'"");
                ApplicationFilterConfig filterConfig = filterConfigs.get(name);
                filterConfig.release();
            }
            filterConfigs.clear();
        }
        return (true);

    }"
tomcat-C-149,18084,org/apache/catalina/core,org/apache/catalina/core/StandardHost.java,2836,True,13,45,2419,3,8,1067,4,70,0.8165548098434005,401,284,0.7082294264339152,0.1538461538461538,9,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,85,1,PERFORMANCE,0.0006779661016949153,DM_GC,16,1,1,0.0522433927473878,0.0006146281499692685,0.0006146281499692685,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-0.9545454545454546,-1.0,37,8017,1419,14323,127,0.1304347826086956,50,204,-77,381,0.0540011137224841,0,0,0,0,1,0,2,0.0,3,2,0,92,11,1,105,-90,0.0127570967193608,159,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6463,18084,7,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/core/StandardHost.java,findReloadedContextMemoryLeaks,6311,open,"public String[] findReloadedContextMemoryLeaks() {

        System.gc();

        List<String> result = new ArrayList<>();

        for (Map.Entry<ClassLoader, String> entry :
                childClassLoaders.entrySet()) {
            ClassLoader cl = entry.getKey();
            if (cl instanceof WebappClassLoader) {
                if (!((WebappClassLoader) cl).isStarted()) {
                    result.add(entry.getValue());
                }
            }
        }

        return result.toArray(new String[result.size()]);
    }"
tomcat-C-200,17873,org/apache/catalina/ha/deploy,org/apache/catalina/ha/deploy/FarmWarDeployer.java,2688,True,150,39,75,1,13,74,25,9,0.9565682498930252,485,215,0.4432989690721649,0.0866666666666666,19,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,9,4,EXPERIMENTAL,0.0061016949152542,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,20,2,4,0.0055316533497234,0.002458512599877,0.002458512599877,-1.0,0.0,0.0,0.0625,0.02490234375,-1.0,0.0,0.0007062146892655367,0.02490234375,-1.0,-1.0,37,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1684,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,7988,18084,978,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/ha/deploy/FarmWarDeployer.java,copy,7282,close,"protected boolean copy(File from, File to) {
        try {
            if (!to.exists()) {
                if (!to.createNewFile()) {
                    log.error(sm.getString(""fileNewFail"", to));
                    return false;
                }
            }
            java.io.FileInputStream is = new java.io.FileInputStream(from);
            java.io.FileOutputStream os = new java.io.FileOutputStream(to,
                    false);
            byte[] buf = new byte[4096];
            while (true) {
                int len = is.read(buf);
                if (len < 0)
                    break;
                os.write(buf, 0, len);
            }
            is.close();
            os.close();
        } catch (IOException e) {
            log.error(sm.getString(""farmWarDeployer.fileCopyFail"",
                    from, to), e);
            return false;
        }
        return true;
    }"
tomcat-C-203,17873,org/apache/catalina/ha/deploy,org/apache/catalina/ha/deploy/FileMessage.java,2688,True,3,11,75,1,8,74,1,9,0.6966292134831461,56,22,0.3928571428571428,0.6666666666666666,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,9,3,MALICIOUS_CODE,0.0616949152542372,EI_EXPOSE_REP,18,2,1,0.0055316533497234,0.0018438844499078,0.0006146281499692685,-1.0,0.1136363636363636,0.0077479338842975,0.1337579617834395,0.0441823027852679,-0.6931818181818182,0.0,0.0296610169491525,0.0441823027852679,-1.0,-1.0,10,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3311,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,9615,18084,978,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/ha/deploy/FileMessage.java,getData,7282,open,"public byte[] getData() {
        return data;
    }"
tomcat-C-204,17873,org/apache/catalina/ha/deploy,org/apache/catalina/ha/deploy/FileMessage.java,2688,True,4,11,75,1,8,74,1,9,0.7303370786516854,56,22,0.3928571428571428,0.5,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,9,3,MALICIOUS_CODE,0.0481355932203389,EI_EXPOSE_REP2,18,2,1,0.0055316533497234,0.0018438844499078,0.0006146281499692685,-1.0,0.1168831168831168,0.0079401118362157,0.1337579617834395,0.0441823027852679,-0.7012987012987013,0.0,0.0296610169491525,0.0441823027852679,-1.0,-1.0,10,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3311,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,9615,18084,978,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/ha/deploy/FileMessage.java,setData,7282,open,"public void setData(byte[] data, int length) {
        this.data = data;
        this.dataLength = length;
    }"
tomcat-C-280,18084,org/apache/catalina/mbeans,org/apache/catalina/mbeans/GlobalResourcesLifecycleListener.java,2836,True,39,5,1285,1,12,147,20,21,0.9166666666666666,129,68,0.5271317829457365,0.8974358974358975,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,11,4,STYLE,0.0515254237288135,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,18,2,4,0.0067609096496619,0.002458512599877,0.002458512599877,-1.0,0.1282051282051282,0.0034927679158448,0.1053719008264462,0.0543030765297002,-0.6923076923076923,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,12,11778,2836,18084,8,0.0,7,8,0,23,0.0048811544991511,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3294,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,9598,18084,75,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/mbeans/GlobalResourcesLifecycleListener.java,createMBeans,6379,close,"protected void createMBeans() {

        // Look up our global naming context
        Context context = null;
        try {
            context = (Context) (new InitialContext()).lookup(""java:/"");
        } catch (NamingException e) {
            log.error(""No global naming context defined for server"");
            return;
        }

        // Recurse through the defined global JNDI resources context
        try {
            createMBeans("""", context);
        } catch (NamingException e) {
            log.error(""Exception processing Global JNDI Resources"", e);
        }

    }"
tomcat-C-284,13906,org/apache/catalina/mbeans,org/apache/catalina/mbeans/MBeanFactory.java,1342,True,20,29,1285,1,12,147,4,21,0.7942157953281423,452,307,0.6792035398230089,0.45,12,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,11,1,STYLE,0.0515254237288135,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,18,2,1,0.0067609096496619,0.0006146281499692685,0.0006146281499692685,-1.0,0.1282051282051282,0.0034927679158448,0.1053719008264462,0.0543030765297002,-0.6923076923076923,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,42,11778,2836,18084,8,0.0,7,8,0,23,0.0048811544991511,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,909,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,7213,18084,75,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/mbeans/MBeanFactory.java,removeConnector,6379,open,"public void removeConnector(String name) throws Exception {

        // Acquire a reference to the component to be removed
        ObjectName oname = new ObjectName(name);
        Service service = getService(oname);
        String port = oname.getKeyProperty(""port"");
        //String address = oname.getKeyProperty(""address"");

        Connector conns[] = service.findConnectors();

        for (int i = 0; i < conns.length; i++) {
            String connAddress = String.valueOf(conns[i].getProperty(""address""));
            String connPort = """"+conns[i].getPort();

            // if (((address.equals(""null"")) &&
            if ((connAddress==null) && port.equals(connPort)) {
                service.removeConnector(conns[i]);
                conns[i].destroy();
                break;
            }
            // } else if (address.equals(connAddress))
            if (port.equals(connPort)) {
                // Remove this component from its parent component
                service.removeConnector(conns[i]);
                conns[i].destroy();
                break;
            }
        }

    }"
tomcat-C-311,18084,org/apache/catalina/servlets,org/apache/catalina/servlets/WebdavServlet.java,2836,True,640,30,3,4,0,69,149,12,0.3054428668018932,1753,605,0.3451226468910439,1.0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,29,14,PERFORMANCE,0.0047457627118644,DM_BOXED_PRIMITIVE_FOR_PARSING,16,1,4,0.0178242163491087,0.0086047940995697,0.002458512599877,-1.0,0.125,0.0084134615384615,0.0848484848484848,0.0755918430465237,-0.75,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,53,11778,2836,18084,29,0.0,3,30,-1,62,0.1119745080500894,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,996,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,7300,18084,81,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/servlets/WebdavServlet.java,doLock,6385,close,"protected void doLock(HttpServletRequest req, HttpServletResponse resp)
        throws ServletException, IOException {

        if (readOnly) {
            resp.sendError(WebdavStatus.SC_FORBIDDEN);
            return;
        }

        if (isLocked(req)) {
            resp.sendError(WebdavStatus.SC_LOCKED);
            return;
        }

        LockInfo lock = new LockInfo();

        // Parsing lock request

        // Parsing depth header

        String depthStr = req.getHeader(""Depth"");

        if (depthStr == null) {
            lock.depth = maxDepth;
        } else {
            if (depthStr.equals(""0"")) {
                lock.depth = 0;
            } else {
                lock.depth = maxDepth;
            }
        }

        // Parsing timeout header

        int lockDuration = DEFAULT_TIMEOUT;
        String lockDurationStr = req.getHeader(""Timeout"");
        if (lockDurationStr == null) {
            lockDuration = DEFAULT_TIMEOUT;
        } else {
            int commaPos = lockDurationStr.indexOf("","");
            // If multiple timeouts, just use the first
            if (commaPos != -1) {
                lockDurationStr = lockDurationStr.substring(0,commaPos);
            }
            if (lockDurationStr.startsWith(""Second-"")) {
                lockDuration =
                    (new Integer(lockDurationStr.substring(7))).intValue();
            } else {
                if (lockDurationStr.equalsIgnoreCase(""infinity"")) {
                    lockDuration = MAX_TIMEOUT;
                } else {
                    try {
                        lockDuration =
                            (new Integer(lockDurationStr)).intValue();
                    } catch (NumberFormatException e) {
                        lockDuration = MAX_TIMEOUT;
                    }
                }
            }
            if (lockDuration == 0) {
                lockDuration = DEFAULT_TIMEOUT;
            }
            if (lockDuration > MAX_TIMEOUT) {
                lockDuration = MAX_TIMEOUT;
            }
        }
        lock.expiresAt = System.currentTimeMillis() + (lockDuration * 1000);

        int lockRequestType = LOCK_CREATION;

        Node lockInfoNode = null;

        DocumentBuilder documentBuilder = getDocumentBuilder();

        try {
            Document document = documentBuilder.parse(new InputSource
                (req.getInputStream()));

            // Get the root element of the document
            Element rootElement = document.getDocumentElement();
            lockInfoNode = rootElement;
        } catch (IOException e) {
            lockRequestType = LOCK_REFRESH;
        } catch (SAXException e) {
            lockRequestType = LOCK_REFRESH;
        }

        if (lockInfoNode != null) {

            // Reading lock information

            NodeList childList = lockInfoNode.getChildNodes();
            StringWriter strWriter = null;
            DOMWriter domWriter = null;

            Node lockScopeNode = null;
            Node lockTypeNode = null;
            Node lockOwnerNode = null;

            for (int i=0; i < childList.getLength(); i++) {
                Node currentNode = childList.item(i);
                switch (currentNode.getNodeType()) {
                case Node.TEXT_NODE:
                    break;
                case Node.ELEMENT_NODE:
                    String nodeName = currentNode.getNodeName();
                    if (nodeName.endsWith(""lockscope"")) {
                        lockScopeNode = currentNode;
                    }
                    if (nodeName.endsWith(""locktype"")) {
                        lockTypeNode = currentNode;
                    }
                    if (nodeName.endsWith(""owner"")) {
                        lockOwnerNode = currentNode;
                    }
                    break;
                }
            }

            if (lockScopeNode != null) {

                childList = lockScopeNode.getChildNodes();
                for (int i=0; i < childList.getLength(); i++) {
                    Node currentNode = childList.item(i);
                    switch (currentNode.getNodeType()) {
                    case Node.TEXT_NODE:
                        break;
                    case Node.ELEMENT_NODE:
                        String tempScope = currentNode.getNodeName();
                        if (tempScope.indexOf(':') != -1) {
                            lock.scope = tempScope.substring
                                (tempScope.indexOf(':') + 1);
                        } else {
                            lock.scope = tempScope;
                        }
                        break;
                    }
                }

                if (lock.scope == null) {
                    // Bad request
                    resp.setStatus(WebdavStatus.SC_BAD_REQUEST);
                }

            } else {
                // Bad request
                resp.setStatus(WebdavStatus.SC_BAD_REQUEST);
            }

            if (lockTypeNode != null) {

                childList = lockTypeNode.getChildNodes();
                for (int i=0; i < childList.getLength(); i++) {
                    Node currentNode = childList.item(i);
                    switch (currentNode.getNodeType()) {
                    case Node.TEXT_NODE:
                        break;
                    case Node.ELEMENT_NODE:
                        String tempType = currentNode.getNodeName();
                        if (tempType.indexOf(':') != -1) {
                            lock.type =
                                tempType.substring(tempType.indexOf(':') + 1);
                        } else {
                            lock.type = tempType;
                        }
                        break;
                    }
                }

                if (lock.type == null) {
                    // Bad request
                    resp.setStatus(WebdavStatus.SC_BAD_REQUEST);
                }

            } else {
                // Bad request
                resp.setStatus(WebdavStatus.SC_BAD_REQUEST);
            }

            if (lockOwnerNode != null) {

                childList = lockOwnerNode.getChildNodes();
                for (int i=0; i < childList.getLength(); i++) {
                    Node currentNode = childList.item(i);
                    switch (currentNode.getNodeType()) {
                    case Node.TEXT_NODE:
                        lock.owner += currentNode.getNodeValue();
                        break;
                    case Node.ELEMENT_NODE:
                        strWriter = new StringWriter();
                        domWriter = new DOMWriter(strWriter, true);
                        domWriter.print(currentNode);
                        lock.owner += strWriter.toString();
                        break;
                    }
                }

                if (lock.owner == null) {
                    // Bad request
                    resp.setStatus(WebdavStatus.SC_BAD_REQUEST);
                }

            } else {
                lock.owner = """";
            }

        }

        String path = getRelativePath(req);

        lock.path = path;

        WebResource resource = resources.getResource(path);

        Enumeration<LockInfo> locksList = null;

        if (lockRequestType == LOCK_CREATION) {

            // Generating lock id
            String lockTokenStr = req.getServletPath() + ""-"" + lock.type + ""-""
                + lock.scope + ""-"" + req.getUserPrincipal() + ""-""
                + lock.depth + ""-"" + lock.owner + ""-"" + lock.tokens + ""-""
                + lock.expiresAt + ""-"" + System.currentTimeMillis() + ""-""
                + secret;
            String lockToken = MD5Encoder.encode(md5Helper.digest(
                    lockTokenStr.getBytes(StandardCharsets.ISO_8859_1)));

            if (resource.isDirectory() && lock.depth == maxDepth) {

                // Locking a collection (and all its member resources)

                // Checking if a child resource of this collection is
                // already locked
                Vector<String> lockPaths = new Vector<>();
                locksList = collectionLocks.elements();
                while (locksList.hasMoreElements()) {
                    LockInfo currentLock = locksList.nextElement();
                    if (currentLock.hasExpired()) {
                        resourceLocks.remove(currentLock.path);
                        continue;
                    }
                    if ( (currentLock.path.startsWith(lock.path)) &&
                         ((currentLock.isExclusive()) ||
                          (lock.isExclusive())) ) {
                        // A child collection of this collection is locked
                        lockPaths.addElement(currentLock.path);
                    }
                }
                locksList = resourceLocks.elements();
                while (locksList.hasMoreElements()) {
                    LockInfo currentLock = locksList.nextElement();
                    if (currentLock.hasExpired()) {
                        resourceLocks.remove(currentLock.path);
                        continue;
                    }
                    if ( (currentLock.path.startsWith(lock.path)) &&
                         ((currentLock.isExclusive()) ||
                          (lock.isExclusive())) ) {
                        // A child resource of this collection is locked
                        lockPaths.addElement(currentLock.path);
                    }
                }

                if (!lockPaths.isEmpty()) {

                    // One of the child paths was locked
                    // We generate a multistatus error report

                    Enumeration<String> lockPathsList = lockPaths.elements();

                    resp.setStatus(WebdavStatus.SC_CONFLICT);

                    XMLWriter generatedXML = new XMLWriter();
                    generatedXML.writeXMLHeader();

                    generatedXML.writeElement(""D"", DEFAULT_NAMESPACE,
                            ""multistatus"", XMLWriter.OPENING);

                    while (lockPathsList.hasMoreElements()) {
                        generatedXML.writeElement(""D"", ""response"",
                                XMLWriter.OPENING);
                        generatedXML.writeElement(""D"", ""href"",
                                XMLWriter.OPENING);
                        generatedXML.writeText(lockPathsList.nextElement());
                        generatedXML.writeElement(""D"", ""href"",
                                XMLWriter.CLOSING);
                        generatedXML.writeElement(""D"", ""status"",
                                XMLWriter.OPENING);
                        generatedXML
                            .writeText(""HTTP/1.1 "" + WebdavStatus.SC_LOCKED
                                       + "" "" + WebdavStatus
                                       .getStatusText(WebdavStatus.SC_LOCKED));
                        generatedXML.writeElement(""D"", ""status"",
                                XMLWriter.CLOSING);

                        generatedXML.writeElement(""D"", ""response"",
                                XMLWriter.CLOSING);
                    }

                    generatedXML.writeElement(""D"", ""multistatus"",
                            XMLWriter.CLOSING);

                    Writer writer = resp.getWriter();
                    writer.write(generatedXML.toString());
                    writer.close();

                    return;

                }

                boolean addLock = true;

                // Checking if there is already a shared lock on this path
                locksList = collectionLocks.elements();
                while (locksList.hasMoreElements()) {

                    LockInfo currentLock = locksList.nextElement();
                    if (currentLock.path.equals(lock.path)) {

                        if (currentLock.isExclusive()) {
                            resp.sendError(WebdavStatus.SC_LOCKED);
                            return;
                        } else {
                            if (lock.isExclusive()) {
                                resp.sendError(WebdavStatus.SC_LOCKED);
                                return;
                            }
                        }

                        currentLock.tokens.addElement(lockToken);
                        lock = currentLock;
                        addLock = false;

                    }

                }

                if (addLock) {
                    lock.tokens.addElement(lockToken);
                    collectionLocks.addElement(lock);
                }

            } else {

                // Locking a single resource

                // Retrieving an already existing lock on that resource
                LockInfo presentLock = resourceLocks.get(lock.path);
                if (presentLock != null) {

                    if ((presentLock.isExclusive()) || (lock.isExclusive())) {
                        // If either lock is exclusive, the lock can't be
                        // granted
                        resp.sendError(WebdavStatus.SC_PRECONDITION_FAILED);
                        return;
                    } else {
                        presentLock.tokens.addElement(lockToken);
                        lock = presentLock;
                    }

                } else {

                    lock.tokens.addElement(lockToken);
                    resourceLocks.put(lock.path, lock);

                    // Checking if a resource exists at this path
                    if (!resource.exists()) {

                        // ""Creating"" a lock-null resource
                        int slash = lock.path.lastIndexOf('/');
                        String parentPath = lock.path.substring(0, slash);

                        Vector<String> lockNulls =
                            lockNullResources.get(parentPath);
                        if (lockNulls == null) {
                            lockNulls = new Vector<>();
                            lockNullResources.put(parentPath, lockNulls);
                        }

                        lockNulls.addElement(lock.path);

                    }
                    // Add the Lock-Token header as by RFC 2518 8.10.1
                    // - only do this for newly created locks
                    resp.addHeader(""Lock-Token"", ""<opaquelocktoken:""
                                   + lockToken + "">"");
                }

            }

        }

        if (lockRequestType == LOCK_REFRESH) {

            String ifHeader = req.getHeader(""If"");
            if (ifHeader == null)
                ifHeader = """";

            // Checking resource locks

            LockInfo toRenew = resourceLocks.get(path);
            Enumeration<String> tokenList = null;

            if (toRenew != null) {
                // At least one of the tokens of the locks must have been given
                tokenList = toRenew.tokens.elements();
                while (tokenList.hasMoreElements()) {
                    String token = tokenList.nextElement();
                    if (ifHeader.indexOf(token) != -1) {
                        toRenew.expiresAt = lock.expiresAt;
                        lock = toRenew;
                    }
                }
            }

            // Checking inheritable collection locks

            Enumeration<LockInfo> collectionLocksList =
                collectionLocks.elements();
            while (collectionLocksList.hasMoreElements()) {
                toRenew = collectionLocksList.nextElement();
                if (path.equals(toRenew.path)) {

                    tokenList = toRenew.tokens.elements();
                    while (tokenList.hasMoreElements()) {
                        String token = tokenList.nextElement();
                        if (ifHeader.indexOf(token) != -1) {
                            toRenew.expiresAt = lock.expiresAt;
                            lock = toRenew;
                        }
                    }

                }
            }

        }

        // Set the status, then generate the XML response containing
        // the lock information
        XMLWriter generatedXML = new XMLWriter();
        generatedXML.writeXMLHeader();
        generatedXML.writeElement(""D"", DEFAULT_NAMESPACE, ""prop"",
                XMLWriter.OPENING);

        generatedXML.writeElement(""D"", ""lockdiscovery"", XMLWriter.OPENING);

        lock.toXML(generatedXML);

        generatedXML.writeElement(""D"", ""lockdiscovery"", XMLWriter.CLOSING);

        generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);

        resp.setStatus(WebdavStatus.SC_OK);
        resp.setContentType(""text/xml; charset=UTF-8"");
        Writer writer = resp.getWriter();
        writer.write(generatedXML.toString());
        writer.close();

    }"
tomcat-C-316,18084,org/apache/catalina/servlets,org/apache/catalina/servlets/WebdavServlet.java,2836,True,320,30,3,4,8,69,75,12,0.3113590263691683,1753,605,0.3451226468910439,0.175,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,29,14,STYLE,0.0128813559322033,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,20,3,4,0.0178242163491087,0.0086047940995697,0.002458512599877,-1.0,0.2222222222222222,0.0054012345679012,0.1053719008264462,0.0543030765297002,-0.5555555555555556,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,53,11778,2836,18084,29,0.0,3,30,-1,62,0.1119745080500894,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,996,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,7300,18084,81,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/servlets/WebdavServlet.java,doLock,6385,open,"protected void doLock(HttpServletRequest req, HttpServletResponse resp)
        throws ServletException, IOException {

        if (readOnly) {
            resp.sendError(WebdavStatus.SC_FORBIDDEN);
            return;
        }

        if (isLocked(req)) {
            resp.sendError(WebdavStatus.SC_LOCKED);
            return;
        }

        LockInfo lock = new LockInfo();

        // Parsing lock request

        // Parsing depth header

        String depthStr = req.getHeader(""Depth"");

        if (depthStr == null) {
            lock.depth = maxDepth;
        } else {
            if (depthStr.equals(""0"")) {
                lock.depth = 0;
            } else {
                lock.depth = maxDepth;
            }
        }

        // Parsing timeout header

        int lockDuration = DEFAULT_TIMEOUT;
        String lockDurationStr = req.getHeader(""Timeout"");
        if (lockDurationStr == null) {
            lockDuration = DEFAULT_TIMEOUT;
        } else {
            int commaPos = lockDurationStr.indexOf("","");
            // If multiple timeouts, just use the first
            if (commaPos != -1) {
                lockDurationStr = lockDurationStr.substring(0,commaPos);
            }
            if (lockDurationStr.startsWith(""Second-"")) {
                lockDuration =
                    (new Integer(lockDurationStr.substring(7))).intValue();
            } else {
                if (lockDurationStr.equalsIgnoreCase(""infinity"")) {
                    lockDuration = MAX_TIMEOUT;
                } else {
                    try {
                        lockDuration =
                            (new Integer(lockDurationStr)).intValue();
                    } catch (NumberFormatException e) {
                        lockDuration = MAX_TIMEOUT;
                    }
                }
            }
            if (lockDuration == 0) {
                lockDuration = DEFAULT_TIMEOUT;
            }
            if (lockDuration > MAX_TIMEOUT) {
                lockDuration = MAX_TIMEOUT;
            }
        }
        lock.expiresAt = System.currentTimeMillis() + (lockDuration * 1000);

        int lockRequestType = LOCK_CREATION;

        Node lockInfoNode = null;

        DocumentBuilder documentBuilder = getDocumentBuilder();

        try {
            Document document = documentBuilder.parse(new InputSource
                (req.getInputStream()));

            // Get the root element of the document
            Element rootElement = document.getDocumentElement();
            lockInfoNode = rootElement;
        } catch (IOException e) {
            lockRequestType = LOCK_REFRESH;
        } catch (SAXException e) {
            lockRequestType = LOCK_REFRESH;
        }

        if (lockInfoNode != null) {

            // Reading lock information

            NodeList childList = lockInfoNode.getChildNodes();
            StringWriter strWriter = null;
            DOMWriter domWriter = null;

            Node lockScopeNode = null;
            Node lockTypeNode = null;
            Node lockOwnerNode = null;

            for (int i=0; i < childList.getLength(); i++) {
                Node currentNode = childList.item(i);
                switch (currentNode.getNodeType()) {
                case Node.TEXT_NODE:
                    break;
                case Node.ELEMENT_NODE:
                    String nodeName = currentNode.getNodeName();
                    if (nodeName.endsWith(""lockscope"")) {
                        lockScopeNode = currentNode;
                    }
                    if (nodeName.endsWith(""locktype"")) {
                        lockTypeNode = currentNode;
                    }
                    if (nodeName.endsWith(""owner"")) {
                        lockOwnerNode = currentNode;
                    }
                    break;
                }
            }

            if (lockScopeNode != null) {

                childList = lockScopeNode.getChildNodes();
                for (int i=0; i < childList.getLength(); i++) {
                    Node currentNode = childList.item(i);
                    switch (currentNode.getNodeType()) {
                    case Node.TEXT_NODE:
                        break;
                    case Node.ELEMENT_NODE:
                        String tempScope = currentNode.getNodeName();
                        if (tempScope.indexOf(':') != -1) {
                            lock.scope = tempScope.substring
                                (tempScope.indexOf(':') + 1);
                        } else {
                            lock.scope = tempScope;
                        }
                        break;
                    }
                }

                if (lock.scope == null) {
                    // Bad request
                    resp.setStatus(WebdavStatus.SC_BAD_REQUEST);
                }

            } else {
                // Bad request
                resp.setStatus(WebdavStatus.SC_BAD_REQUEST);
            }

            if (lockTypeNode != null) {

                childList = lockTypeNode.getChildNodes();
                for (int i=0; i < childList.getLength(); i++) {
                    Node currentNode = childList.item(i);
                    switch (currentNode.getNodeType()) {
                    case Node.TEXT_NODE:
                        break;
                    case Node.ELEMENT_NODE:
                        String tempType = currentNode.getNodeName();
                        if (tempType.indexOf(':') != -1) {
                            lock.type =
                                tempType.substring(tempType.indexOf(':') + 1);
                        } else {
                            lock.type = tempType;
                        }
                        break;
                    }
                }

                if (lock.type == null) {
                    // Bad request
                    resp.setStatus(WebdavStatus.SC_BAD_REQUEST);
                }

            } else {
                // Bad request
                resp.setStatus(WebdavStatus.SC_BAD_REQUEST);
            }

            if (lockOwnerNode != null) {

                childList = lockOwnerNode.getChildNodes();
                for (int i=0; i < childList.getLength(); i++) {
                    Node currentNode = childList.item(i);
                    switch (currentNode.getNodeType()) {
                    case Node.TEXT_NODE:
                        lock.owner += currentNode.getNodeValue();
                        break;
                    case Node.ELEMENT_NODE:
                        strWriter = new StringWriter();
                        domWriter = new DOMWriter(strWriter, true);
                        domWriter.print(currentNode);
                        lock.owner += strWriter.toString();
                        break;
                    }
                }

                if (lock.owner == null) {
                    // Bad request
                    resp.setStatus(WebdavStatus.SC_BAD_REQUEST);
                }

            } else {
                lock.owner = """";
            }

        }

        String path = getRelativePath(req);

        lock.path = path;

        WebResource resource = resources.getResource(path);

        Enumeration<LockInfo> locksList = null;

        if (lockRequestType == LOCK_CREATION) {

            // Generating lock id
            String lockTokenStr = req.getServletPath() + ""-"" + lock.type + ""-""
                + lock.scope + ""-"" + req.getUserPrincipal() + ""-""
                + lock.depth + ""-"" + lock.owner + ""-"" + lock.tokens + ""-""
                + lock.expiresAt + ""-"" + System.currentTimeMillis() + ""-""
                + secret;
            String lockToken = MD5Encoder.encode(md5Helper.digest(
                    lockTokenStr.getBytes(StandardCharsets.ISO_8859_1)));

            if (resource.isDirectory() && lock.depth == maxDepth) {

                // Locking a collection (and all its member resources)

                // Checking if a child resource of this collection is
                // already locked
                Vector<String> lockPaths = new Vector<>();
                locksList = collectionLocks.elements();
                while (locksList.hasMoreElements()) {
                    LockInfo currentLock = locksList.nextElement();
                    if (currentLock.hasExpired()) {
                        resourceLocks.remove(currentLock.path);
                        continue;
                    }
                    if ( (currentLock.path.startsWith(lock.path)) &&
                         ((currentLock.isExclusive()) ||
                          (lock.isExclusive())) ) {
                        // A child collection of this collection is locked
                        lockPaths.addElement(currentLock.path);
                    }
                }
                locksList = resourceLocks.elements();
                while (locksList.hasMoreElements()) {
                    LockInfo currentLock = locksList.nextElement();
                    if (currentLock.hasExpired()) {
                        resourceLocks.remove(currentLock.path);
                        continue;
                    }
                    if ( (currentLock.path.startsWith(lock.path)) &&
                         ((currentLock.isExclusive()) ||
                          (lock.isExclusive())) ) {
                        // A child resource of this collection is locked
                        lockPaths.addElement(currentLock.path);
                    }
                }

                if (!lockPaths.isEmpty()) {

                    // One of the child paths was locked
                    // We generate a multistatus error report

                    Enumeration<String> lockPathsList = lockPaths.elements();

                    resp.setStatus(WebdavStatus.SC_CONFLICT);

                    XMLWriter generatedXML = new XMLWriter();
                    generatedXML.writeXMLHeader();

                    generatedXML.writeElement(""D"", DEFAULT_NAMESPACE,
                            ""multistatus"", XMLWriter.OPENING);

                    while (lockPathsList.hasMoreElements()) {
                        generatedXML.writeElement(""D"", ""response"",
                                XMLWriter.OPENING);
                        generatedXML.writeElement(""D"", ""href"",
                                XMLWriter.OPENING);
                        generatedXML.writeText(lockPathsList.nextElement());
                        generatedXML.writeElement(""D"", ""href"",
                                XMLWriter.CLOSING);
                        generatedXML.writeElement(""D"", ""status"",
                                XMLWriter.OPENING);
                        generatedXML
                            .writeText(""HTTP/1.1 "" + WebdavStatus.SC_LOCKED
                                       + "" "" + WebdavStatus
                                       .getStatusText(WebdavStatus.SC_LOCKED));
                        generatedXML.writeElement(""D"", ""status"",
                                XMLWriter.CLOSING);

                        generatedXML.writeElement(""D"", ""response"",
                                XMLWriter.CLOSING);
                    }

                    generatedXML.writeElement(""D"", ""multistatus"",
                            XMLWriter.CLOSING);

                    Writer writer = resp.getWriter();
                    writer.write(generatedXML.toString());
                    writer.close();

                    return;

                }

                boolean addLock = true;

                // Checking if there is already a shared lock on this path
                locksList = collectionLocks.elements();
                while (locksList.hasMoreElements()) {

                    LockInfo currentLock = locksList.nextElement();
                    if (currentLock.path.equals(lock.path)) {

                        if (currentLock.isExclusive()) {
                            resp.sendError(WebdavStatus.SC_LOCKED);
                            return;
                        } else {
                            if (lock.isExclusive()) {
                                resp.sendError(WebdavStatus.SC_LOCKED);
                                return;
                            }
                        }

                        currentLock.tokens.addElement(lockToken);
                        lock = currentLock;
                        addLock = false;

                    }

                }

                if (addLock) {
                    lock.tokens.addElement(lockToken);
                    collectionLocks.addElement(lock);
                }

            } else {

                // Locking a single resource

                // Retrieving an already existing lock on that resource
                LockInfo presentLock = resourceLocks.get(lock.path);
                if (presentLock != null) {

                    if ((presentLock.isExclusive()) || (lock.isExclusive())) {
                        // If either lock is exclusive, the lock can't be
                        // granted
                        resp.sendError(WebdavStatus.SC_PRECONDITION_FAILED);
                        return;
                    } else {
                        presentLock.tokens.addElement(lockToken);
                        lock = presentLock;
                    }

                } else {

                    lock.tokens.addElement(lockToken);
                    resourceLocks.put(lock.path, lock);

                    // Checking if a resource exists at this path
                    if (!resource.exists()) {

                        // ""Creating"" a lock-null resource
                        int slash = lock.path.lastIndexOf('/');
                        String parentPath = lock.path.substring(0, slash);

                        Vector<String> lockNulls =
                            lockNullResources.get(parentPath);
                        if (lockNulls == null) {
                            lockNulls = new Vector<>();
                            lockNullResources.put(parentPath, lockNulls);
                        }

                        lockNulls.addElement(lock.path);

                    }
                    // Add the Lock-Token header as by RFC 2518 8.10.1
                    // - only do this for newly created locks
                    resp.addHeader(""Lock-Token"", ""<opaquelocktoken:""
                                   + lockToken + "">"");
                }

            }

        }

        if (lockRequestType == LOCK_REFRESH) {

            String ifHeader = req.getHeader(""If"");
            if (ifHeader == null)
                ifHeader = """";

            // Checking resource locks

            LockInfo toRenew = resourceLocks.get(path);
            Enumeration<String> tokenList = null;

            if (toRenew != null) {
                // At least one of the tokens of the locks must have been given
                tokenList = toRenew.tokens.elements();
                while (tokenList.hasMoreElements()) {
                    String token = tokenList.nextElement();
                    if (ifHeader.indexOf(token) != -1) {
                        toRenew.expiresAt = lock.expiresAt;
                        lock = toRenew;
                    }
                }
            }

            // Checking inheritable collection locks

            Enumeration<LockInfo> collectionLocksList =
                collectionLocks.elements();
            while (collectionLocksList.hasMoreElements()) {
                toRenew = collectionLocksList.nextElement();
                if (path.equals(toRenew.path)) {

                    tokenList = toRenew.tokens.elements();
                    while (tokenList.hasMoreElements()) {
                        String token = tokenList.nextElement();
                        if (ifHeader.indexOf(token) != -1) {
                            toRenew.expiresAt = lock.expiresAt;
                            lock = toRenew;
                        }
                    }

                }
            }

        }

        // Set the status, then generate the XML response containing
        // the lock information
        XMLWriter generatedXML = new XMLWriter();
        generatedXML.writeXMLHeader();
        generatedXML.writeElement(""D"", DEFAULT_NAMESPACE, ""prop"",
                XMLWriter.OPENING);

        generatedXML.writeElement(""D"", ""lockdiscovery"", XMLWriter.OPENING);

        lock.toXML(generatedXML);

        generatedXML.writeElement(""D"", ""lockdiscovery"", XMLWriter.CLOSING);

        generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);

        resp.setStatus(WebdavStatus.SC_OK);
        resp.setContentType(""text/xml; charset=UTF-8"");
        Writer writer = resp.getWriter();
        writer.write(generatedXML.toString());
        writer.close();

    }"
tomcat-C-323,18084,org/apache/catalina/servlets,org/apache/catalina/servlets/WebdavServlet.java,2836,True,12,30,3,4,12,69,4,12,0.0943204868154158,1753,605,0.3451226468910439,0.5833333333333334,10,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,29,14,STYLE,0.0149152542372881,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,17,2,1,0.0178242163491087,0.0086047940995697,0.0006146281499692685,-1.0,0.16,0.0042,0.1053719008264462,0.0543030765297002,-0.64,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,53,11778,2836,18084,29,0.0,3,30,-1,62,0.1119745080500894,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,996,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,7300,18084,81,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/servlets/WebdavServlet.java,init,6385,close,"@Override
    public void init()
        throws ServletException {

        super.init();

        if (getServletConfig().getInitParameter(""secret"") != null)
            secret = getServletConfig().getInitParameter(""secret"");

        if (getServletConfig().getInitParameter(""maxDepth"") != null)
            maxDepth = Integer.parseInt(
                    getServletConfig().getInitParameter(""maxDepth""));

        if (getServletConfig().getInitParameter(""allowSpecialPaths"") != null)
            allowSpecialPaths = Boolean.parseBoolean(
                    getServletConfig().getInitParameter(""allowSpecialPaths""));

        // Load the MD5 helper used to calculate signatures.
        try {
            md5Helper = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new UnavailableException(""No MD5"");
        }

    }"
tomcat-C-324,18084,org/apache/catalina/session,org/apache/catalina/session/FileStore.java,2836,True,31,12,138,1,12,264,4,22,0.835214446952596,232,129,0.5560344827586207,0.8387096774193549,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,34,5,STYLE,0.0223728813559322,BC_UNCONFIRMED_CAST,20,3,1,0.0208973570989551,0.0030731407498463,0.0006146281499692685,-1.0,0.032258064516129,0.0009755463059313216,0.1053719008264462,0.0543030765297002,-0.935483870967742,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,17,11778,2836,18084,0,0.0,2,0,0,2,0.0006684491978609625,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,890,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,7194,18084,75,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/session/FileStore.java,save,6379,open,"@Override
    public void save(Session session) throws IOException {

        // Open an output stream to the specified pathname, if any
        File file = file(session.getIdInternal());
        if (file == null) {
            return;
        }
        if (manager.getContext().getLogger().isDebugEnabled()) {
            manager.getContext().getLogger().debug(sm.getString(getStoreName()+"".saving"",
                             session.getIdInternal(), file.getAbsolutePath()));
        }
        FileOutputStream fos = null;
        ObjectOutputStream oos = null;
        try {
            fos = new FileOutputStream(file.getAbsolutePath());
            oos = new ObjectOutputStream(new BufferedOutputStream(fos));
        } catch (IOException e) {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException f) {
                    // Ignore
                }
            }
            throw e;
        }

        try {
            ((StandardSession)session).writeObjectData(oos);
        } finally {
            oos.close();
        }

    }"
tomcat-C-325,18084,org/apache/catalina/session,org/apache/catalina/session/FileStore.java,2836,True,28,12,138,1,8,264,7,22,0.3431151241534989,232,129,0.5560344827586207,0.25,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,34,5,STYLE,0.0061016949152542,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,13,2,1,0.0208973570989551,0.0030731407498463,0.0006146281499692685,-1.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,17,11778,2836,18084,0,0.0,2,0,0,2,0.0006684491978609625,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,890,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,7194,18084,75,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/session/FileStore.java,getSize,6379,close,"@Override
    public int getSize() throws IOException {

        // Acquire the list of files in our storage directory
        File file = directory();
        if (file == null) {
            return (0);
        }
        String files[] = file.list();

        // Figure out which files are sessions
        int keycount = 0;
        for (int i = 0; i < files.length; i++) {
            if (files[i].endsWith(FILE_EXT)) {
                keycount++;
            }
        }
        return (keycount);

    }"
tomcat-C-328,18084,org/apache/catalina/session,org/apache/catalina/session/FileStore.java,2836,True,10,12,138,1,8,264,3,22,0.7404063205417607,232,129,0.5560344827586207,0.9,10,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,34,5,BAD_PRACTICE,0.0142372881355932,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,16,2,1,0.0208973570989551,0.0030731407498463,0.0006146281499692685,-1.0,0.1428571428571428,0.0038265306122448,0.128099173553719,0.106556527989236,-0.7142857142857143,0.0,0.0218926553672316,0.106556527989236,-1.0,-1.0,17,11778,2836,18084,0,0.0,2,0,0,2,0.0006684491978609625,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,890,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,7194,18084,75,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/session/FileStore.java,remove,6379,open,"@Override
    public void remove(String id) throws IOException {

        File file = file(id);
        if (file == null) {
            return;
        }
        if (manager.getContext().getLogger().isDebugEnabled()) {
            manager.getContext().getLogger().debug(sm.getString(getStoreName()+"".removing"",
                             id, file.getAbsolutePath()));
        }
        file.delete();

    }"
tomcat-C-329,18084,org/apache/catalina/session,org/apache/catalina/session/JDBCStore.java,2836,True,61,40,138,1,20,264,9,22,0.7530064754856615,628,323,0.5143312101910829,0.2786885245901639,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,34,13,STYLE,0.0223728813559322,BC_UNCONFIRMED_CAST,20,3,2,0.0208973570989551,0.0079901659496004,0.0012292562999385,-1.0,0.032258064516129,0.0009755463059313216,0.1053719008264462,0.0543030765297002,-0.935483870967742,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,26,11778,2836,18084,0,0.0,2,0,0,2,0.0006684491978609625,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,890,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,7194,18084,75,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/session/JDBCStore.java,save,6379,open,"@Override
    public void save(Session session) throws IOException {
        ObjectOutputStream oos = null;
        ByteArrayOutputStream bos = null;
        ByteArrayInputStream bis = null;
        InputStream in = null;

        synchronized (this) {
            int numberOfTries = 2;
            while (numberOfTries > 0) {
                Connection _conn = getConnection();
                if (_conn == null) {
                    return;
                }

                try {
                    // If sessions already exist in DB, remove and insert again.
                    // TODO:
                    // * Check if ID exists in database and if so use UPDATE.
                    remove(session.getIdInternal(), _conn);

                    bos = new ByteArrayOutputStream();
                    oos = new ObjectOutputStream(new BufferedOutputStream(bos));

                    ((StandardSession) session).writeObjectData(oos);
                    oos.close();
                    oos = null;
                    byte[] obs = bos.toByteArray();
                    int size = obs.length;
                    bis = new ByteArrayInputStream(obs, 0, size);
                    in = new BufferedInputStream(bis, size);

                    if (preparedSaveSql == null) {
                        String saveSql = ""INSERT INTO "" + sessionTable + "" (""
                           + sessionIdCol + "", "" + sessionAppCol + "", ""
                           + sessionDataCol + "", "" + sessionValidCol
                           + "", "" + sessionMaxInactiveCol + "", ""
                           + sessionLastAccessedCol
                           + "") VALUES (?, ?, ?, ?, ?, ?)"";
                       preparedSaveSql = _conn.prepareStatement(saveSql);
                    }

                    preparedSaveSql.setString(1, session.getIdInternal());
                    preparedSaveSql.setString(2, getName());
                    preparedSaveSql.setBinaryStream(3, in, size);
                    preparedSaveSql.setString(4, session.isValid() ? ""1"" : ""0"");
                    preparedSaveSql.setInt(5, session.getMaxInactiveInterval());
                    preparedSaveSql.setLong(6, session.getLastAccessedTime());
                    preparedSaveSql.execute();
                    // Break out after the finally block
                    numberOfTries = 0;
                } catch (SQLException e) {
                    manager.getContext().getLogger().error(sm.getString(getStoreName() + "".SQLException"", e));
                    if (dbConnection != null)
                        close(dbConnection);
                } catch (IOException e) {
                    // Ignore
                } finally {
                    if (oos != null) {
                        oos.close();
                    }
                    if (bis != null) {
                        bis.close();
                    }
                    if (in != null) {
                        in.close();
                    }

                    release(_conn);
                }
                numberOfTries--;
            }
        }

        if (manager.getContext().getLogger().isDebugEnabled()) {
            manager.getContext().getLogger().debug(sm.getString(getStoreName() + "".saving"",
                    session.getIdInternal(), sessionTable));
        }
    }"
tomcat-C-333,18084,org/apache/catalina/session,org/apache/catalina/session/JDBCStore.java,2836,True,76,40,138,1,8,264,15,22,0.8686401480111008,628,323,0.5143312101910829,0.3421052631578947,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,34,13,CORRECTNESS,0.0020338983050847,NP_NULL_ON_SOME_PATH_EXCEPTION,11,2,1,0.0208973570989551,0.0079901659496004,0.0006146281499692685,-1.0,0.0,0.0,0.1304347826086956,0.0559756353707204,-1.0,0.0,0.0021186440677966,0.0559756353707204,-1.0,-1.0,26,11778,2836,18084,0,0.0,2,0,0,2,0.0006684491978609625,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,890,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,7194,18084,75,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/session/JDBCStore.java,open,6379,open,"protected Connection open() throws SQLException {

        // Do nothing if there is a database connection already open
        if (dbConnection != null)
            return (dbConnection);

        if (dataSourceName != null && dataSource == null) {
            Context initCtx;
            try {
                initCtx = new InitialContext();
                Context envCtx = (Context) initCtx.lookup(""java:comp/env"");
                this.dataSource = (DataSource) envCtx.lookup(this.dataSourceName);
            } catch (NamingException e) {
                manager.getContext().getLogger().error(
                        sm.getString(getStoreName() + "".wrongDataSource"",
                                this.dataSourceName), e);
           }
        }

        if (dataSource != null) {
            return dataSource.getConnection();
        }

        // Instantiate our database driver if necessary
        if (driver == null) {
            try {
                Class<?> clazz = Class.forName(driverName);
                driver = (Driver) clazz.newInstance();
            } catch (ClassNotFoundException ex) {
                manager.getContext().getLogger().error(sm.getString(getStoreName() + "".checkConnectionClassNotFoundException"",
                        ex.toString()));
            } catch (InstantiationException ex) {
                manager.getContext().getLogger().error(sm.getString(getStoreName() + "".checkConnectionClassNotFoundException"",
                        ex.toString()));
            } catch (IllegalAccessException ex) {
                manager.getContext().getLogger().error(sm.getString(getStoreName() + "".checkConnectionClassNotFoundException"",
                        ex.toString()));
            }
        }

        // Open a new connection
        Properties props = new Properties();
        if (connectionName != null)
            props.put(""user"", connectionName);
        if (connectionPassword != null)
            props.put(""password"", connectionPassword);
        dbConnection = driver.connect(connectionURL, props);
        dbConnection.setAutoCommit(true);
        return (dbConnection);

    }"
tomcat-C-343,18084,org/apache/catalina/session,org/apache/catalina/session/StandardManager.java,2836,True,97,10,138,3,16,264,14,22,0.7333333333333333,343,140,0.4081632653061224,0.5463917525773195,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,34,4,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,1,0.0208973570989551,0.002458512599877,0.0006146281499692685,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,42,11778,2836,18084,0,0.0,2,0,0,2,0.0006684491978609625,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3284,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,9588,18084,75,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/session/StandardManager.java,doUnload,6379,close,"@SuppressWarnings(""null"")
    protected void doUnload() throws IOException {

        if (log.isDebugEnabled())
            log.debug(sm.getString(""standardManager.unloading.debug""));

        if (sessions.isEmpty()) {
            log.debug(sm.getString(""standardManager.unloading.nosessions""));
            return; // nothing to do
        }

        // Open an output stream to the specified pathname, if any
        File file = file();
        if (file == null)
            return;
        if (log.isDebugEnabled())
            log.debug(sm.getString(""standardManager.unloading"", pathname));
        FileOutputStream fos = null;
        BufferedOutputStream bos = null;
        ObjectOutputStream oos = null;
        boolean error = false;
        try {
            fos = new FileOutputStream(file.getAbsolutePath());
            bos = new BufferedOutputStream(fos);
            oos = new ObjectOutputStream(bos);
        } catch (IOException e) {
            error = true;
            log.error(sm.getString(""standardManager.unloading.ioe"", e), e);
            throw e;
        } finally {
            if (error) {
                if (oos != null) {
                    try {
                        oos.close();
                    } catch (IOException ioe) {
                        // Ignore
                    }
                }
                if (bos != null) {
                    try {
                        bos.close();
                    } catch (IOException ioe) {
                        // Ignore
                    }
                }
                if (fos != null) {
                    try {
                        fos.close();
                    } catch (IOException ioe) {
                        // Ignore
                    }
                }
            }
        }

        // Write the number of active sessions, followed by the details
        ArrayList<StandardSession> list = new ArrayList<>();
        synchronized (sessions) {
            if (log.isDebugEnabled())
                log.debug(""Unloading "" + sessions.size() + "" sessions"");
            try {
                // oos can't be null here
                oos.writeObject(new Integer(sessions.size()));
                Iterator<Session> elements = sessions.values().iterator();
                while (elements.hasNext()) {
                    StandardSession session =
                        (StandardSession) elements.next();
                    list.add(session);
                    session.passivate();
                    session.writeObjectData(oos);
                }
            } catch (IOException e) {
                log.error(sm.getString(""standardManager.unloading.ioe"", e), e);
                try {
                    oos.close();
                } catch (IOException f) {
                    // Ignore
                }
                throw e;
            }
        }

        // Flush and close the output stream
        try {
            oos.flush();
        } finally {
            try {
                oos.close();
            } catch (IOException f) {
                // Ignore
            }
        }

        // Expire all the sessions we just wrote
        if (log.isDebugEnabled())
            log.debug(""Expiring "" + list.size() + "" persisted sessions"");
        Iterator<StandardSession> expires = list.iterator();
        while (expires.hasNext()) {
            StandardSession session = expires.next();
            try {
                session.expire(false);
            } catch (Throwable t) {
                ExceptionUtils.handleThrowable(t);
            } finally {
                session.recycle();
            }
        }

        if (log.isDebugEnabled())
            log.debug(""Unloading complete"");

    }"
tomcat-C-373,18084,org/apache/catalina/startup,org/apache/catalina/startup/CatalinaProperties.java,2836,True,660,4,1156,1,9,500,85,46,0.7086330935251799,81,36,0.4444444444444444,0.0496556473829201,15,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,69,2,EXPERIMENTAL,0.0061016949152542,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,20,2,2,0.0424093423478795,0.0012292562999385,0.0012292562999385,-1.0,0.0,0.0,0.0625,0.02490234375,-1.0,0.0,0.0007062146892655367,0.02490234375,-0.8780487804878049,-1.0,21,11778,2836,18084,59,0.0,19,20,39,98,0.0300147950661578,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3269,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,9573,18084,55,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/startup/CatalinaProperties.java,loadProperties,6359,close,"private static void loadProperties() {

        InputStream is = null;
        Throwable error = null;

        try {
            String configUrl = getConfigUrl();
            if (configUrl != null) {
                is = (new URL(configUrl)).openStream();
            }
        } catch (Throwable t) {
            handleThrowable(t);
        }

        if (is == null) {
            try {
                File home = new File(Bootstrap.getCatalinaBase());
                File conf = new File(home, ""conf"");
                File propsFile = new File(conf, ""catalina.properties"");
                is = new FileInputStream(propsFile);
            } catch (Throwable t) {
                handleThrowable(t);
            }
        }

        if (is == null) {
            try {
                is = CatalinaProperties.class.getResourceAsStream
                    (""/org/apache/catalina/startup/catalina.properties"");
            } catch (Throwable t) {
                handleThrowable(t);
            }
        }

        if (is != null) {
            try {
                properties = new Properties();
                properties.load(is);
                is.close();
            } catch (Throwable t) {
                handleThrowable(t);
                error = t;
            }
        }

        if ((is == null) || (error != null)) {
            // Do something
            log.warn(""Failed to load catalina.properties"", error);
            // That's fine - we have reasonable defaults.
            properties=new Properties();
        }

        // Register the properties as system properties
        Enumeration<?> enumeration = properties.propertyNames();
        while (enumeration.hasMoreElements()) {
            String name = (String) enumeration.nextElement();
            String value = properties.getProperty(name);
            if (value != null) {
                System.setProperty(name, value);
            }
        }
    }"
tomcat-C-375,18084,org/apache/catalina/startup,org/apache/catalina/startup/ClassLoaderFactory.java,2836,True,130,3,1156,5,20,500,43,46,0.6581632653061225,195,71,0.3641025641025641,0.2961538461538461,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,69,2,STYLE,0.0061016949152542,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,13,2,2,0.0424093423478795,0.0012292562999385,0.0012292562999385,-1.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-0.8780487804878049,-1.0,22,11778,2836,18084,59,0.0,19,20,39,98,0.0300147950661578,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3271,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,9575,18084,55,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/startup/ClassLoaderFactory.java,createClassLoader,6359,close,"public static ClassLoader createClassLoader(File unpacked[],
                                                File packed[],
                                                final ClassLoader parent)
        throws Exception {

        if (log.isDebugEnabled())
            log.debug(""Creating new class loader"");

        // Construct the ""class path"" for this class loader
        Set<URL> set = new LinkedHashSet<>();

        // Add unpacked directories
        if (unpacked != null) {
            for (int i = 0; i < unpacked.length; i++)  {
                File file = unpacked[i];
                if (!file.exists() || !file.canRead())
                    continue;
                file = new File(file.getCanonicalPath() + File.separator);
                URL url = file.toURI().toURL();
                if (log.isDebugEnabled())
                    log.debug(""  Including directory "" + url);
                set.add(url);
            }
        }

        // Add packed directory JAR files
        if (packed != null) {
            for (int i = 0; i < packed.length; i++) {
                File directory = packed[i];
                if (!directory.isDirectory() || !directory.exists() ||
                    !directory.canRead())
                    continue;
                String filenames[] = directory.list();
                for (int j = 0; j < filenames.length; j++) {
                    String filename = filenames[j].toLowerCase(Locale.ENGLISH);
                    if (!filename.endsWith("".jar""))
                        continue;
                    File file = new File(directory, filenames[j]);
                    if (log.isDebugEnabled())
                        log.debug(""  Including jar file "" + file.getAbsolutePath());
                    URL url = file.toURI().toURL();
                    set.add(url);
                }
            }
        }

        // Construct the class loader itself
        final URL[] array = set.toArray(new URL[set.size()]);
        return AccessController.doPrivileged(
                new PrivilegedAction<URLClassLoader>() {
                    @Override
                    public URLClassLoader run() {
                        if (parent == null)
                            return new URLClassLoader(array);
                        else
                            return new URLClassLoader(array, parent);
                    }
                });
    }"
tomcat-C-377,14929,org/apache/catalina/startup,org/apache/catalina/startup/ExpandWar.java,1513,True,26,8,1156,1,16,500,8,46,0.8692493946731235,257,114,0.4435797665369649,0.4615384615384615,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,69,2,BAD_PRACTICE,0.0142372881355932,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,16,2,1,0.0424093423478795,0.0012292562999385,0.0006146281499692685,-1.0,0.1428571428571428,0.0038265306122448,0.128099173553719,0.106556527989236,-0.7142857142857143,0.0,0.0218926553672316,0.106556527989236,-0.8780487804878049,-1.0,21,11778,2836,18084,59,0.0,19,20,39,98,0.0300147950661578,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2832,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,9136,18084,55,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/startup/ExpandWar.java,deleteDir,6359,open,"public static boolean deleteDir(File dir) {
        return deleteDir(dir, true);
    }"
tomcat-C-378,14929,org/apache/catalina/startup,org/apache/catalina/startup/ExpandWar.java,1513,True,73,8,1156,1,20,500,16,46,0.3317191283292978,257,114,0.4435797665369649,0.5616438356164384,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,69,2,BAD_PRACTICE,0.0142372881355932,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,16,2,1,0.0424093423478795,0.0012292562999385,0.0006146281499692685,-1.0,0.1428571428571428,0.0038265306122448,0.128099173553719,0.106556527989236,-0.7142857142857143,0.0,0.0218926553672316,0.106556527989236,-0.8780487804878049,-1.0,21,11778,2836,18084,59,0.0,19,20,39,98,0.0300147950661578,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2832,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,9136,18084,55,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/startup/ExpandWar.java,expand,6359,open,"public static String expand(Host host, URL war, String pathname)
        throws IOException {

        // Make sure that there is no such directory already existing
        File docBase = new File(host.getAppBaseFile(), pathname);
        if (docBase.exists()) {
            // War file is already installed
            return (docBase.getAbsolutePath());
        }

        // Create the new document base directory
        if(!docBase.mkdir() && !docBase.isDirectory())
            throw new IOException(sm.getString(""expandWar.createFailed"", docBase));

        // Expand the WAR into the new document base directory
        String canonicalDocBasePrefix = docBase.getCanonicalPath();
        if (!canonicalDocBasePrefix.endsWith(File.separator)) {
            canonicalDocBasePrefix += File.separator;
        }
        JarURLConnection juc = (JarURLConnection) war.openConnection();
        juc.setUseCaches(false);
        JarFile jarFile = null;
        InputStream input = null;
        boolean success = false;
        try {
            jarFile = juc.getJarFile();
            Enumeration<JarEntry> jarEntries = jarFile.entries();
            while (jarEntries.hasMoreElements()) {
                JarEntry jarEntry = jarEntries.nextElement();
                String name = jarEntry.getName();
                File expandedFile = new File(docBase, name);
                if (!expandedFile.getCanonicalPath().startsWith(
                        canonicalDocBasePrefix)) {
                    // Trying to expand outside the docBase
                    // Throw an exception to stop the deployment
                    throw new IllegalArgumentException(
                            sm.getString(""expandWar.illegalPath"",war, name,
                                    expandedFile.getCanonicalPath(),
                                    canonicalDocBasePrefix));
                }
                int last = name.lastIndexOf('/');
                if (last >= 0) {
                    File parent = new File(docBase,
                                           name.substring(0, last));
                    if (!parent.mkdirs() && !parent.isDirectory()) {
                        throw new IOException(
                                sm.getString(""expandWar.createFailed"", parent));
                    }
                }
                if (name.endsWith(""/"")) {
                    continue;
                }
                input = jarFile.getInputStream(jarEntry);

                if(null == input)
                    throw new ZipException(sm.getString(""expandWar.missingJarEntry"", jarEntry.getName()));

                // Bugzilla 33636
                expand(input, expandedFile);
                long lastModified = jarEntry.getTime();
                if ((lastModified != -1) && (lastModified != 0)) {
                    expandedFile.setLastModified(lastModified);
                }

                input.close();
                input = null;
            }
            success = true;
        } catch (IOException e) {
            throw e;
        } finally {
            if (!success) {
                // If something went wrong, delete expanded dir to keep things
                // clean
                deleteDir(docBase);
            }
            if (input != null) {
                try {
                    input.close();
                } catch (IOException ioe) {
                    // Ignore
                }
                input = null;
            }
            if (jarFile != null) {
                try {
                    jarFile.close();
                } catch (IOException ioe) {
                    // Ignore
                }
                jarFile = null;
            }
        }

        // Return the absolute path to our new document base directory
        return (docBase.getAbsolutePath());

    }"
tomcat-C-379,10666,org/apache/catalina/startup,org/apache/catalina/startup/FailedContext.java,778,True,30,217,1156,1,16,500,6,46,0.2132049518569463,555,33,0.0594594594594594,0.6666666666666666,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,69,19,STYLE,0.0257627118644067,DLS_DEAD_LOCAL_STORE,20,3,1,0.0424093423478795,0.0116779348494161,0.0006146281499692685,-1.0,0.131578947368421,0.0035708102493074,0.1053719008264462,0.0543030765297002,-0.6842105263157895,0.0,0.0360169491525423,0.0543030765297002,-0.8780487804878049,-0.8947368421052632,20,4027,697,10333,59,0.0208108108108108,19,20,39,98,0.0300147950661578,0,0,0,0,0,0,8,0.0,8,0,0,0,0,8,0,0,0.0,90,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,6394,18084,55,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/startup/FailedContext.java,getMBeanKeyProperties,6359,open,"@Override
    public String getMBeanKeyProperties() {
        Container c = this;
        StringBuilder keyProperties = new StringBuilder();
        int containerCount = 0;

        // Work up container hierarchy, add a component to the name for
        // each container
        while (!(c instanceof Engine)) {
            if (c instanceof Context) {
                keyProperties.append("",context="");
                ContextName cn = new ContextName(c.getName());
                keyProperties.append(cn.getDisplayName());
            } else if (c instanceof Host) {
                keyProperties.append("",host="");
                keyProperties.append(c.getName());
            } else if (c == null) {
                // May happen in unit testing and/or some embedding scenarios
                keyProperties.append("",container"");
                keyProperties.append(containerCount++);
                keyProperties.append(""=null"");
                break;
            } else {
                // Should never happen...
                keyProperties.append("",container"");
                keyProperties.append(containerCount++);
                keyProperties.append('=');
                keyProperties.append(c.getName());
            }
            c = c.getParent();
        }
        return keyProperties.toString();
    }"
tomcat-C-400,16366,org/apache/catalina/startup,org/apache/catalina/startup/RealmRuleSet.java,1945,True,17,3,1156,1,12,500,5,46,0.8508771929824561,39,49,1.2564102564102564,0.4117647058823529,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,69,2,PERFORMANCE,0.0054237288135593,SBSC_USE_STRINGBUFFER_CONCATENATION,18,2,1,0.0424093423478795,0.0012292562999385,0.0006146281499692685,-1.0,0.1111111111111111,0.0075973409306742,0.0848484848484848,0.0755918430465237,-0.7777777777777778,0.0,0.0098870056497175,0.0755918430465237,-0.8780487804878049,-1.0,0,2760,413,9066,59,0.0,19,20,39,98,0.0300147950661578,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2762,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,9066,18084,55,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/startup/RealmRuleSet.java,addRuleInstances,6359,close,"@Override
    public void addRuleInstances(Digester digester) {

        String pattern = prefix;

        for (int i = 0; i < MAX_NESTED_REALM_LEVELS; i++) {

            if (i > 0) {
                pattern += ""/"";
            }
            pattern += ""Realm"";

            digester.addObjectCreate(pattern,
                                     null, // MUST be specified in the element,
                                     ""className"");
            digester.addSetProperties(pattern);
            if (i == 0) {
                digester.addSetNext(pattern,
                                    ""setRealm"",
                                    ""org.apache.catalina.Realm"");
            } else {
                digester.addSetNext(pattern,
                                    ""addRealm"",
                                    ""org.apache.catalina.Realm"");
            }
        }
    }"
tomcat-C-403,18084,org/apache/catalina/startup,org/apache/catalina/startup/UserConfig.java,2836,True,20,20,1156,2,0,500,7,46,0.8468468468468469,186,147,0.7903225806451613,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,69,3,STYLE,0.0481355932203389,REC_CATCH_EXCEPTION,20,3,1,0.0424093423478795,0.0018438844499078,0.0006146281499692685,-1.0,0.1739130434782608,0.0044896030245746,0.1053719008264462,0.0543030765297002,-0.6086956521739131,0.0,0.0360169491525423,0.0543030765297002,-0.8780487804878049,-1.0,16,11778,2836,18084,59,0.0,19,20,39,98,0.0300147950661578,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3271,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,9575,18084,55,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/startup/UserConfig.java,deploy,6359,open,"private void deploy() {

        if (host.getLogger().isDebugEnabled())
            host.getLogger().debug(sm.getString(""userConfig.deploying""));

        // Load the user database object for this host
        UserDatabase database = null;
        try {
            Class<?> clazz = Class.forName(userClass);
            database = (UserDatabase) clazz.newInstance();
            database.setUserConfig(this);
        } catch (Exception e) {
            host.getLogger().error(sm.getString(""userConfig.database""), e);
            return;
        }

        ExecutorService executor = host.getStartStopExecutor();
        List<Future<?>> results = new ArrayList<>();

        // Deploy the web application (if any) for each defined user
        Enumeration<String> users = database.getUsers();
        while (users.hasMoreElements()) {
            String user = users.nextElement();
            if (!isDeployAllowed(user)) continue;
            String home = database.getHome(user);
            results.add(executor.submit(new DeployUserDirectory(this, user, home)));
        }

        for (Future<?> result : results) {
            try {
                result.get();
            } catch (Exception e) {
                host.getLogger().error(sm.getString(""userConfig.deploy.threaded.error""), e);
            }
        }
    }"
tomcat-C-404,7490,org/apache/catalina/startup,org/apache/catalina/startup/WebAnnotationSet.java,176,True,51,11,1156,1,0,500,8,46,0.9105504587155964,263,77,0.2927756653992395,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,69,1,STYLE,0.0088135593220338,UCF_USELESS_CONTROL_FLOW,20,3,1,0.0424093423478795,0.0006146281499692685,0.0006146281499692685,-1.0,0.1764705882352941,0.0045415224913494,0.1053719008264462,0.0543030765297002,-0.5882352941176471,0.0,0.0360169491525423,0.0543030765297002,-0.8780487804878049,-1.0,7,3716,644,10022,59,0.0,19,20,39,98,0.0300147950661578,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,717,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,7021,18084,55,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/startup/WebAnnotationSet.java,addResource,6359,open,"protected static void addResource(Context context, Resource annotation) {
        addResource(context, annotation, null, null);
    }"
tomcat-C-405,7309,org/apache/catalina/startup,org/apache/catalina/startup/WebappServiceLoader.java,159,True,18,4,1156,1,12,500,4,46,0.8197674418604651,100,56,0.56,0.2222222222222222,8,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,69,1,BAD_PRACTICE,0.0013559322033898,OS_OPEN_STREAM,16,2,1,0.0424093423478795,0.0006146281499692685,0.0006146281499692685,0.0,0.5,0.0078125,0.128099173553719,0.106556527989236,0.0,0.0,0.0218926553672316,0.106556527989236,-0.8780487804878049,0.0,6,993,155,7299,59,0.0,19,20,39,98,0.0300147950661578,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,619,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,6923,18084,55,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/startup/WebappServiceLoader.java,parseConfigFile,6359,close,"void parseConfigFile(LinkedHashSet<String> servicesFound, URL url)
            throws IOException {
        try (InputStream is = url.openStream()) {
            InputStreamReader in =
                    new InputStreamReader(is, StandardCharsets.UTF_8);
            BufferedReader reader = new BufferedReader(in);
            String line;
            while ((line = reader.readLine()) != null) {
                int i = line.indexOf('#');
                if (i >= 0) {
                    line = line.substring(0, i);
                }
                line = line.trim();
                if (line.length() == 0) {
                    continue;
                }
                servicesFound.add(line);
            }
        }
    }"
tomcat-C-408,8598,org/apache/catalina/storeconfig,org/apache/catalina/storeconfig/StandardEngineSF.java,331,True,31,1,1112,1,12,195,10,35,0.6494845360824743,49,38,0.7755102040816326,0.2258064516129032,13,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,8,1,STYLE,0.0515254237288135,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,20,3,1,0.0049170251997541,0.0006146281499692685,0.0006146281499692685,0.0,0.1282051282051282,0.0034927679158448,0.1053719008264462,0.0543030765297002,-0.6923076923076923,0.0,0.0360169491525423,0.0543030765297002,0.0,0.0,5,2292,331,8598,31,0.0,0,10,21,41,0.0223777798927698,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2167,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,8471,18084,535,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/storeconfig/StandardEngineSF.java,storeChildren,6839,open,"@Override
    public void storeChildren(PrintWriter aWriter, int indent, Object aEngine,
            StoreDescription parentDesc) throws Exception {
        if (aEngine instanceof StandardEngine) {
            StandardEngine engine = (StandardEngine) aEngine;
            // Store nested <Listener> elements
            LifecycleListener listeners[] = ((Lifecycle) engine)
                    .findLifecycleListeners();
            storeElementArray(aWriter, indent, listeners);

            // Store nested <Realm> element
            Realm realm = engine.getRealm();
            if (realm != null) {
                Realm parentRealm = null;
                // TODO is this case possible? (see it a old Server 5.0 impl)
                if (engine.getParent() != null) {
                    parentRealm = engine.getParent().getRealm();
                }
                if (realm != parentRealm) {
                    storeElement(aWriter, indent, realm);

                }
            }

            // Store nested <Valve> elements
            Valve valves[] = engine.getPipeline().getValves();
            if(valves != null && valves.length > 0 ) {
                List<Valve> engineValves = new ArrayList<>() ;
                for(int i = 0 ; i < valves.length ; i++ ) {
                    if(!( valves[i] instanceof ClusterValve))
                        engineValves.add(valves[i]);
                }
                storeElementArray(aWriter, indent, engineValves.toArray());
            }

            // store all <Cluster> elements
            Cluster cluster = engine.getCluster();
            if (cluster != null) {
                storeElement(aWriter, indent, cluster);
            }
            // store all <Host> elements
            Container children[] = engine.findChildren();
            storeElementArray(aWriter, indent, children);

       }
    }"
tomcat-C-471,17873,org/apache/catalina/tribes/membership,org/apache/catalina/tribes/membership/McastService.java,2688,True,4,54,979,1,8,142,1,16,0.454855195911414,401,113,0.2817955112219451,0.75,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,33,15,PERFORMANCE,0.0047457627118644,DM_BOXED_PRIMITIVE_FOR_PARSING,16,1,2,0.0202827289489858,0.009219422249539,0.0012292562999385,-1.0,0.125,0.0084134615384615,0.0848484848484848,0.0755918430465237,-0.75,0.0,0.0098870056497175,0.0755918430465237,-0.9411764705882352,-1.0,29,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1012,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,7316,18084,848,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/membership/McastService.java,getFrequency,7152,close,"public long getFrequency() {
        String p = properties.getProperty(""mcastFrequency"");
        return new Long(p).longValue();
    }"
tomcat-C-473,17873,org/apache/catalina/tribes/membership,org/apache/catalina/tribes/membership/McastService.java,2688,True,4,54,979,1,8,142,1,16,0.4190800681431005,401,113,0.2817955112219451,0.75,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,33,15,PERFORMANCE,0.0047457627118644,DM_BOXED_PRIMITIVE_FOR_PARSING,16,1,2,0.0202827289489858,0.009219422249539,0.0012292562999385,-1.0,0.125,0.0084134615384615,0.0848484848484848,0.0755918430465237,-0.75,0.0,0.0098870056497175,0.0755918430465237,-0.9411764705882352,-1.0,29,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1012,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,7316,18084,848,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/membership/McastService.java,getPort,7152,close,"public int getPort() {
        String p = properties.getProperty(""mcastPort"");
        return new Integer(p).intValue();
    }"
tomcat-C-475,17873,org/apache/catalina/tribes/membership,org/apache/catalina/tribes/membership/McastService.java,2688,True,7,54,979,1,12,142,2,16,0.3867120954003407,401,113,0.2817955112219451,0.5714285714285714,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,33,15,PERFORMANCE,0.0047457627118644,DM_BOXED_PRIMITIVE_FOR_PARSING,16,1,2,0.0202827289489858,0.009219422249539,0.0012292562999385,-1.0,0.125,0.0084134615384615,0.0848484848484848,0.0755918430465237,-0.75,0.0,0.0098870056497175,0.0755918430465237,-0.9411764705882352,-1.0,29,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1012,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,7316,18084,848,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/membership/McastService.java,getRecoverySleepTime,7152,close,"public long getRecoverySleepTime(){
        String p = properties.getProperty(""recoverySleepTime"");
        if(p != null){
            return new Long(p).longValue();
        }
        return -1;
    }"
tomcat-C-478,17873,org/apache/catalina/tribes/membership,org/apache/catalina/tribes/membership/McastService.java,2688,True,4,54,979,1,8,142,1,16,0.4190800681431005,401,113,0.2817955112219451,0.75,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,33,15,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,2,0.0202827289489858,0.009219422249539,0.0012292562999385,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-0.9411764705882352,-1.0,29,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1012,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,7316,18084,848,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/membership/McastService.java,getDropTime,7152,close,"public long getDropTime() {
        String p = properties.getProperty(""memberDropTime"");
        return new Long(p).longValue();
    }"
tomcat-C-480,17873,org/apache/catalina/tribes/membership,org/apache/catalina/tribes/membership/McastService.java,2688,True,7,54,979,1,12,142,2,16,0.3867120954003407,401,113,0.2817955112219451,0.5714285714285714,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,33,15,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,2,0.0202827289489858,0.009219422249539,0.0012292562999385,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-0.9411764705882352,-1.0,29,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1012,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,7316,18084,848,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/membership/McastService.java,getRecoveryCounter,7152,close,"public int getRecoveryCounter(){
        String p = properties.getProperty(""recoveryCounter"");
        if(p != null){
            return new Integer(p).intValue();
        }
        return -1;
    }"
tomcat-C-481,17873,org/apache/catalina/tribes/membership,org/apache/catalina/tribes/membership/McastService.java,2688,True,3,54,979,1,8,142,1,16,0.8909710391822828,401,113,0.2817955112219451,0.6666666666666666,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,33,15,MALICIOUS_CODE,0.0616949152542372,EI_EXPOSE_REP,18,2,1,0.0202827289489858,0.009219422249539,0.0006146281499692685,-1.0,0.1136363636363636,0.0077479338842975,0.1337579617834395,0.0441823027852679,-0.6931818181818182,0.0,0.0296610169491525,0.0441823027852679,-0.9411764705882352,-1.0,29,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1012,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,7316,18084,848,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/membership/McastService.java,getPayload,7152,open,"public byte[] getPayload() {
        return payload;
    }"
tomcat-C-482,17873,org/apache/catalina/tribes/membership,org/apache/catalina/tribes/membership/McastService.java,2688,True,3,54,979,1,8,142,1,16,0.8841567291311755,401,113,0.2817955112219451,0.6666666666666666,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,33,15,MALICIOUS_CODE,0.0616949152542372,EI_EXPOSE_REP,18,2,1,0.0202827289489858,0.009219422249539,0.0006146281499692685,-1.0,0.1136363636363636,0.0077479338842975,0.1337579617834395,0.0441823027852679,-0.6931818181818182,0.0,0.0296610169491525,0.0441823027852679,-0.9411764705882352,-1.0,29,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1012,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,7316,18084,848,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/membership/McastService.java,getDomain,7152,open,"public byte[] getDomain() {
        return domain;
    }"
tomcat-C-483,17873,org/apache/catalina/tribes/membership,org/apache/catalina/tribes/membership/McastService.java,2688,True,13,54,979,1,8,142,3,16,0.9318568994889268,401,113,0.2817955112219451,0.1538461538461538,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,33,15,MALICIOUS_CODE,0.0481355932203389,EI_EXPOSE_REP2,18,2,1,0.0202827289489858,0.009219422249539,0.0006146281499692685,-1.0,0.1168831168831168,0.0079401118362157,0.1337579617834395,0.0441823027852679,-0.7012987012987013,0.0,0.0296610169491525,0.0441823027852679,-0.9411764705882352,-1.0,29,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1012,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,7316,18084,848,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/membership/McastService.java,setPayload,7152,open,"@Override
    public void setPayload(byte[] payload) {
        this.payload = payload;
        if ( localMember != null ) {
            localMember.setPayload(payload);
            localMember.getData(true,true);
            try {
                if (impl != null) impl.send(false);
            }catch ( Exception x ) {
                log.error(sm.getString(""McastService.payload""), x);
            }
        }
    }"
tomcat-C-484,17873,org/apache/catalina/tribes/membership,org/apache/catalina/tribes/membership/McastService.java,2688,True,13,54,979,1,8,142,3,16,0.9080068143100511,401,113,0.2817955112219451,0.1538461538461538,7,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,33,15,MALICIOUS_CODE,0.0481355932203389,EI_EXPOSE_REP2,18,2,1,0.0202827289489858,0.009219422249539,0.0006146281499692685,-1.0,0.1168831168831168,0.0079401118362157,0.1337579617834395,0.0441823027852679,-0.7012987012987013,0.0,0.0296610169491525,0.0441823027852679,-0.9411764705882352,-1.0,29,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1012,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,7316,18084,848,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/membership/McastService.java,setDomain,7152,open,"@Override
    public void setDomain(byte[] domain) {
        this.domain = domain;
        if ( localMember != null ) {
            localMember.setDomain(domain);
            localMember.getData(true,true);
            try {
                if (impl != null) impl.send(false);
            }catch ( Exception x ) {
                log.error(sm.getString(""McastService.domain""), x);
            }
        }
    }"
tomcat-C-485,13256,org/apache/catalina/tribes/membership,org/apache/catalina/tribes/membership/McastServiceImpl.java,1215,True,36,19,979,8,0,142,7,16,0.4910179640718562,473,143,0.3023255813953488,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,33,4,BAD_PRACTICE,0.0291525423728813,DE_MIGHT_IGNORE,14,1,1,0.0202827289489858,0.002458512599877,0.0006146281499692685,-1.0,0.0697674418604651,0.0020281233098972,0.128099173553719,0.106556527989236,-0.8604651162790697,0.0,0.0218926553672316,0.106556527989236,-0.9411764705882352,-0.6,28,10147,2020,16453,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,848,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,7152,18084,848,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/membership/McastServiceImpl.java,stop,7152,open,"public synchronized boolean stop(int level) throws IOException {
        boolean valid = false;

        if ( (level & Channel.MBR_RX_SEQ)==Channel.MBR_RX_SEQ ) {
            valid = true;
            doRunReceiver = false;
            if ( receiver !=null ) receiver.interrupt();
            receiver = null;
        }
        if ( (level & Channel.MBR_TX_SEQ)==Channel.MBR_TX_SEQ ) {
            valid = true;
            doRunSender = false;
            if ( sender != null )sender.interrupt();
            sender = null;
        }

        if (!valid) {
            throw new IllegalArgumentException(""Invalid stop level. Only acceptable levels are Channel.MBR_RX_SEQ and Channel.MBR_TX_SEQ"");
        }
        startLevel = (startLevel & (~level));
        //we're shutting down, send a shutdown message and close the socket
        if ( startLevel == 0 ) {
            //send a stop message
            member.setCommand(Member.SHUTDOWN_PAYLOAD);
            member.getData(true, true);
            send(false);
            //leave mcast group
            try {socket.leaveGroup(address);}catch ( Exception ignore){}
            try {socket.close();}catch ( Exception ignore){}
            member.setServiceStartTime(-1);
        }
        return (startLevel == 0);
    }"
tomcat-C-486,13256,org/apache/catalina/tribes/membership,org/apache/catalina/tribes/membership/McastServiceImpl.java,1215,True,0,19,979,8,0,142,1,16,0.8158682634730539,473,143,0.3023255813953488,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,33,4,BAD_PRACTICE,0.0291525423728813,DE_MIGHT_IGNORE,19,3,3,0.0202827289489858,0.002458512599877,0.0018438844499078,-0.5,0.0697674418604651,0.0020281233098972,0.128099173553719,0.106556527989236,-0.8604651162790697,0.0,0.0218926553672316,0.106556527989236,-0.9411764705882352,-0.6,43,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,848,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,7152,18084,848,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/membership/McastServiceImpl.java,run,7152,open,"@Override
                public void run() {
                    String name = Thread.currentThread().getName();
                    try {
                        Thread.currentThread().setName(""Membership-MemberDisappeared."");
                        service.memberDisappeared(m);
                    }finally {
                        Thread.currentThread().setName(name);
                    }
                }"
tomcat-C-487,13256,org/apache/catalina/tribes/membership,org/apache/catalina/tribes/membership/McastServiceImpl.java,1215,True,0,19,979,8,0,142,1,16,0.9535928143712576,473,143,0.3023255813953488,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,33,4,STYLE,0.0013559322033898,NS_DANGEROUS_NON_SHORT_CIRCUIT,15,1,3,0.0202827289489858,0.002458512599877,0.0018438844499078,-0.5,0.5,0.0078125,0.1053719008264462,0.0543030765297002,0.0,0.0,0.0360169491525423,0.0543030765297002,-0.9411764705882352,-0.6,38,10641,2330,16947,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,848,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,7152,18084,848,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/membership/McastServiceImpl.java,run,7152,open,"@Override
                public void run() {
                    String name = Thread.currentThread().getName();
                    try {
                        Thread.currentThread().setName(""Membership-MemberDisappeared."");
                        service.memberDisappeared(m);
                    }finally {
                        Thread.currentThread().setName(name);
                    }
                }"
tomcat-C-488,13256,org/apache/catalina/tribes/membership,org/apache/catalina/tribes/membership/McastServiceImpl.java,1215,True,0,19,979,8,0,142,1,16,0.8652694610778443,473,143,0.3023255813953488,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,33,4,BAD_PRACTICE,0.0291525423728813,DE_MIGHT_IGNORE,19,3,3,0.0202827289489858,0.002458512599877,0.0018438844499078,-0.5,0.0697674418604651,0.0020281233098972,0.128099173553719,0.106556527989236,-0.8604651162790697,0.0,0.0218926553672316,0.106556527989236,-0.9411764705882352,-0.6,43,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,848,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,7152,18084,848,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/membership/McastServiceImpl.java,run,7152,open,"@Override
                public void run() {
                    String name = Thread.currentThread().getName();
                    try {
                        Thread.currentThread().setName(""Membership-MemberDisappeared."");
                        service.memberDisappeared(m);
                    }finally {
                        Thread.currentThread().setName(name);
                    }
                }"
tomcat-C-503,17873,org/apache/catalina/tribes/tipis,org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java,2688,True,30,65,103,4,16,91,7,7,0.4668852459016393,1121,231,0.2060660124888492,0.2,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,36,33,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,1,0.0221266133988936,0.0202827289489858,0.0006146281499692685,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,88,11567,2688,17873,11,0.2005494505494505,2,8,3,21,0.0834706959706959,0,0,0,0,7,0,10,0.0,19,0,2,0,0,3,0,0,0.0,71,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6375,18084,71,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java,mapMemberAdded,6375,close,"public void mapMemberAdded(Member member) {
        if ( member.equals(getChannel().getLocalMember(false)) ) return;
        boolean memberAdded = false;
        //select a backup node if we don't have one
        synchronized (mapMembers) {
            if (!mapMembers.containsKey(member) ) {
                mapMembers.put(member, new Long(System.currentTimeMillis()));
                memberAdded = true;
            }
        }
        if ( memberAdded ) {
            synchronized (stateMutex) {
                Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
                while (i.hasNext()) {
                    Map.Entry<K,MapEntry<K,V>> e = i.next();
                    MapEntry<K,V> entry = innerMap.get(e.getKey());
                    if ( entry == null ) continue;
                    if (entry.isPrimary() && (entry.getBackupNodes() == null || entry.getBackupNodes().length == 0)) {
                        try {
                            Member[] backup = publishEntryInfo(entry.getKey(), entry.getValue());
                            entry.setBackupNodes(backup);
                            entry.setPrimary(channel.getLocalMember(false));
                        } catch (ChannelException x) {
                            log.error(""Unable to select backup node."", x);
                        } //catch
                    } //end if
                } //while
            } //synchronized
        }//end if
    }"
tomcat-C-504,17873,org/apache/catalina/tribes/tipis,org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java,2688,True,8,65,103,4,12,91,2,7,0.1947540983606557,1121,231,0.2060660124888492,0.75,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,36,33,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,1,0.0221266133988936,0.0202827289489858,0.0006146281499692685,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,88,11567,2688,17873,11,0.2005494505494505,2,8,3,21,0.0834706959706959,0,0,0,0,7,0,10,0.0,19,0,2,0,0,3,0,0,0.0,71,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6375,18084,71,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java,memberAlive,6375,close,"protected void memberAlive(Member member) {
        synchronized (mapMembers) {
            if (!mapMembers.containsKey(member)) {
                mapMemberAdded(member);
            } //end if
            mapMembers.put(member, new Long(System.currentTimeMillis()));
        }
    }"
tomcat-C-505,17873,org/apache/catalina/tribes/tipis,org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java,2688,True,3,65,103,4,8,91,1,7,0.9822950819672132,1121,231,0.2060660124888492,0.6666666666666666,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,36,33,MALICIOUS_CODE,0.0616949152542372,EI_EXPOSE_REP,18,2,1,0.0221266133988936,0.0202827289489858,0.0006146281499692685,-1.0,0.1136363636363636,0.0077479338842975,0.1337579617834395,0.0441823027852679,-0.6931818181818182,0.0,0.0296610169491525,0.0441823027852679,-1.0,-1.0,88,11567,2688,17873,11,0.2005494505494505,2,8,3,21,0.0834706959706959,0,0,0,0,7,0,10,0.0,19,0,2,0,0,3,0,0,0.0,71,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6375,18084,71,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java,getMapContextName,6375,open,"public byte[] getMapContextName() {
        return mapContextName;
    }"
tomcat-C-506,17873,org/apache/catalina/tribes/tipis,org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java,2688,True,3,65,103,4,8,91,1,7,0.9665573770491804,1121,231,0.2060660124888492,0.6666666666666666,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,36,33,MALICIOUS_CODE,0.0616949152542372,EI_EXPOSE_REP,18,2,1,0.0221266133988936,0.0202827289489858,0.0006146281499692685,-1.0,0.1136363636363636,0.0077479338842975,0.1337579617834395,0.0441823027852679,-0.6931818181818182,0.0,0.0296610169491525,0.0441823027852679,-1.0,-1.0,88,11567,2688,17873,11,0.2005494505494505,2,8,3,21,0.0834706959706959,0,0,0,0,7,0,10,0.0,19,0,2,0,0,3,0,0,0.0,71,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6375,18084,71,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java,getExternalLoaders,6375,open,"public ClassLoader[] getExternalLoaders() {
        return externalLoaders;
    }"
tomcat-C-507,17873,org/apache/catalina/tribes/tipis,org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java,2688,True,3,65,103,4,8,91,1,7,0.9927868852459016,1121,231,0.2060660124888492,0.6666666666666666,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,36,33,MALICIOUS_CODE,0.0481355932203389,EI_EXPOSE_REP2,18,2,1,0.0221266133988936,0.0202827289489858,0.0006146281499692685,-1.0,0.1168831168831168,0.0079401118362157,0.1337579617834395,0.0441823027852679,-0.7012987012987013,0.0,0.0296610169491525,0.0441823027852679,-1.0,-1.0,88,11567,2688,17873,11,0.2005494505494505,2,8,3,21,0.0834706959706959,0,0,0,0,7,0,10,0.0,19,0,2,0,0,3,0,0,0.0,71,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6375,18084,71,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java,setExternalLoaders,6375,open,"public void setExternalLoaders(ClassLoader[] externalLoaders) {
        this.externalLoaders = externalLoaders;
    }"
tomcat-C-535,17873,org/apache/catalina/tribes/transport/bio,org/apache/catalina/tribes/transport/bio/BioSender.java,2688,True,19,9,349,1,0,37,4,5,0.7204301075268817,164,86,0.524390243902439,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,13,9,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,2,0.0079901659496004,0.0055316533497234,0.0012292562999385,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,17,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3216,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,9520,18084,936,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/bio/BioSender.java,closeSocket,7240,close,"protected void closeSocket() {
        if(isConnected()) {
             if (socket != null) {
                try {
                    socket.close();
                } catch (IOException x) {
                    // Ignore
                } finally {
                    socket = null;
                    soOut = null;
                    soIn = null;
                }
            }
            setRequestCount(0);
            setConnected(false);
            if (log.isDebugEnabled())
                log.debug(sm.getString(""IDataSender.closeSocket"",getAddress().getHostAddress(), new Integer(getPort()),new Long(0)));
       }
    }"
tomcat-C-536,17873,org/apache/catalina/tribes/transport/bio,org/apache/catalina/tribes/transport/bio/BioSender.java,2688,True,19,9,349,1,0,37,4,5,0.7204301075268817,164,86,0.524390243902439,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,13,9,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,2,0.0079901659496004,0.0055316533497234,0.0012292562999385,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,17,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3216,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,9520,18084,936,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/bio/BioSender.java,closeSocket,7240,close,"protected void closeSocket() {
        if(isConnected()) {
             if (socket != null) {
                try {
                    socket.close();
                } catch (IOException x) {
                    // Ignore
                } finally {
                    socket = null;
                    soOut = null;
                    soIn = null;
                }
            }
            setRequestCount(0);
            setConnected(false);
            if (log.isDebugEnabled())
                log.debug(sm.getString(""IDataSender.closeSocket"",getAddress().getHostAddress(), new Integer(getPort()),new Long(0)));
       }
    }"
tomcat-C-537,17873,org/apache/catalina/tribes/transport/bio,org/apache/catalina/tribes/transport/bio/BioSender.java,2688,True,7,9,349,1,0,37,3,5,0.3405017921146953,164,86,0.524390243902439,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,13,9,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,2,0.0079901659496004,0.0055316533497234,0.0012292562999385,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,17,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3216,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,9520,18084,936,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/bio/BioSender.java,disconnect,7240,close,"@Override
    public  void disconnect() {
        boolean connect = isConnected();
        closeSocket();
        if (connect) {
            if (log.isDebugEnabled())
                log.debug(sm.getString(""IDataSender.disconnect"", getAddress().getHostAddress(), new Integer(getPort()), new Long(0)));
        }

    }"
tomcat-C-538,17873,org/apache/catalina/tribes/transport/bio,org/apache/catalina/tribes/transport/bio/BioSender.java,2688,True,7,9,349,1,0,37,3,5,0.3405017921146953,164,86,0.524390243902439,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,13,9,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,2,0.0079901659496004,0.0055316533497234,0.0012292562999385,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,17,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3216,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,9520,18084,936,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/bio/BioSender.java,disconnect,7240,close,"@Override
    public  void disconnect() {
        boolean connect = isConnected();
        closeSocket();
        if (connect) {
            if (log.isDebugEnabled())
                log.debug(sm.getString(""IDataSender.disconnect"", getAddress().getHostAddress(), new Integer(getPort()), new Long(0)));
        }

    }"
tomcat-C-539,17873,org/apache/catalina/tribes/transport/bio,org/apache/catalina/tribes/transport/bio/BioSender.java,2688,True,56,9,349,1,0,37,7,5,0.6164874551971327,164,86,0.524390243902439,1.0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,13,9,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,2,0.0079901659496004,0.0055316533497234,0.0012292562999385,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,17,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3216,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,9520,18084,936,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/bio/BioSender.java,openSocket,7240,close,"protected void openSocket() throws IOException {
       if(isConnected()) return ;
       try {
           socket = new Socket();
           InetSocketAddress sockaddr = new InetSocketAddress(getAddress(), getPort());
           socket.connect(sockaddr,(int)getTimeout());
           socket.setSendBufferSize(getTxBufSize());
           socket.setReceiveBufferSize(getRxBufSize());
           socket.setSoTimeout( (int) getTimeout());
           socket.setTcpNoDelay(getTcpNoDelay());
           socket.setKeepAlive(getSoKeepAlive());
           socket.setReuseAddress(getSoReuseAddress());
           socket.setOOBInline(getOoBInline());
           socket.setSoLinger(getSoLingerOn(),getSoLingerTime());
           socket.setTrafficClass(getSoTrafficClass());
           setConnected(true);
           soOut = socket.getOutputStream();
           soIn  = socket.getInputStream();
           setRequestCount(0);
           setConnectTime(System.currentTimeMillis());
           if (log.isDebugEnabled())
               log.debug(sm.getString(""IDataSender.openSocket"", getAddress().getHostAddress(), new Integer(getPort()), new Long(0)));
      } catch (IOException ex1) {
          SenderState.getSenderState(getDestination()).setSuspect();
          if (log.isDebugEnabled())
              log.debug(sm.getString(""IDataSender.openSocket.failure"",getAddress().getHostAddress(), new Integer(getPort()),new Long(0)), ex1);
          throw (ex1);
        }

     }"
tomcat-C-540,17873,org/apache/catalina/tribes/transport/bio,org/apache/catalina/tribes/transport/bio/BioSender.java,2688,True,56,9,349,1,0,37,7,5,0.6164874551971327,164,86,0.524390243902439,1.0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,13,9,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,2,0.0079901659496004,0.0055316533497234,0.0012292562999385,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,17,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3216,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,9520,18084,936,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/bio/BioSender.java,openSocket,7240,close,"protected void openSocket() throws IOException {
       if(isConnected()) return ;
       try {
           socket = new Socket();
           InetSocketAddress sockaddr = new InetSocketAddress(getAddress(), getPort());
           socket.connect(sockaddr,(int)getTimeout());
           socket.setSendBufferSize(getTxBufSize());
           socket.setReceiveBufferSize(getRxBufSize());
           socket.setSoTimeout( (int) getTimeout());
           socket.setTcpNoDelay(getTcpNoDelay());
           socket.setKeepAlive(getSoKeepAlive());
           socket.setReuseAddress(getSoReuseAddress());
           socket.setOOBInline(getOoBInline());
           socket.setSoLinger(getSoLingerOn(),getSoLingerTime());
           socket.setTrafficClass(getSoTrafficClass());
           setConnected(true);
           soOut = socket.getOutputStream();
           soIn  = socket.getInputStream();
           setRequestCount(0);
           setConnectTime(System.currentTimeMillis());
           if (log.isDebugEnabled())
               log.debug(sm.getString(""IDataSender.openSocket"", getAddress().getHostAddress(), new Integer(getPort()), new Long(0)));
      } catch (IOException ex1) {
          SenderState.getSenderState(getDestination()).setSuspect();
          if (log.isDebugEnabled())
              log.debug(sm.getString(""IDataSender.openSocket.failure"",getAddress().getHostAddress(), new Integer(getPort()),new Long(0)), ex1);
          throw (ex1);
        }

     }"
tomcat-C-541,17873,org/apache/catalina/tribes/transport/bio,org/apache/catalina/tribes/transport/bio/BioSender.java,2688,True,28,9,349,1,12,37,4,5,0.4014336917562724,164,86,0.524390243902439,0.3571428571428571,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,13,9,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,1,0.0079901659496004,0.0055316533497234,0.0006146281499692685,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,17,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3216,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,9520,18084,936,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/bio/BioSender.java,sendMessage,7240,close,"public  void sendMessage(byte[] data, boolean waitForAck) throws IOException {
        IOException exception = null;
        setAttempt(0);
        try {
             // first try with existing connection
             pushMessage(data,false,waitForAck);
        } catch (IOException x) {
            SenderState.getSenderState(getDestination()).setSuspect();
            exception = x;
            if (log.isTraceEnabled()) log.trace(sm.getString(""IDataSender.send.again"", getAddress().getHostAddress(),new Integer(getPort())),x);
            while ( getAttempt()<getMaxRetryAttempts() ) {
                try {
                    setAttempt(getAttempt()+1);
                    // second try with fresh connection
                    pushMessage(data, true,waitForAck);
                    exception = null;
                } catch (IOException xx) {
                    exception = xx;
                    closeSocket();
                }
            }
        } finally {
            setRequestCount(getRequestCount()+1);
            keepalive();
            if ( exception != null ) throw exception;
        }
    }"
tomcat-C-543,17873,org/apache/catalina/tribes/transport/bio,org/apache/catalina/tribes/transport/bio/BioSender.java,2688,True,43,9,349,1,12,37,11,5,0.956989247311828,164,86,0.524390243902439,0.6976744186046512,56,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,13,9,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,2,0.0079901659496004,0.0055316533497234,0.0012292562999385,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,17,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3216,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,9520,18084,936,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/bio/BioSender.java,waitForAck,7240,close,"protected void waitForAck() throws java.io.IOException {
        try {
            boolean ackReceived = false;
            boolean failAckReceived = false;
            ackbuf.clear();
            int bytesRead = 0;
            int i = soIn.read();
            while ((i != -1) && (bytesRead < Constants.ACK_COMMAND.length)) {
                bytesRead++;
                byte d = (byte)i;
                ackbuf.append(d);
                if (ackbuf.doesPackageExist() ) {
                    byte[] ackcmd = ackbuf.extractDataPackage(true).getBytes();
                    ackReceived = Arrays.equals(ackcmd,org.apache.catalina.tribes.transport.Constants.ACK_DATA);
                    failAckReceived = Arrays.equals(ackcmd,org.apache.catalina.tribes.transport.Constants.FAIL_ACK_DATA);
                    ackReceived = ackReceived || failAckReceived;
                    break;
                }
                i = soIn.read();
            }
            if (!ackReceived) {
                if (i == -1) throw new IOException(sm.getString(""IDataSender.ack.eof"",getAddress(), new Integer(socket.getLocalPort())));
                else throw new IOException(sm.getString(""IDataSender.ack.wrong"",getAddress(), new Integer(socket.getLocalPort())));
            } else if ( failAckReceived && getThrowOnFailedAck()) {
                throw new RemoteProcessException(""Received a failed ack:org.apache.catalina.tribes.transport.Constants.FAIL_ACK_DATA"");
            }
        } catch (IOException x) {
            String errmsg = sm.getString(""IDataSender.ack.missing"", getAddress(),new Integer(socket.getLocalPort()), new Long(getTimeout()));
            if ( SenderState.getSenderState(getDestination()).isReady() ) {
                SenderState.getSenderState(getDestination()).setSuspect();
                if ( log.isWarnEnabled() ) log.warn(errmsg, x);
            } else {
                if ( log.isDebugEnabled() )log.debug(errmsg, x);
            }
            throw x;
        } finally {
            ackbuf.clear();
        }
    }"
tomcat-C-544,13906,org/apache/catalina/tribes/transport/bio,org/apache/catalina/tribes/transport/bio/MultipointBioSender.java,1342,True,8,10,349,1,0,37,1,5,0.8431372549019608,105,28,0.2666666666666666,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,13,4,BAD_PRACTICE,0.0291525423728813,DE_MIGHT_IGNORE,16,2,1,0.0079901659496004,0.002458512599877,0.0006146281499692685,-1.0,0.0697674418604651,0.0020281233098972,0.128099173553719,0.106556527989236,-0.8604651162790697,0.0,0.0218926553672316,0.106556527989236,-1.0,-1.0,5,6512,1146,12818,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,936,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7240,18084,936,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/bio/MultipointBioSender.java,disconnect,7240,open,"@Override
    public synchronized void disconnect() {
        try {close(); }catch (Exception x){/* Ignore */}
        setConnected(false);
    }"
tomcat-C-545,13906,org/apache/catalina/tribes/transport/bio,org/apache/catalina/tribes/transport/bio/MultipointBioSender.java,1342,True,7,10,349,1,0,37,1,5,0.8823529411764706,105,28,0.2666666666666666,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,13,4,BAD_PRACTICE,0.0291525423728813,DE_MIGHT_IGNORE,16,2,2,0.0079901659496004,0.002458512599877,0.0012292562999385,-1.0,0.0697674418604651,0.0020281233098972,0.128099173553719,0.106556527989236,-0.8604651162790697,0.0,0.0218926553672316,0.106556527989236,-1.0,-1.0,5,6512,1146,12818,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,936,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7240,18084,936,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/bio/MultipointBioSender.java,finalize,7240,open,"@Override
    public void finalize() {
        try {disconnect(); }catch ( Exception e){/* Ignore */}
    }"
tomcat-C-546,13906,org/apache/catalina/tribes/transport/bio,org/apache/catalina/tribes/transport/bio/MultipointBioSender.java,1342,True,7,10,349,1,4,37,1,5,0.8823529411764706,105,28,0.2666666666666666,0.8095238095238095,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,13,4,MALICIOUS_CODE,0.0033898305084745,FI_PUBLIC_SHOULD_BE_PROTECTED,18,2,2,0.0079901659496004,0.002458512599877,0.0012292562999385,-1.0,0.2,0.0123076923076923,0.1337579617834395,0.0441823027852679,-0.6,0.0,0.0296610169491525,0.0441823027852679,-1.0,-1.0,15,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,936,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,7240,18084,936,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/bio/MultipointBioSender.java,finalize,7240,open,"@Override
    public void finalize() {
        try {disconnect(); }catch ( Exception e){/* Ignore */}
    }"
tomcat-C-547,13906,org/apache/catalina/tribes/transport/bio,org/apache/catalina/tribes/transport/bio/MultipointBioSender.java,1342,True,24,10,349,1,0,37,7,5,0.5163398692810458,105,28,0.2666666666666666,1.0,10,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,13,4,STYLE,0.0481355932203389,REC_CATCH_EXCEPTION,20,3,1,0.0079901659496004,0.002458512599877,0.0006146281499692685,-1.0,0.1739130434782608,0.0044896030245746,0.1053719008264462,0.0543030765297002,-0.6086956521739131,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,15,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,936,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,7240,18084,936,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/bio/MultipointBioSender.java,setupForSend,7240,open,"protected BioSender[] setupForSend(Member[] destination) throws ChannelException {
        ChannelException cx = null;
        BioSender[] result = new BioSender[destination.length];
        for ( int i=0; i<destination.length; i++ ) {
            try {
                BioSender sender = bioSenders.get(destination[i]);
                if (sender == null) {
                    sender = new BioSender();
                    AbstractSender.transferProperties(this,sender);
                    sender.setDestination(destination[i]);
                    bioSenders.put(destination[i], sender);
                }
                result[i] = sender;
                if (!result[i].isConnected() ) result[i].connect();
                result[i].keepalive();
            }catch (Exception x ) {
                if ( cx== null ) cx = new ChannelException(x);
                cx.addFaultyMember(destination[i],x);
            }
        }
        if ( cx!=null ) throw cx;
        else return result;
    }"
tomcat-C-548,10834,org/apache/catalina/tribes/transport/bio/util,org/apache/catalina/tribes/transport/bio/util/LinkObject.java,801,True,3,9,212,1,8,40,1,3,0.9724770642201837,43,50,1.162790697674419,0.6666666666666666,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,3,MALICIOUS_CODE,0.0616949152542372,EI_EXPOSE_REP,18,2,1,0.0018438844499078,0.0018438844499078,0.0006146281499692685,-1.0,0.1136363636363636,0.0077479338842975,0.1337579617834395,0.0441823027852679,-0.6931818181818182,0.0,0.0296610169491525,0.0441823027852679,-1.0,-1.0,6,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3217,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,9521,18084,3217,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/bio/util/LinkObject.java,getKey,9521,open,"public byte[] getKey() {
        return key;
    }"
tomcat-C-549,10834,org/apache/catalina/tribes/transport/bio/util,org/apache/catalina/tribes/transport/bio/util/LinkObject.java,801,True,3,9,212,1,8,40,1,3,0.8623853211009175,43,50,1.162790697674419,0.6666666666666666,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,3,MALICIOUS_CODE,0.0616949152542372,EI_EXPOSE_REP,18,2,1,0.0018438844499078,0.0018438844499078,0.0006146281499692685,-1.0,0.1136363636363636,0.0077479338842975,0.1337579617834395,0.0441823027852679,-0.6931818181818182,0.0,0.0296610169491525,0.0441823027852679,-1.0,-1.0,6,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,3217,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,9521,18084,3217,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/bio/util/LinkObject.java,getDestination,9521,open,"public Member[] getDestination() {
        return destination;
    }"
tomcat-C-551,14977,org/apache/catalina/tribes/transport/nio,org/apache/catalina/tribes/transport/nio/NioReceiver.java,1517,True,24,16,468,1,0,63,4,7,0.8087912087912088,304,110,0.3618421052631579,1.0,19,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,14,1,STYLE,0.0481355932203389,REC_CATCH_EXCEPTION,20,3,1,0.0086047940995697,0.0006146281499692685,0.0006146281499692685,0.0,0.1739130434782608,0.0044896030245746,0.1053719008264462,0.0543030765297002,-0.6086956521739131,0.0,0.0360169491525423,0.0543030765297002,-1.0,0.0,42,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1297,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,7601,18084,900,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/nio/NioReceiver.java,stopListening,7204,open,"protected void stopListening() {
        setListen(false);
        Selector selector = this.selector.get();
        if (selector != null) {
            try {
                // Unlock the thread if is is blocked waiting for input
                selector.wakeup();
                // Wait for the receiver thread to finish
                int count = 0;
                while (running && count < 50) {
                    Thread.sleep(100);
                    count ++;
                }
                if (running) {
                    log.warn(sm.getString(""NioReceiver.stop.threadRunning""));
                }
                closeSelector();
            } catch (Exception x) {
                log.error(sm.getString(""NioReceiver.stop.fail""), x);
            } finally {
                this.selector.set(null);
            }
        }
    }"
tomcat-C-554,17873,org/apache/catalina/tribes/transport/nio,org/apache/catalina/tribes/transport/nio/ParallelNioSender.java,2688,True,8,13,468,1,0,63,1,7,0.8788732394366198,284,41,0.1443661971830986,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,14,3,BAD_PRACTICE,0.0291525423728813,DE_MIGHT_IGNORE,16,2,1,0.0086047940995697,0.0018438844499078,0.0006146281499692685,-1.0,0.0697674418604651,0.0020281233098972,0.128099173553719,0.106556527989236,-0.8604651162790697,0.0,0.0218926553672316,0.106556527989236,-1.0,-1.0,5,6412,1133,12718,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,900,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7204,18084,900,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java,disconnect,7204,open,"@Override
    public synchronized void disconnect() {
        setConnected(false);
        try {close(); }catch (Exception x){/*Ignore*/}
    }"
tomcat-C-555,17873,org/apache/catalina/tribes/transport/nio,org/apache/catalina/tribes/transport/nio/ParallelNioSender.java,2688,True,15,13,468,1,8,63,2,7,0.8929577464788733,284,41,0.1443661971830986,0.6463768115942029,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,14,3,MALICIOUS_CODE,0.0033898305084745,FI_PUBLIC_SHOULD_BE_PROTECTED,18,2,1,0.0086047940995697,0.0018438844499078,0.0006146281499692685,-1.0,0.2,0.0123076923076923,0.1337579617834395,0.0441823027852679,-0.6,0.0,0.0296610169491525,0.0441823027852679,-1.0,-1.0,25,11567,2688,17873,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,900,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7204,18084,900,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java,finalize,7204,open,"@Override
    public void finalize() {
        try {disconnect(); }catch ( Exception e){/*Ignore*/}
        try {
            selector.close();
        }catch (Exception e) {
            if (log.isDebugEnabled()) {
                log.debug(""Failed to close selector"", e);
            }
        }
    }"
tomcat-C-564,18084,org/apache/catalina/util,org/apache/catalina/util/ExtensionValidator.java,2836,True,46,6,1351,1,16,201,11,31,0.954656862745098,233,126,0.5407725321888412,0.2282608695652173,16,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,11,1,STYLE,0.0061016949152542,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,13,2,1,0.0067609096496619,0.0006146281499692685,0.0006146281499692685,-1.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-0.4285714285714285,-1.0,26,11778,2836,18084,1,0.5,9,14,-13,24,0.0172413793103448,0,0,0,0,14,0,1,0.0,24,0,9,0,0,-13,0,0,0.0,341,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,6645,18084,341,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/util/ExtensionValidator.java,addFolderList,6645,close,"private static void addFolderList(String property) {

        // get the files in the extensions directory
        String extensionsDir = System.getProperty(property);
        if (extensionsDir != null) {
            StringTokenizer extensionsTok
                = new StringTokenizer(extensionsDir, File.pathSeparator);
            while (extensionsTok.hasMoreTokens()) {
                File targetDir = new File(extensionsTok.nextToken());
                if (!targetDir.isDirectory()) {
                    continue;
                }
                File[] files = targetDir.listFiles();
                for (int i = 0; i < files.length; i++) {
                    if (files[i].getName().toLowerCase(Locale.ENGLISH).endsWith("".jar"") &&
                            files[i].isFile()) {
                        try {
                            addSystemResource(files[i]);
                        } catch (IOException e) {
                            log.error
                                (sm.getString
                                 (""extensionValidator.failload"", files[i]), e);
                        }
                    }
                }
            }
        }

    }"
tomcat-C-565,14221,org/apache/catalina/util,org/apache/catalina/util/LifecycleBase.java,1398,True,6,18,1351,1,6,201,1,31,0.8345498783454988,226,112,0.495575221238938,0.3888888888888889,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,11,1,MT_CORRECTNESS,0.0006779661016949153,UG_SYNC_SET_UNSYNC_GET,14,2,1,0.0067609096496619,0.0006146281499692685,0.0006146281499692685,-1.0,0.0,0.0,0.1111111111111111,0.2126623589098189,-1.0,0.0,0.0077683615819209,0.2126623589098189,-0.4285714285714285,-1.0,28,7915,1398,14221,1,0.0,9,14,-13,24,0.0172413793103448,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2772,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,9076,18084,341,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/util/LifecycleBase.java,getState,6645,open,"@Override
    public LifecycleState getState() {
        return state;
    }"
tomcat-C-570,18084,org/apache/catalina/util,org/apache/catalina/util/URLEncoder.java,2836,True,40,3,1351,1,12,201,5,31,0.69,62,31,0.5,0.275,16,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,11,1,I18N,0.0359322033898305,DM_DEFAULT_ENCODING,19,1,1,0.0067609096496619,0.0006146281499692685,0.0006146281499692685,-1.0,0.1428571428571428,0.0612244897959183,0.1403508771929824,0.0024630812620523,-0.6785714285714286,0.0,0.0056497175141242,0.0024630812620523,-0.4285714285714285,-1.0,8,11778,2836,18084,1,0.0,9,14,-13,24,0.0172413793103448,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2752,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,9056,18084,341,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/util/URLEncoder.java,encode,6645,open,"public String encode( String path ) {
        int maxBytesPerChar = 10;
        StringBuilder rewrittenPath = new StringBuilder(path.length());
        ByteArrayOutputStream buf = new ByteArrayOutputStream(maxBytesPerChar);
        OutputStreamWriter writer = null;
        try {
            writer = new OutputStreamWriter(buf, ""UTF8"");
        } catch (Exception e) {
            e.printStackTrace();
            writer = new OutputStreamWriter(buf);
        }

        for (int i = 0; i < path.length(); i++) {
            int c = path.charAt(i);
            if (safeCharacters.get(c)) {
                rewrittenPath.append((char)c);
            } else {
                // convert to external encoding before hex conversion
                try {
                    writer.write((char)c);
                    writer.flush();
                } catch(IOException e) {
                    buf.reset();
                    continue;
                }
                byte[] ba = buf.toByteArray();
                for (int j = 0; j < ba.length; j++) {
                    // Converting each byte in the buffer
                    byte toEncode = ba[j];
                    rewrittenPath.append('%');
                    int low = toEncode & 0x0f;
                    int high = (toEncode & 0xf0) >> 4;
                    rewrittenPath.append(hexadecimal[high]);
                    rewrittenPath.append(hexadecimal[low]);
                }
                buf.reset();
            }
        }
        return rewrittenPath.toString();
    }"
tomcat-C-592,8676,org/apache/catalina/valves/rewrite,org/apache/catalina/valves/rewrite/RewriteValve.java,344,True,167,17,169,1,8,116,37,20,0.3825857519788918,580,113,0.1948275862068965,0.0359281437125748,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,15,5,BAD_PRACTICE,0.0033898305084745,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,16,2,3,0.009219422249539,0.0030731407498463,0.0018438844499078,0.0,0.3333333333333333,0.0069444444444444,0.128099173553719,0.106556527989236,-0.3333333333333333,0.0,0.0218926553672316,0.106556527989236,0.0,0.0,5,2370,344,8676,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,996,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,7300,18084,996,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/valves/rewrite/RewriteValve.java,invoke,7300,close,"@Override
    public void invoke(Request request, Response response)
        throws IOException, ServletException {

        if (!getEnabled() || rules == null || rules.length == 0) {
            getNext().invoke(request, response);
            return;
        }

        if (invoked.get() == Boolean.TRUE) {
            try {
                getNext().invoke(request, response);
            } finally {
                invoked.set(null);
            }
            return;
        }

        try {

            Resolver resolver = new ResolverImpl(request);

            invoked.set(Boolean.TRUE);

            // As long as MB isn't a char sequence or affiliated, this has to be
            // converted to a string
            MessageBytes urlMB = context ? request.getRequestPathMB() : request.getDecodedRequestURIMB();
            urlMB.toChars();
            CharSequence url = urlMB.getCharChunk();
            CharSequence host = request.getServerName();
            boolean rewritten = false;
            boolean done = false;
            for (int i = 0; i < rules.length; i++) {
                RewriteRule rule = rules[i];
                CharSequence test = (rule.isHost()) ? host : url;
                CharSequence newtest = rule.evaluate(test, resolver);
                if (newtest != null && !test.equals(newtest.toString())) {
                    if (container.getLogger().isDebugEnabled()) {
                        container.getLogger().debug(""Rewrote "" + test + "" as "" + newtest
                                + "" with rule pattern "" + rule.getPatternString());
                    }
                    if (rule.isHost()) {
                        host = newtest;
                    } else {
                        url = newtest;
                    }
                    rewritten = true;
                }

                // Final reply

                // - forbidden
                if (rule.isForbidden() && newtest != null) {
                    response.sendError(HttpServletResponse.SC_FORBIDDEN);
                    done = true;
                    break;
                }
                // - gone
                if (rule.isGone() && newtest != null) {
                    response.sendError(HttpServletResponse.SC_GONE);
                    done = true;
                    break;
                }
                // - redirect (code)
                if (rule.isRedirect() && newtest != null) {
                    // append the query string to the url if there is one and it hasn't been rewritten
                    String queryString = request.getQueryString();
                    StringBuffer urlString = new StringBuffer(url);
                    if (queryString != null && queryString.length() > 0) {
                        int index = urlString.indexOf(""?"");
                        if (index != -1) {
                            // if qsa is specified append the query
                            if (rule.isQsappend()) {
                                urlString.append('&');
                                urlString.append(queryString);
                            }
                            // if the ? is the last character delete it, its only purpose was to
                            // prevent the rewrite module from appending the query string
                            else if (index == urlString.length() - 1) {
                                urlString.deleteCharAt(index);
                            }
                        } else {
                            urlString.append('?');
                            urlString.append(queryString);
                        }
                    }
                    // Insert the context if
                    // 1. this valve is associated with a context
                    // 2. the url starts with a leading slash
                    // 3. the url isn't absolute
                    if (context && urlString.charAt(0) == '/' && !hasScheme(urlString)) {
                        urlString.insert(0, request.getContext().getEncodedPath());
                    }
                    response.sendRedirect(urlString.toString());
                    response.setStatus(rule.getRedirectCode());
                    done = true;
                    break;
                }

                // Reply modification

                // - cookie
                if (rule.isCookie() && newtest != null) {
                    Cookie cookie = new Cookie(rule.getCookieName(),
                            rule.getCookieResult());
                    cookie.setDomain(rule.getCookieDomain());
                    cookie.setMaxAge(rule.getCookieLifetime());
                    cookie.setPath(rule.getCookiePath());
                    cookie.setSecure(rule.isCookieSecure());
                    cookie.setHttpOnly(rule.isCookieHttpOnly());
                    response.addCookie(cookie);
                }
                // - env (note: this sets a request attribute)
                if (rule.isEnv() && newtest != null) {
                    for (int j = 0; j < rule.getEnvSize(); j++) {
                        request.setAttribute(rule.getEnvName(j), rule.getEnvResult(j));
                    }
                }
                // - content type (note: this will not force the content type, use a filter
                //   to do that)
                if (rule.isType() && newtest != null) {
                    request.setContentType(rule.getTypeValue());
                }
                // - qsappend
                if (rule.isQsappend() && newtest != null) {
                    String queryString = request.getQueryString();
                    String urlString = url.toString();
                    if (urlString.indexOf('?') != -1 && queryString != null) {
                        url = urlString + ""&"" + queryString;
                    }
                }

                // Control flow processing

                // - chain (skip remaining chained rules if this one does not match)
                if (rule.isChain() && newtest == null) {
                    for (int j = i; j < rules.length; j++) {
                        if (!rules[j].isChain()) {
                            i = j;
                            break;
                        }
                    }
                    continue;
                }
                // - last (stop rewriting here)
                if (rule.isLast() && newtest != null) {
                    break;
                }
                // - next (redo again)
                if (rule.isNext() && newtest != null) {
                    i = 0;
                    continue;
                }
                // - skip (n rules)
                if (newtest != null) {
                    i += rule.getSkip();
                }

            }

            if (rewritten) {
                if (!done) {
                    // See if we need to replace the query string
                    String urlString = url.toString();
                    String queryString = null;
                    int queryIndex = urlString.indexOf('?');
                    if (queryIndex != -1) {
                        queryString = urlString.substring(queryIndex+1);
                        urlString = urlString.substring(0, queryIndex);
                    }
                    // Set the new URL
                    request.getCoyoteRequest().requestURI().setString(null);
                    CharChunk chunk = request.getCoyoteRequest().requestURI().getCharChunk();
                    chunk.recycle();
                    if (context) {
                        chunk.append(request.getContextPath());
                    }
                    chunk.append(urlString);
                    request.getCoyoteRequest().requestURI().toChars();
                    // Set the new Query if there is one
                    if (queryString != null) {
                        request.getCoyoteRequest().queryString().setString(null);
                        chunk = request.getCoyoteRequest().queryString().getCharChunk();
                        chunk.recycle();
                        chunk.append(queryString);
                        request.getCoyoteRequest().queryString().toChars();
                    }
                    // Set the new host if it changed
                    if (!host.equals(request.getServerName())) {
                        request.getCoyoteRequest().serverName().setString(null);
                        chunk = request.getCoyoteRequest().serverName().getCharChunk();
                        chunk.recycle();
                        chunk.append(host.toString());
                        request.getCoyoteRequest().serverName().toChars();
                    }
                    request.getMappingData().recycle();
                    // Reinvoke the whole request recursively
                    try {
                        request.getConnector().getProtocolHandler().getAdapter().service
                        (request.getCoyoteRequest(), response.getCoyoteResponse());
                    } catch (Exception e) {
                        // This doesn't actually happen in the Catalina adapter implementation
                    }
                }
            } else {
                getNext().invoke(request, response);
            }

        } finally {
            invoked.set(null);
        }

    }"
tomcat-C-593,8676,org/apache/catalina/valves/rewrite,org/apache/catalina/valves/rewrite/RewriteValve.java,344,True,71,17,169,1,0,116,18,20,0.7902374670184696,580,113,0.1948275862068965,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,15,5,STYLE,0.0481355932203389,REC_CATCH_EXCEPTION,20,3,1,0.009219422249539,0.0030731407498463,0.0006146281499692685,0.0,0.1739130434782608,0.0044896030245746,0.1053719008264462,0.0543030765297002,-0.6086956521739131,0.0,0.0360169491525423,0.0543030765297002,0.0,0.0,5,2370,344,8676,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,996,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,7300,18084,996,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/valves/rewrite/RewriteValve.java,parse,7300,open,"protected void parse(BufferedReader reader) throws LifecycleException {
        ArrayList<RewriteRule> rules = new ArrayList<>();
        ArrayList<RewriteCond> conditions = new ArrayList<>();
        while (true) {
            try {
                String line = reader.readLine();
                if (line == null) {
                    break;
                }
                Object result = parse(line);
                if (result instanceof RewriteRule) {
                    RewriteRule rule = (RewriteRule) result;
                    if (container.getLogger().isDebugEnabled()) {
                        container.getLogger().debug(""Add rule with pattern "" + rule.getPatternString()
                                + "" and substitution "" + rule.getSubstitutionString());
                    }
                    for (int i = (conditions.size() - 1); i > 0; i--) {
                        if (conditions.get(i - 1).isOrnext()) {
                            conditions.get(i).setOrnext(true);
                        }
                    }
                    for (int i = 0; i < conditions.size(); i++) {
                        if (container.getLogger().isDebugEnabled()) {
                            RewriteCond cond = conditions.get(i);
                            container.getLogger().debug(""Add condition "" + cond.getCondPattern()
                                    + "" test "" + cond.getTestString() + "" to rule with pattern ""
                                    + rule.getPatternString() + "" and substitution ""
                                    + rule.getSubstitutionString() + (cond.isOrnext() ? "" [OR]"" : """")
                                    + (cond.isNocase() ? "" [NC]"" : """"));
                        }
                        rule.addCondition(conditions.get(i));
                    }
                    conditions.clear();
                    rules.add(rule);
                } else if (result instanceof RewriteCond) {
                    conditions.add((RewriteCond) result);
                } else if (result instanceof Object[]) {
                    String mapName = (String) ((Object[]) result)[0];
                    RewriteMap map = (RewriteMap) ((Object[]) result)[1];
                    maps.put(mapName, map);
                    if (map instanceof Lifecycle) {
                        ((Lifecycle) map).start();
                    }
                }
            } catch (IOException e) {
                container.getLogger().error(""Error reading configuration"", e);
            }
        }
        this.rules = rules.toArray(new RewriteRule[0]);

        // Finish parsing the rules
        for (int i = 0; i < this.rules.length; i++) {
            this.rules[i].parse(maps);
        }
    }"
tomcat-C-756,7398,org/apache/el/stream,org/apache/el/stream/Stream.java,169,True,10,30,73,11,8,42,3,14,0.7547892720306514,392,16,0.0408163265306122,0.9,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,2,PERFORMANCE,0.0006779661016949153,DM_BOOLEAN_CTOR,18,2,1,0.0018438844499078,0.0012292562999385,0.0006146281499692685,0.0,0.0,0.0,0.0848484848484848,0.0755918430465237,0.0,0.0,0.0098870056497175,0.0755918430465237,0.0,0.0,3,1072,168,7378,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1062,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7366,18084,1030,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/el/stream/Stream.java,noneMatch,7334,close,"public Optional noneMatch(LambdaExpression le) {
        if (!iterator.hasNext()) {
            return Optional.EMPTY;
        }

        Boolean match = Boolean.FALSE;

        while (!match.booleanValue() && iterator.hasNext()) {
            match = (Boolean) le.invoke(iterator.next());
        }

        return new Optional(new Boolean(!match.booleanValue()));
    }"
tomcat-C-758,7398,org/apache/el/stream,org/apache/el/stream/StreamELResolverImpl.java,169,True,0,7,73,2,0,42,1,14,0.925925925925926,71,18,0.2535211267605634,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,1,BAD_PRACTICE,0.0013559322033898,IT_NO_SUCH_ELEMENT,16,2,1,0.0018438844499078,0.0006146281499692685,0.0006146281499692685,0.0,0.0,0.0,0.128099173553719,0.106556527989236,-1.0,0.0,0.0218926553672316,0.106556527989236,0.0,0.0,1,1091,169,7397,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1085,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7389,18084,1030,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/el/stream/StreamELResolverImpl.java,next,7334,open,"@Override
        public Object next() {
            return Array.get(base, index++);
        }"
tomcat-C-759,17709,org/apache/el/util,org/apache/el/util/MessageFactory.java,2629,True,8,3,52,1,8,19,3,5,0.8541666666666666,21,20,0.9523809523809524,0.375,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,7,2,STYLE,0.0515254237288135,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,18,2,1,0.0043023970497848,0.0012292562999385,0.0006146281499692685,-1.0,0.1282051282051282,0.0034927679158448,0.1053719008264462,0.0543030765297002,-0.6923076923076923,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,1,6210,1109,12516,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,4517,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,10821,18084,816,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/el/util/MessageFactory.java,get,7120,close,"public static String get(final String key) {
        return bundle.getString(key);
    }"
tomcat-C-772,17709,org/apache/jasper,org/apache/jasper/JspC.java,2629,True,116,84,750,1,16,204,19,6,0.9240314769975788,1067,411,0.3851921274601687,0.2887931034482758,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,14,12,STYLE,0.0061016949152542,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,13,2,2,0.0086047940995697,0.0073755377996312,0.0012292562999385,-1.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-0.625,-0.6923076923076923,58,11778,2836,18084,81,0.1138477016488407,9,30,51,120,0.1073630973963839,0,0,0,0,12,0,46,0.0,58,0,0,0,0,34,0,0,0.0,90,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,6394,18084,53,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/JspC.java,initClassLoader,6357,close,"protected ClassLoader initClassLoader() throws IOException {

        classPath = getClassPath();

        ClassLoader jspcLoader = getClass().getClassLoader();
        if (jspcLoader instanceof AntClassLoader) {
            classPath += File.pathSeparator
                + ((AntClassLoader) jspcLoader).getClasspath();
        }

        // Turn the classPath into URLs
        ArrayList<URL> urls = new ArrayList<>();
        StringTokenizer tokenizer = new StringTokenizer(classPath,
                                                        File.pathSeparator);
        while (tokenizer.hasMoreTokens()) {
            String path = tokenizer.nextToken();
            try {
                File libFile = new File(path);
                urls.add(libFile.toURI().toURL());
            } catch (IOException ioe) {
                // Failing a toCanonicalPath on a file that
                // exists() should be a JVM regression test,
                // therefore we have permission to freak uot
                throw new RuntimeException(ioe.toString());
            }
        }

        File webappBase = new File(uriRoot);
        if (webappBase.exists()) {
            File classes = new File(webappBase, ""/WEB-INF/classes"");
            try {
                if (classes.exists()) {
                    classPath = classPath + File.pathSeparator
                        + classes.getCanonicalPath();
                    urls.add(classes.getCanonicalFile().toURI().toURL());
                }
            } catch (IOException ioe) {
                // failing a toCanonicalPath on a file that
                // exists() should be a JVM regression test,
                // therefore we have permission to freak out
                throw new RuntimeException(ioe.toString());
            }
            File lib = new File(webappBase, ""/WEB-INF/lib"");
            if (lib.exists() && lib.isDirectory()) {
                String[] libs = lib.list();
                for (int i = 0; i < libs.length; i++) {
                    if( libs[i].length() <5 ) continue;
                    String ext=libs[i].substring( libs[i].length() - 4 );
                    if (! "".jar"".equalsIgnoreCase(ext)) {
                        if ("".tld"".equalsIgnoreCase(ext)) {
                            log.warn(""TLD files should not be placed in ""
                                     + ""/WEB-INF/lib"");
                        }
                        continue;
                    }
                    try {
                        File libFile = new File(lib, libs[i]);
                        classPath = classPath + File.pathSeparator
                            + libFile.getAbsolutePath();
                        urls.add(libFile.getAbsoluteFile().toURI().toURL());
                    } catch (IOException ioe) {
                        // failing a toCanonicalPath on a file that
                        // exists() should be a JVM regression test,
                        // therefore we have permission to freak out
                        throw new RuntimeException(ioe.toString());
                    }
                }
            }
        }

        URL urlsA[]=new URL[urls.size()];
        urls.toArray(urlsA);
        loader = new URLClassLoader(urlsA, this.getClass().getClassLoader());
        return loader;
    }"
tomcat-C-777,17709,org/apache/jasper,org/apache/jasper/JspCompilationContext.java,2629,True,6,50,750,1,0,204,2,6,0.240766073871409,490,152,0.310204081632653,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,14,2,MALICIOUS_CODE,0.0020338983050847,DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED,18,2,1,0.0086047940995697,0.0012292562999385,0.0006146281499692685,-1.0,0.0,0.0,0.1337579617834395,0.0441823027852679,-1.0,0.0,0.0296610169491525,0.0441823027852679,-0.625,-1.0,56,11778,2836,18084,81,0.2094248094248094,9,30,51,120,0.1073630973963839,0,0,0,0,6,0,11,0.0,26,0,9,0,0,5,0,0,0.0,53,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6357,18084,53,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/JspCompilationContext.java,getJspLoader,6357,open,"public ClassLoader getJspLoader() {
        if( jspLoader == null ) {
            jspLoader = new JasperLoader
                    (new URL[] {baseUrl},
                            getClassLoader(),
                            rctxt.getPermissionCollection());
        }
        return jspLoader;
    }"
tomcat-C-796,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/ELParser.java,2836,True,0,15,2884,7,0,522,1,152,0.8584474885844748,295,89,0.3016949152542373,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,3,PERFORMANCE,0.0020338983050847,DM_BOXED_PRIMITIVE_TOSTRING,18,2,2,0.0547019053472649,0.0018438844499078,0.0012292562999385,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-0.8709677419354839,-1.0,13,11778,2836,18084,554,0.4285714285714285,59,694,-140,1307,0.1018080875031609,0,0,0,0,0,0,37,0.0,39,0,2,0,0,37,0,0,0.0,332,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6636,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/ELParser.java,toString,6350,close,"@Override
        public String toString() {
            return """";
        }"
tomcat-C-798,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/Generator.java,2836,True,25,30,2884,12,12,522,5,152,0.8125437164840289,3063,711,0.2321253672869735,0.32,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,2,STYLE,0.0108474576271186,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,20,3,1,0.0547019053472649,0.0012292562999385,0.0006146281499692685,-1.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-0.8709677419354839,-1.0,102,11778,2836,18084,554,0.2262443438914027,59,694,-140,1307,0.1018080875031609,0,0,0,0,32,0,18,0.0,50,0,0,0,0,-14,0,0,0.0,274,1,0,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,6578,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/Generator.java,generate,6350,open,"public static void generate(ServletWriter out, Compiler compiler,
            Node.Nodes page) throws JasperException {

        Generator gen = new Generator(out, compiler);

        if (gen.isPoolingEnabled) {
            gen.compileTagHandlerPoolList(page);
        }
        gen.generateCommentHeader();
        if (gen.ctxt.isTagFile()) {
            JasperTagInfo tagInfo = (JasperTagInfo) gen.ctxt.getTagInfo();
            gen.generateTagHandlerPreamble(tagInfo, page);

            if (gen.ctxt.isPrototypeMode()) {
                return;
            }

            gen.generateXmlProlog(page);
            gen.fragmentHelperClass.generatePreamble();
            page.visit(gen.new GenerateVisitor(gen.ctxt.isTagFile(), out,
                    gen.methodsBuffered, gen.fragmentHelperClass));
            gen.generateTagHandlerPostamble(tagInfo);
        } else {
            gen.generatePreamble(page);
            gen.generateXmlProlog(page);
            gen.fragmentHelperClass.generatePreamble();
            page.visit(gen.new GenerateVisitor(gen.ctxt.isTagFile(), out,
                    gen.methodsBuffered, gen.fragmentHelperClass));
            gen.generatePostamble();
        }
    }"
tomcat-C-802,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/JDTCompiler.java,2836,True,0,1,2884,4,0,522,1,152,0.375,415,33,0.0795180722891566,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,6,PERFORMANCE,0.0054237288135593,SBSC_USE_STRINGBUFFER_CONCATENATION,18,2,2,0.0547019053472649,0.0036877688998156,0.0012292562999385,-1.0,0.1111111111111111,0.0075973409306742,0.0848484848484848,0.0755918430465237,-0.7777777777777778,0.0,0.0098870056497175,0.0755918430465237,-0.8709677419354839,-1.0,19,11778,2836,18084,554,0.0,59,694,-140,1307,0.1018080875031609,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2736,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,9040,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/JDTCompiler.java,findType,6350,close,"@Override
                public NameEnvironmentAnswer
                    findType(char[][] compoundTypeName) {
                    String result = """";
                    String sep = """";
                    for (int i = 0; i < compoundTypeName.length; i++) {
                        result += sep;
                        result += new String(compoundTypeName[i]);
                        sep = ""."";
                    }
                    return findType(result);
                }"
tomcat-C-803,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/JDTCompiler.java,2836,True,0,1,2884,4,0,522,1,152,0.555327868852459,415,33,0.0795180722891566,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,6,PERFORMANCE,0.0054237288135593,SBSC_USE_STRINGBUFFER_CONCATENATION,18,2,1,0.0547019053472649,0.0036877688998156,0.0006146281499692685,-1.0,0.1111111111111111,0.0075973409306742,0.0848484848484848,0.0755918430465237,-0.7777777777777778,0.0,0.0098870056497175,0.0755918430465237,-0.8709677419354839,-1.0,19,11778,2836,18084,554,0.0,59,694,-140,1307,0.1018080875031609,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2736,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,9040,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/JDTCompiler.java,isPackage,6350,close,"private boolean isPackage(String result) {
                    if (result.equals(targetClassName)) {
                        return false;
                    }
                    String resourceName = result.replace('.', '/') + "".class"";
                    InputStream is =
                        classLoader.getResourceAsStream(resourceName);
                    return is == null;
                }"
tomcat-C-805,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/JDTCompiler.java,2836,True,0,1,2884,4,0,522,1,152,0.8688524590163934,415,33,0.0795180722891566,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,6,PERFORMANCE,0.0054237288135593,SBSC_USE_STRINGBUFFER_CONCATENATION,18,2,2,0.0547019053472649,0.0036877688998156,0.0012292562999385,-1.0,0.1111111111111111,0.0075973409306742,0.0848484848484848,0.0755918430465237,-0.7777777777777778,0.0,0.0098870056497175,0.0755918430465237,-0.8709677419354839,-1.0,19,11778,2836,18084,554,0.0,59,694,-140,1307,0.1018080875031609,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2736,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,9040,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/JDTCompiler.java,acceptResult,6350,close,"@Override
                public void acceptResult(CompilationResult result) {
                    try {
                        if (result.hasProblems()) {
                            IProblem[] problems = result.getProblems();
                            for (int i = 0; i < problems.length; i++) {
                                IProblem problem = problems[i];
                                if (problem.isError()) {
                                    String name =
                                        new String(problems[i].getOriginatingFileName());
                                    try {
                                        problemList.add(ErrorDispatcher.createJavacError
                                                (name, pageNodes, new StringBuilder(problem.getMessage()),
                                                        problem.getSourceLineNumber(), ctxt));
                                    } catch (JasperException e) {
                                        log.error(""Error visiting node"", e);
                                    }
                                }
                            }
                        }
                        if (problemList.isEmpty()) {
                            ClassFile[] classFiles = result.getClassFiles();
                            for (int i = 0; i < classFiles.length; i++) {
                                ClassFile classFile = classFiles[i];
                                char[][] compoundName =
                                    classFile.getCompoundName();
                                String className = """";
                                String sep = """";
                                for (int j = 0;
                                     j < compoundName.length; j++) {
                                    className += sep;
                                    className += new String(compoundName[j]);
                                    sep = ""."";
                                }
                                byte[] bytes = classFile.getBytes();
                                String outFile = outputDir + ""/"" +
                                    className.replace('.', '/') + "".class"";
                                FileOutputStream fout =
                                    new FileOutputStream(outFile);
                                BufferedOutputStream bos =
                                    new BufferedOutputStream(fout);
                                bos.write(bytes);
                                bos.close();
                            }
                        }
                    } catch (IOException exc) {
                        log.error(""Compilation error"", exc);
                    }
                }"
tomcat-C-806,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/JavacErrorDetail.java,2836,True,9,9,2884,1,8,522,2,152,0.956896551724138,111,94,0.8468468468468469,0.2222222222222222,4,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,1,I18N,0.0359322033898305,DM_DEFAULT_ENCODING,19,1,1,0.0547019053472649,0.0006146281499692685,0.0006146281499692685,-1.0,0.1428571428571428,0.0612244897959183,0.1403508771929824,0.0024630812620523,-0.6785714285714286,0.0,0.0056497175141242,0.0024630812620523,-0.8709677419354839,-1.0,11,11233,2556,17539,554,0.2222222222222222,59,694,-140,1307,0.1018080875031609,0,0,0,0,2,0,4,0.0,6,0,0,0,0,2,0,0,0.0,201,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6505,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/JavacErrorDetail.java,readFile,6350,open,"private String[] readFile(InputStream s) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(s));
        List<String> lines = new ArrayList<>();
        String line;

        while ( (line = reader.readLine()) != null ) {
            lines.add(line);
        }

        return lines.toArray( new String[lines.size()] );
    }"
tomcat-C-809,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/JspConfig.java,2836,True,78,6,2884,3,8,522,22,152,0.3913857677902622,401,62,0.1546134663341646,0.2435897435897435,6,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,3,STYLE,0.0013559322033898,NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE,13,2,1,0.0547019053472649,0.0018438844499078,0.0006146281499692685,-1.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-0.8709677419354839,-0.5,30,11778,2836,18084,554,0.0,59,694,-140,1307,0.1018080875031609,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1117,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,7421,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/JspConfig.java,selectProperty,6350,open,"@SuppressWarnings(""null"") // NPE not possible
    private JspPropertyGroup selectProperty(JspPropertyGroup prev,
            JspPropertyGroup curr) {
        if (prev == null) {
            return curr;
        }
        if (prev.getExtension() == null) {
            // exact match
            return prev;
        }
        if (curr.getExtension() == null) {
            // exact match
            return curr;
        }
        String prevPath = prev.getPath();
        String currPath = curr.getPath();
        if (prevPath == null && currPath == null) {
            // Both specifies a *.ext, keep the first one
            return prev;
        }
        if (prevPath == null && currPath != null) {
            return curr;
        }
        if (prevPath != null && currPath == null) {
            return prev;
        }
        if (prevPath.length() >= currPath.length()) {
            return prev;
        }
        return curr;
    }"
tomcat-C-810,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/JspDocumentParser.java,2836,True,107,33,2884,2,0,522,29,152,0.4114173228346456,1141,251,0.2199824715162138,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,4,STYLE,0.0257627118644067,DLS_DEAD_LOCAL_STORE,17,2,2,0.0547019053472649,0.002458512599877,0.0012292562999385,-1.0,0.131578947368421,0.0035708102493074,0.1053719008264462,0.0543030765297002,-0.6842105263157895,0.0,0.0360169491525423,0.0543030765297002,-0.8709677419354839,-0.2,19,2785,419,9091,554,0.1774590579539304,59,694,-140,1307,0.1018080875031609,0,0,0,0,21,0,59,0.0,81,0,1,0,0,38,0,0,0.0,90,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6394,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/JspDocumentParser.java,processChars,6350,open,"private void processChars() throws SAXException {

        if (charBuffer == null || directivesOnly) {
            return;
        }

        /*
         * JSP.6.1.1: All textual nodes that have only white space are to be
         * dropped from the document, except for nodes in a jsp:text element,
         * and any leading and trailing white-space-only textual nodes in a
         * jsp:attribute whose 'trim' attribute is set to FALSE, which are to
         * be kept verbatim.
         * JSP.6.2.3 defines white space characters.
         */
        boolean isAllSpace = true;
        if (!(current instanceof Node.JspText)
            && !(current instanceof Node.NamedAttribute)) {
            for (int i = 0; i < charBuffer.length(); i++) {
                char ch = charBuffer.charAt(i);
                if (!(ch == ' ' || ch == '\n' || ch == '\r' || ch == '\t')) {
                    isAllSpace = false;
                    break;
                }
            }
        }

        if (!isAllSpace && tagDependentPending) {
            tagDependentPending = false;
            tagDependentNesting++;
        }

        if (tagDependentNesting > 0 || pageInfo.isELIgnored() ||
                current instanceof Node.ScriptingElement) {
            if (charBuffer.length() > 0) {
                @SuppressWarnings(""unused"")
                Node unused = new Node.TemplateText(
                        charBuffer.toString(), startMark, current);
            }
            startMark = new Mark(ctxt, path, locator.getLineNumber(),
                                 locator.getColumnNumber());
            charBuffer = null;
            return;
        }

        if ((current instanceof Node.JspText)
            || (current instanceof Node.NamedAttribute)
            || !isAllSpace) {

            int line = startMark.getLineNumber();
            int column = startMark.getColumnNumber();

            CharArrayWriter ttext = new CharArrayWriter();
            int lastCh = 0, elType = 0;
            for (int i = 0; i < charBuffer.length(); i++) {

                int ch = charBuffer.charAt(i);
                if (ch == '\n') {
                    column = 1;
                    line++;
                } else {
                    column++;
                }
                if ((lastCh == '$' || lastCh == '#') && ch == '{') {
                    elType = lastCh;
                    if (ttext.size() > 0) {
                        @SuppressWarnings(""unused"")
                        Node unused = new Node.TemplateText(
                                ttext.toString(), startMark, current);
                        ttext.reset();
                        //We subtract two from the column number to
                        //account for the '[$,#]{' that we've already parsed
                        startMark = new Mark(ctxt, path, line, column - 2);
                    }
                    // following ""${"" || ""#{"" to first unquoted ""}""
                    i++;
                    boolean singleQ = false;
                    boolean doubleQ = false;
                    lastCh = 0;
                    for (;; i++) {
                        if (i >= charBuffer.length()) {
                            throw new SAXParseException(
                                Localizer.getMessage(
                                    ""jsp.error.unterminated"",
                                    (char) elType + ""{""),
                                locator);

                        }
                        ch = charBuffer.charAt(i);
                        if (ch == '\n') {
                            column = 1;
                            line++;
                        } else {
                            column++;
                        }
                        if (lastCh == '\\' && (singleQ || doubleQ)) {
                            ttext.write(ch);
                            lastCh = 0;
                            continue;
                        }
                        if (ch == '}') {
                            @SuppressWarnings(""unused"")
                            Node unused = new Node.ELExpression(
                                    (char) elType, ttext.toString(),
                                    startMark, current);
                            ttext.reset();
                            startMark = new Mark(ctxt, path, line, column);
                            break;
                        }
                        if (ch == '""')
                            doubleQ = !doubleQ;
                        else if (ch == '\'')
                            singleQ = !singleQ;

                        ttext.write(ch);
                        lastCh = ch;
                    }
                } else if (lastCh == '\\' && (ch == '$' || ch == '#')) {
                    if (pageInfo.isELIgnored()) {
                        ttext.write('\\');
                    }
                    ttext.write(ch);
                    ch = 0;  // Not start of EL anymore
                } else {
                    if (lastCh == '$' || lastCh == '#' || lastCh == '\\') {
                        ttext.write(lastCh);
                    }
                    if (ch != '$' && ch != '#' && ch != '\\') {
                        ttext.write(ch);
                    }
                }
                lastCh = ch;
            }
            if (lastCh == '$' || lastCh == '#' || lastCh == '\\') {
                ttext.write(lastCh);
            }
            if (ttext.size() > 0) {
                @SuppressWarnings(""unused"")
                Node unused = new Node.TemplateText(
                        ttext.toString(), startMark, current);
            }
        }
        startMark = new Mark(ctxt, path, locator.getLineNumber(),
                             locator.getColumnNumber());

        charBuffer = null;
    }"
tomcat-C-811,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/JspDocumentParser.java,2836,True,214,33,2884,2,0,522,57,152,0.3763123359580052,1141,251,0.2199824715162138,1.0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,4,STYLE,0.0257627118644067,DLS_DEAD_LOCAL_STORE,17,2,2,0.0547019053472649,0.002458512599877,0.0012292562999385,-1.0,0.131578947368421,0.0035708102493074,0.1053719008264462,0.0543030765297002,-0.6842105263157895,0.0,0.0360169491525423,0.0543030765297002,-0.8709677419354839,-0.2,19,2785,419,9091,554,0.1774590579539304,59,694,-140,1307,0.1018080875031609,0,0,0,0,21,0,59,0.0,81,0,1,0,0,38,0,0,0.0,90,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6394,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/JspDocumentParser.java,processChars,6350,open,"private void processChars() throws SAXException {

        if (charBuffer == null || directivesOnly) {
            return;
        }

        /*
         * JSP.6.1.1: All textual nodes that have only white space are to be
         * dropped from the document, except for nodes in a jsp:text element,
         * and any leading and trailing white-space-only textual nodes in a
         * jsp:attribute whose 'trim' attribute is set to FALSE, which are to
         * be kept verbatim.
         * JSP.6.2.3 defines white space characters.
         */
        boolean isAllSpace = true;
        if (!(current instanceof Node.JspText)
            && !(current instanceof Node.NamedAttribute)) {
            for (int i = 0; i < charBuffer.length(); i++) {
                char ch = charBuffer.charAt(i);
                if (!(ch == ' ' || ch == '\n' || ch == '\r' || ch == '\t')) {
                    isAllSpace = false;
                    break;
                }
            }
        }

        if (!isAllSpace && tagDependentPending) {
            tagDependentPending = false;
            tagDependentNesting++;
        }

        if (tagDependentNesting > 0 || pageInfo.isELIgnored() ||
                current instanceof Node.ScriptingElement) {
            if (charBuffer.length() > 0) {
                @SuppressWarnings(""unused"")
                Node unused = new Node.TemplateText(
                        charBuffer.toString(), startMark, current);
            }
            startMark = new Mark(ctxt, path, locator.getLineNumber(),
                                 locator.getColumnNumber());
            charBuffer = null;
            return;
        }

        if ((current instanceof Node.JspText)
            || (current instanceof Node.NamedAttribute)
            || !isAllSpace) {

            int line = startMark.getLineNumber();
            int column = startMark.getColumnNumber();

            CharArrayWriter ttext = new CharArrayWriter();
            int lastCh = 0, elType = 0;
            for (int i = 0; i < charBuffer.length(); i++) {

                int ch = charBuffer.charAt(i);
                if (ch == '\n') {
                    column = 1;
                    line++;
                } else {
                    column++;
                }
                if ((lastCh == '$' || lastCh == '#') && ch == '{') {
                    elType = lastCh;
                    if (ttext.size() > 0) {
                        @SuppressWarnings(""unused"")
                        Node unused = new Node.TemplateText(
                                ttext.toString(), startMark, current);
                        ttext.reset();
                        //We subtract two from the column number to
                        //account for the '[$,#]{' that we've already parsed
                        startMark = new Mark(ctxt, path, line, column - 2);
                    }
                    // following ""${"" || ""#{"" to first unquoted ""}""
                    i++;
                    boolean singleQ = false;
                    boolean doubleQ = false;
                    lastCh = 0;
                    for (;; i++) {
                        if (i >= charBuffer.length()) {
                            throw new SAXParseException(
                                Localizer.getMessage(
                                    ""jsp.error.unterminated"",
                                    (char) elType + ""{""),
                                locator);

                        }
                        ch = charBuffer.charAt(i);
                        if (ch == '\n') {
                            column = 1;
                            line++;
                        } else {
                            column++;
                        }
                        if (lastCh == '\\' && (singleQ || doubleQ)) {
                            ttext.write(ch);
                            lastCh = 0;
                            continue;
                        }
                        if (ch == '}') {
                            @SuppressWarnings(""unused"")
                            Node unused = new Node.ELExpression(
                                    (char) elType, ttext.toString(),
                                    startMark, current);
                            ttext.reset();
                            startMark = new Mark(ctxt, path, line, column);
                            break;
                        }
                        if (ch == '""')
                            doubleQ = !doubleQ;
                        else if (ch == '\'')
                            singleQ = !singleQ;

                        ttext.write(ch);
                        lastCh = ch;
                    }
                } else if (lastCh == '\\' && (ch == '$' || ch == '#')) {
                    if (pageInfo.isELIgnored()) {
                        ttext.write('\\');
                    }
                    ttext.write(ch);
                    ch = 0;  // Not start of EL anymore
                } else {
                    if (lastCh == '$' || lastCh == '#' || lastCh == '\\') {
                        ttext.write(lastCh);
                    }
                    if (ch != '$' && ch != '#' && ch != '\\') {
                        ttext.write(ch);
                    }
                }
                lastCh = ch;
            }
            if (lastCh == '$' || lastCh == '#' || lastCh == '\\') {
                ttext.write(lastCh);
            }
            if (ttext.size() > 0) {
                @SuppressWarnings(""unused"")
                Node unused = new Node.TemplateText(
                        ttext.toString(), startMark, current);
            }
        }
        startMark = new Mark(ctxt, path, locator.getLineNumber(),
                             locator.getColumnNumber());

        charBuffer = null;
    }"
tomcat-C-812,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/JspDocumentParser.java,2836,True,170,33,2884,2,8,522,47,152,0.2043963254593175,1141,251,0.2199824715162138,0.0588235294117647,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,4,CORRECTNESS,0.0020338983050847,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,11,2,1,0.0547019053472649,0.002458512599877,0.0006146281499692685,-1.0,0.3333333333333333,0.0246913580246913,0.1304347826086956,0.0559756353707204,0.0,0.0,0.0021186440677966,0.0559756353707204,-0.8709677419354839,-0.2,44,11778,2836,18084,554,0.1774590579539304,59,694,-140,1307,0.1018080875031609,0,0,0,0,21,0,59,0.0,81,0,1,0,0,38,0,0,0.0,90,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6394,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/JspDocumentParser.java,startElement,6350,close,"@Override
    public void startElement(
        String uri,
        String localName,
        String qName,
        Attributes attrs)
        throws SAXException {

        AttributesImpl taglibAttrs = null;
        AttributesImpl nonTaglibAttrs = null;
        AttributesImpl nonTaglibXmlnsAttrs = null;

        processChars();

        checkPrefixes(uri, qName, attrs);

        if (directivesOnly &&
            !(JSP_URI.equals(uri) && localName.startsWith(DIRECTIVE_ACTION))) {
            return;
        }

        // jsp:text must not have any subelements
        if (current instanceof Node.JspText) {
            throw new SAXParseException(
                Localizer.getMessage(""jsp.error.text.has_subelement""),
                locator);
        }

        startMark = new Mark(ctxt, path, locator.getLineNumber(),
                             locator.getColumnNumber());

        if (attrs != null) {
            /*
             * Notice that due to a bug in the underlying SAX parser, the
             * attributes must be enumerated in descending order.
             */
            boolean isTaglib = false;
            for (int i = attrs.getLength() - 1; i >= 0; i--) {
                isTaglib = false;
                String attrQName = attrs.getQName(i);
                if (!attrQName.startsWith(""xmlns"")) {
                    if (nonTaglibAttrs == null) {
                        nonTaglibAttrs = new AttributesImpl();
                    }
                    nonTaglibAttrs.addAttribute(
                        attrs.getURI(i),
                        attrs.getLocalName(i),
                        attrs.getQName(i),
                        attrs.getType(i),
                        attrs.getValue(i));
                } else {
                    if (attrQName.startsWith(""xmlns:jsp"")) {
                        isTaglib = true;
                    } else {
                        String attrUri = attrs.getValue(i);
                        // TaglibInfo for this uri already established in
                        // startPrefixMapping
                        isTaglib = pageInfo.hasTaglib(attrUri);
                    }
                    if (isTaglib) {
                        if (taglibAttrs == null) {
                            taglibAttrs = new AttributesImpl();
                        }
                        taglibAttrs.addAttribute(
                            attrs.getURI(i),
                            attrs.getLocalName(i),
                            attrs.getQName(i),
                            attrs.getType(i),
                            attrs.getValue(i));
                    } else {
                        if (nonTaglibXmlnsAttrs == null) {
                            nonTaglibXmlnsAttrs = new AttributesImpl();
                        }
                        nonTaglibXmlnsAttrs.addAttribute(
                            attrs.getURI(i),
                            attrs.getLocalName(i),
                            attrs.getQName(i),
                            attrs.getType(i),
                            attrs.getValue(i));
                    }
                }
            }
        }

        Node node = null;

        if (tagDependentPending && JSP_URI.equals(uri) &&
                     localName.equals(BODY_ACTION)) {
            tagDependentPending = false;
            tagDependentNesting++;
            current =
                parseStandardAction(
                    qName,
                    localName,
                    nonTaglibAttrs,
                    nonTaglibXmlnsAttrs,
                    taglibAttrs,
                    startMark);
            return;
        }

        if (tagDependentPending && JSP_URI.equals(uri) &&
                     localName.equals(ATTRIBUTE_ACTION)) {
            current =
                parseStandardAction(
                    qName,
                    localName,
                    nonTaglibAttrs,
                    nonTaglibXmlnsAttrs,
                    taglibAttrs,
                    startMark);
            return;
        }

        if (tagDependentPending) {
            tagDependentPending = false;
            tagDependentNesting++;
        }

        if (tagDependentNesting > 0) {
            node =
                new Node.UninterpretedTag(
                    qName,
                    localName,
                    nonTaglibAttrs,
                    nonTaglibXmlnsAttrs,
                    taglibAttrs,
                    startMark,
                    current);
        } else if (JSP_URI.equals(uri)) {
            node =
                parseStandardAction(
                    qName,
                    localName,
                    nonTaglibAttrs,
                    nonTaglibXmlnsAttrs,
                    taglibAttrs,
                    startMark);
        } else {
            node =
                parseCustomAction(
                    qName,
                    localName,
                    uri,
                    nonTaglibAttrs,
                    nonTaglibXmlnsAttrs,
                    taglibAttrs,
                    startMark,
                    current);
            if (node == null) {
                node =
                    new Node.UninterpretedTag(
                        qName,
                        localName,
                        nonTaglibAttrs,
                        nonTaglibXmlnsAttrs,
                        taglibAttrs,
                        startMark,
                        current);
            } else {
                // custom action
                String bodyType = getBodyType((Node.CustomTag) node);

                if (scriptlessBodyNode == null
                        && bodyType.equalsIgnoreCase(TagInfo.BODY_CONTENT_SCRIPTLESS)) {
                    scriptlessBodyNode = node;
                }
                else if (TagInfo.BODY_CONTENT_TAG_DEPENDENT.equalsIgnoreCase(bodyType)) {
                    tagDependentPending = true;
                }
            }
        }

        current = node;
    }"
tomcat-C-814,14929,org/apache/jasper/compiler,org/apache/jasper/compiler/JspReader.java,1513,True,27,31,2884,1,0,522,7,152,0.3039215686274509,426,206,0.4835680751173709,1.0,11,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,1,BAD_PRACTICE,0.0013559322033898,NP_BOOLEAN_RETURN_NULL,14,2,1,0.0547019053472649,0.0006146281499692685,0.0006146281499692685,-1.0,0.0,0.0,0.128099173553719,0.106556527989236,-1.0,0.0,0.0218926553672316,0.106556527989236,-0.8709677419354839,-1.0,19,11778,2836,18084,554,0.0220048899755501,59,694,-140,1307,0.1018080875031609,0,0,0,0,5,0,4,0.0,9,0,0,0,0,-1,0,0,0.0,368,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6672,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/JspReader.java,indexOf,6350,open,"private Boolean indexOf(char c, Mark mark) throws JasperException {
        if (!hasMoreInput())
            return null;

        int end = current.stream.length;
        int ch;
        int line = current.line;
        int col = current.col;
        int i = current.cursor;
        for(; i < end; i ++) {
           ch = current.stream[i];

           if (ch == c) {
               mark.update(i, line, col);
           }
           if (ch == '\n') {
                line++;
                col = 0;
            } else {
                col++;
            }
           if (ch == c) {
               current.update(i+1, line, col);
               return Boolean.TRUE;
           }
        }
        current.update(i, line, col);
        return Boolean.FALSE;
    }"
tomcat-C-826,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/Node.java,2836,True,0,29,2884,40,0,522,1,152,0.8052201012855473,1570,536,0.3414012738853503,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,10,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,1,0.0547019053472649,0.0061462814996926,0.0006146281499692685,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-0.8709677419354839,-1.0,27,11778,2836,18084,554,0.0869565217391304,59,694,-140,1307,0.1018080875031609,0,0,0,0,1,0,1,0.0,2,0,0,0,0,0,0,0,0.0,484,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6788,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/Node.java,addSmap,6350,close,"public void addSmap(int srcLine) {
            if (extraSmap == null) {
                extraSmap = new ArrayList<>();
            }
            extraSmap.add(new Integer(srcLine));
        }"
tomcat-C-827,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/Node.java,2836,True,0,29,2884,40,0,522,1,152,0.4834437086092715,1570,536,0.3414012738853503,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,10,MALICIOUS_CODE,0.0616949152542372,EI_EXPOSE_REP,18,2,3,0.0547019053472649,0.0061462814996926,0.0018438844499078,-1.0,0.1136363636363636,0.0077479338842975,0.1337579617834395,0.0441823027852679,-0.6931818181818182,0.0,0.0296610169491525,0.0441823027852679,-0.8709677419354839,-1.0,27,11778,2836,18084,554,0.0869565217391304,59,694,-140,1307,0.1018080875031609,0,0,0,0,1,0,1,0.0,2,0,0,0,0,0,0,0,0.0,484,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6788,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/Node.java,getJspAttributes,6350,open,"public JspAttribute[] getJspAttributes() {
            return jspAttrs;
        }"
tomcat-C-828,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/Node.java,2836,True,0,29,2884,40,0,522,1,152,0.4818854694195559,1570,536,0.3414012738853503,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,10,MALICIOUS_CODE,0.0481355932203389,EI_EXPOSE_REP2,18,2,3,0.0547019053472649,0.0061462814996926,0.0018438844499078,-1.0,0.1168831168831168,0.0079401118362157,0.1337579617834395,0.0441823027852679,-0.7012987012987013,0.0,0.0296610169491525,0.0441823027852679,-0.8709677419354839,-1.0,27,11778,2836,18084,554,0.0869565217391304,59,694,-140,1307,0.1018080875031609,0,0,0,0,1,0,1,0.0,2,0,0,0,0,0,0,0,0.0,484,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6788,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/Node.java,setJspAttributes,6350,open,"public void setJspAttributes(JspAttribute[] jspAttrs) {
            this.jspAttrs = jspAttrs;
        }"
tomcat-C-829,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/PageInfo.java,2836,True,26,84,2884,1,0,522,8,152,0.6336499321573948,444,157,0.3536036036036036,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,2,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,1,0.0547019053472649,0.0012292562999385,0.0006146281499692685,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-0.8709677419354839,-1.0,16,11778,2836,18084,554,0.0,59,694,-140,1307,0.1018080875031609,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1117,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7421,127,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/PageInfo.java,setBufferValue,6350,close,"public void setBufferValue(String value, Node n, ErrorDispatcher err)
        throws JasperException {

        if (""none"".equalsIgnoreCase(value))
            buffer = 0;
        else {
            if (value == null || !value.endsWith(""kb"")) {
                if (n == null) {
                    err.jspError(""jsp.error.page.invalid.buffer"");
                } else {
                    err.jspError(n, ""jsp.error.page.invalid.buffer"");
                }
            }
            try {
                @SuppressWarnings(""null"") // value can't be null here
                Integer k = new Integer(value.substring(0, value.length()-2));
                buffer = k.intValue() * 1024;
            } catch (NumberFormatException e) {
                if (n == null) {
                    err.jspError(""jsp.error.page.invalid.buffer"");
                } else {
                    err.jspError(n, ""jsp.error.page.invalid.buffer"");
                }
            }
        }

        bufferValue = value;
    }"
tomcat-C-851,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/ScriptingVariabler.java,2836,True,0,1,2884,4,0,522,1,152,0.2420382165605095,103,32,0.3106796116504854,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,2,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,20,3,1,0.0547019053472649,0.0012292562999385,0.0006146281499692685,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-0.8709677419354839,-1.0,16,11778,2836,18084,554,0.0,59,694,-140,1307,0.1018080875031609,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2207,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,8511,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/ScriptingVariabler.java,visit,6350,close,"@Override
        public void visit(Node.CustomTag n) throws JasperException {
            n.setCustomTagParent(parent);
            Node.CustomTag tmpParent = parent;
            parent = n;
            visitBody(n);
            parent = tmpParent;
            n.setNumCount(new Integer(count++));
        }"
tomcat-C-854,17776,org/apache/jasper/compiler,org/apache/jasper/compiler/SmapUtil.java,2643,True,0,4,2884,5,0,522,1,152,0.3212765957446808,543,69,0.1270718232044199,1.0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,2,EXPERIMENTAL,0.0061016949152542,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,20,2,2,0.0547019053472649,0.0012292562999385,0.0012292562999385,-1.0,0.0,0.0,0.0625,0.02490234375,-1.0,0.0,0.0007062146892655367,0.02490234375,-0.8709677419354839,-1.0,17,11778,2836,18084,554,0.0,59,694,-140,1307,0.1018080875031609,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,996,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7300,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/SmapUtil.java,install,6350,close,"static void install(File classFile, byte[] smap) throws IOException {
            File tmpFile = new File(classFile.getPath() + ""tmp"");
            SDEInstaller installer = new SDEInstaller(classFile, smap);
            installer.install(tmpFile);
            if (!classFile.delete()) {
                throw new IOException(""classFile.delete() failed"");
            }
            if (!tmpFile.renameTo(classFile)) {
                throw new IOException(""tmpFile.renameTo(classFile) failed"");
            }
        }"
tomcat-C-856,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/TagFileProcessor.java,2836,True,62,4,2884,4,0,522,10,152,0.8520625889046942,490,115,0.2346938775510204,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,6,STYLE,0.0481355932203389,REC_CATCH_EXCEPTION,17,2,2,0.0547019053472649,0.0036877688998156,0.0012292562999385,-1.0,0.1739130434782608,0.0044896030245746,0.1053719008264462,0.0543030765297002,-0.6086956521739131,0.0,0.0360169491525423,0.0543030765297002,-0.8709677419354839,-1.0,36,11778,2836,18084,554,0.0970178474935979,59,694,-140,1307,0.1018080875031609,0,0,0,0,23,0,33,0.0,57,0,1,0,0,10,0,0,0.0,250,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,6554,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/TagFileProcessor.java,loadTagFile,6350,open,"private Class<?> loadTagFile(Compiler compiler, String tagFilePath,
            TagInfo tagInfo, PageInfo parentPageInfo) throws JasperException {

        Jar tagJar = null;
        if (tagFilePath.startsWith(""/META-INF/"")) {
            try {
                tagJar = compiler.getCompilationContext().getTldResourcePath(
                            tagInfo.getTagLibrary().getURI()).getJar();
            } catch (IOException ioe) {
                throw new JasperException(ioe);
            }
        }
        String wrapperUri;
        if (tagJar == null) {
            wrapperUri = tagFilePath;
        } else {
            wrapperUri = tagJar.getURL(tagFilePath);
        }

        JspCompilationContext ctxt = compiler.getCompilationContext();
        JspRuntimeContext rctxt = ctxt.getRuntimeContext();

        synchronized (rctxt) {
            JspServletWrapper wrapper = rctxt.getWrapper(wrapperUri);
            if (wrapper == null) {
                wrapper = new JspServletWrapper(ctxt.getServletContext(), ctxt
                        .getOptions(), tagFilePath, tagInfo, ctxt
                        .getRuntimeContext(), tagJar);
                rctxt.addWrapper(wrapperUri, wrapper);

                // Use same classloader and classpath for compiling tag files
                wrapper.getJspEngineContext().setClassLoader(
                        ctxt.getClassLoader());
                wrapper.getJspEngineContext().setClassPath(ctxt.getClassPath());
            } else {
                // Make sure that JspCompilationContext gets the latest TagInfo
                // for the tag file. TagInfo instance was created the last
                // time the tag file was scanned for directives, and the tag
                // file may have been modified since then.
                wrapper.getJspEngineContext().setTagInfo(tagInfo);
            }

            Class<?> tagClazz;
            int tripCount = wrapper.incTripCount();
            try {
                if (tripCount > 0) {
                    // When tripCount is greater than zero, a circular
                    // dependency exists. The circularly dependent tag
                    // file is compiled in prototype mode, to avoid infinite
                    // recursion.

                    JspServletWrapper tempWrapper = new JspServletWrapper(ctxt
                            .getServletContext(), ctxt.getOptions(),
                            tagFilePath, tagInfo, ctxt.getRuntimeContext(),
                            tagJar);
                    // Use same classloader and classpath for compiling tag files
                    tempWrapper.getJspEngineContext().setClassLoader(
                            ctxt.getClassLoader());
                    tempWrapper.getJspEngineContext().setClassPath(ctxt.getClassPath());
                    tagClazz = tempWrapper.loadTagFilePrototype();
                    tempVector.add(tempWrapper.getJspEngineContext()
                            .getCompiler());
                } else {
                    tagClazz = wrapper.loadTagFile();
                }
            } finally {
                wrapper.decTripCount();
            }

            // Add the dependents for this tag file to its parent's
            // Dependent list. The only reliable dependency information
            // can only be obtained from the tag instance.
            try {
                Object tagIns = tagClazz.newInstance();
                if (tagIns instanceof JspSourceDependent) {
                    Iterator<Entry<String,Long>> iter = ((JspSourceDependent)
                            tagIns).getDependants().entrySet().iterator();
                    while (iter.hasNext()) {
                        Entry<String,Long> entry = iter.next();
                        parentPageInfo.addDependant(entry.getKey(),
                                entry.getValue());
                    }
                }
            } catch (Exception e) {
                // ignore errors
            }

            return tagClazz;
        }
    }"
tomcat-C-857,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/TagFileProcessor.java,2836,True,62,4,2884,4,0,522,10,152,0.8193456614509246,490,115,0.2346938775510204,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,6,STYLE,0.0216949152542372,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,20,3,2,0.0547019053472649,0.0036877688998156,0.0012292562999385,-1.0,0.1162790697674418,0.0032111952406706,0.1053719008264462,0.0543030765297002,-0.6976744186046512,0.0,0.0360169491525423,0.0543030765297002,-0.8709677419354839,-1.0,36,11778,2836,18084,554,0.0970178474935979,59,694,-140,1307,0.1018080875031609,0,0,0,0,23,0,33,0.0,57,0,1,0,0,10,0,0,0.0,250,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,6554,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/TagFileProcessor.java,loadTagFile,6350,open,"private Class<?> loadTagFile(Compiler compiler, String tagFilePath,
            TagInfo tagInfo, PageInfo parentPageInfo) throws JasperException {

        Jar tagJar = null;
        if (tagFilePath.startsWith(""/META-INF/"")) {
            try {
                tagJar = compiler.getCompilationContext().getTldResourcePath(
                            tagInfo.getTagLibrary().getURI()).getJar();
            } catch (IOException ioe) {
                throw new JasperException(ioe);
            }
        }
        String wrapperUri;
        if (tagJar == null) {
            wrapperUri = tagFilePath;
        } else {
            wrapperUri = tagJar.getURL(tagFilePath);
        }

        JspCompilationContext ctxt = compiler.getCompilationContext();
        JspRuntimeContext rctxt = ctxt.getRuntimeContext();

        synchronized (rctxt) {
            JspServletWrapper wrapper = rctxt.getWrapper(wrapperUri);
            if (wrapper == null) {
                wrapper = new JspServletWrapper(ctxt.getServletContext(), ctxt
                        .getOptions(), tagFilePath, tagInfo, ctxt
                        .getRuntimeContext(), tagJar);
                rctxt.addWrapper(wrapperUri, wrapper);

                // Use same classloader and classpath for compiling tag files
                wrapper.getJspEngineContext().setClassLoader(
                        ctxt.getClassLoader());
                wrapper.getJspEngineContext().setClassPath(ctxt.getClassPath());
            } else {
                // Make sure that JspCompilationContext gets the latest TagInfo
                // for the tag file. TagInfo instance was created the last
                // time the tag file was scanned for directives, and the tag
                // file may have been modified since then.
                wrapper.getJspEngineContext().setTagInfo(tagInfo);
            }

            Class<?> tagClazz;
            int tripCount = wrapper.incTripCount();
            try {
                if (tripCount > 0) {
                    // When tripCount is greater than zero, a circular
                    // dependency exists. The circularly dependent tag
                    // file is compiled in prototype mode, to avoid infinite
                    // recursion.

                    JspServletWrapper tempWrapper = new JspServletWrapper(ctxt
                            .getServletContext(), ctxt.getOptions(),
                            tagFilePath, tagInfo, ctxt.getRuntimeContext(),
                            tagJar);
                    // Use same classloader and classpath for compiling tag files
                    tempWrapper.getJspEngineContext().setClassLoader(
                            ctxt.getClassLoader());
                    tempWrapper.getJspEngineContext().setClassPath(ctxt.getClassPath());
                    tagClazz = tempWrapper.loadTagFilePrototype();
                    tempVector.add(tempWrapper.getJspEngineContext()
                            .getCompiler());
                } else {
                    tagClazz = wrapper.loadTagFile();
                }
            } finally {
                wrapper.decTripCount();
            }

            // Add the dependents for this tag file to its parent's
            // Dependent list. The only reliable dependency information
            // can only be obtained from the tag instance.
            try {
                Object tagIns = tagClazz.newInstance();
                if (tagIns instanceof JspSourceDependent) {
                    Iterator<Entry<String,Long>> iter = ((JspSourceDependent)
                            tagIns).getDependants().entrySet().iterator();
                    while (iter.hasNext()) {
                        Entry<String,Long> entry = iter.next();
                        parentPageInfo.addDependant(entry.getKey(),
                                entry.getValue());
                    }
                }
            } catch (Exception e) {
                // ignore errors
            }

            return tagClazz;
        }
    }"
tomcat-C-861,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/TagFileProcessor.java,2836,True,0,4,2884,4,0,522,1,152,0.6386913229018493,490,115,0.2346938775510204,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,6,PERFORMANCE,0.0027118644067796,WMI_WRONG_MAP_ITERATOR,18,2,1,0.0547019053472649,0.0036877688998156,0.0006146281499692685,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-0.4,0.0,0.0098870056497175,0.0755918430465237,-0.8709677419354839,-1.0,25,9815,1864,16121,554,0.0970178474935979,59,694,-140,1307,0.1018080875031609,0,0,0,0,23,0,33,0.0,57,0,1,0,0,10,0,0,0.0,250,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,6554,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/TagFileProcessor.java,postCheck,6350,close,"void postCheck() throws JasperException {
            // Check that var.name-from-attributes has valid values.
            Iterator<String> iter = nameFromTable.keySet().iterator();
            while (iter.hasNext()) {
                String nameFrom = iter.next();
                NameEntry nameEntry = nameTable.get(nameFrom);
                NameEntry nameFromEntry = nameFromTable.get(nameFrom);
                Node nameFromNode = nameFromEntry.getNode();
                if (nameEntry == null) {
                    err.jspError(nameFromNode,
                            ""jsp.error.tagfile.nameFrom.noAttribute"", nameFrom);
                } else {
                    Node node = nameEntry.getNode();
                    TagAttributeInfo tagAttr = nameEntry.getTagAttributeInfo();
                    if (!""java.lang.String"".equals(tagAttr.getTypeName())
                            || !tagAttr.isRequired()
                            || tagAttr.canBeRequestTime()) {
                        err.jspError(nameFromNode,
                                ""jsp.error.tagfile.nameFrom.badAttribute"",
                                nameFrom, Integer.toString(node.getStart()
                                        .getLineNumber()));
                    }
                }
            }
        }"
tomcat-C-862,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/TagPluginManager.java,2836,True,43,4,2884,3,12,522,8,152,0.2969924812030075,197,30,0.1522842639593908,0.3255813953488372,22,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,2,STYLE,0.0515254237288135,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,20,3,2,0.0547019053472649,0.0012292562999385,0.0012292562999385,1.0,0.1282051282051282,0.0034927679158448,0.1053719008264462,0.0543030765297002,-0.6923076923076923,0.0,0.0360169491525423,0.0543030765297002,-0.8709677419354839,1.0,6,2459,355,8765,554,0.2358489554862428,59,694,-140,1307,0.1018080875031609,0,0,0,0,66,0,36,0.0,112,0,10,0,0,-30,0,0,0.0,90,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6394,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/TagPluginManager.java,init,6350,open,"private void init(ErrorDispatcher err) throws JasperException {
        if (initialized)
            return;

        String blockExternalString = ctxt.getInitParameter(
                Constants.XML_BLOCK_EXTERNAL_INIT_PARAM);
        boolean blockExternal;
        if (blockExternalString == null) {
            blockExternal = Constants.IS_SECURITY_ENABLED;
        } else {
            blockExternal = Boolean.parseBoolean(blockExternalString);
        }

        TagPluginParser parser = new TagPluginParser(ctxt, blockExternal);

        try {
            Enumeration<URL> urls =
                    ctxt.getClassLoader().getResources(META_INF_JASPER_TAG_PLUGINS_XML);
            if (urls != null) {
                while (urls.hasMoreElements()) {
                    URL url = urls.nextElement();
                    parser.parse(url);
                }
            }

            URL url = ctxt.getResource(TAG_PLUGINS_XML);
            if (url != null) {
                parser.parse(url);
            }
        } catch (IOException | SAXException e) {
            throw new JasperException(e);
        }

        Map<String, String> plugins = parser.getPlugins();
        tagPlugins = new HashMap<>(plugins.size());
        for (Map.Entry<String, String> entry : plugins.entrySet()) {
            try {
                String tagClass = entry.getKey();
                String pluginName = entry.getValue();
                Class<?> pluginClass = ctxt.getClassLoader().loadClass(pluginName);
                TagPlugin plugin = (TagPlugin) pluginClass.newInstance();
                tagPlugins.put(tagClass, plugin);
            } catch (Exception e) {
                err.jspError(e);
            }
        }
        initialized = true;
    }"
tomcat-C-863,18084,org/apache/jasper/compiler,org/apache/jasper/compiler/TagPluginManager.java,2836,True,43,4,2884,3,0,522,8,152,0.3872180451127819,197,30,0.1522842639593908,1.0,22,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,89,2,STYLE,0.0481355932203389,REC_CATCH_EXCEPTION,20,3,2,0.0547019053472649,0.0012292562999385,0.0012292562999385,1.0,0.1739130434782608,0.0044896030245746,0.1053719008264462,0.0543030765297002,-0.6086956521739131,0.0,0.0360169491525423,0.0543030765297002,-0.8709677419354839,1.0,20,11778,2836,18084,554,0.2358489554862428,59,694,-140,1307,0.1018080875031609,0,0,0,0,66,0,36,0.0,112,0,10,0,0,-30,0,0,0.0,90,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6394,18084,46,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/compiler/TagPluginManager.java,init,6350,open,"private void init(ErrorDispatcher err) throws JasperException {
        if (initialized)
            return;

        String blockExternalString = ctxt.getInitParameter(
                Constants.XML_BLOCK_EXTERNAL_INIT_PARAM);
        boolean blockExternal;
        if (blockExternalString == null) {
            blockExternal = Constants.IS_SECURITY_ENABLED;
        } else {
            blockExternal = Boolean.parseBoolean(blockExternalString);
        }

        TagPluginParser parser = new TagPluginParser(ctxt, blockExternal);

        try {
            Enumeration<URL> urls =
                    ctxt.getClassLoader().getResources(META_INF_JASPER_TAG_PLUGINS_XML);
            if (urls != null) {
                while (urls.hasMoreElements()) {
                    URL url = urls.nextElement();
                    parser.parse(url);
                }
            }

            URL url = ctxt.getResource(TAG_PLUGINS_XML);
            if (url != null) {
                parser.parse(url);
            }
        } catch (IOException | SAXException e) {
            throw new JasperException(e);
        }

        Map<String, String> plugins = parser.getPlugins();
        tagPlugins = new HashMap<>(plugins.size());
        for (Map.Entry<String, String> entry : plugins.entrySet()) {
            try {
                String tagClass = entry.getKey();
                String pluginName = entry.getValue();
                Class<?> pluginClass = ctxt.getClassLoader().loadClass(pluginName);
                TagPlugin plugin = (TagPlugin) pluginClass.newInstance();
                tagPlugins.put(tagClass, plugin);
            } catch (Exception e) {
                err.jspError(e);
            }
        }
        initialized = true;
    }"
tomcat-C-886,10820,org/apache/jasper/runtime,org/apache/jasper/runtime/JspRuntimeLibrary.java,801,True,103,44,1160,2,0,250,37,39,0.456071076011846,817,114,0.1395348837209302,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,31,17,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,7,0.0190534726490473,0.0104486785494775,0.0043023970497848,-0.7142857142857143,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-0.5757575757575758,-0.4117647058823529,20,11778,2836,18084,2,0.0109890109890109,0,3,-1,5,0.0012844298558584,0,0,0,0,2,0,1,0.0,3,0,0,0,0,-1,0,0,0.0,274,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6578,18084,274,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/runtime/JspRuntimeLibrary.java,createTypedArray,6578,close,"public static void createTypedArray(String propertyName,
                                        Object bean,
                                        Method method,
                                        String[] values,
                                        Class<?> t,
                                        Class<?> propertyEditorClass)
                throws JasperException {

        try {
            if (propertyEditorClass != null) {
                Object[] tmpval = new Integer[values.length];
                for (int i=0; i<values.length; i++) {
                    tmpval[i] = getValueFromBeanInfoPropertyEditor(
                            t, propertyName, values[i], propertyEditorClass);
                }
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(Integer.class)) {
                Integer []tmpval = new Integer[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] =  new Integer (values[i]);
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(Byte.class)) {
                Byte[] tmpval = new Byte[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = new Byte (values[i]);
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(Boolean.class)) {
                Boolean[] tmpval = new Boolean[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = Boolean.valueOf(values[i]);
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(Short.class)) {
                Short[] tmpval = new Short[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = new Short (values[i]);
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(Long.class)) {
                Long[] tmpval = new Long[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = new Long (values[i]);
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(Double.class)) {
                Double[] tmpval = new Double[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = new Double (values[i]);
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(Float.class)) {
                Float[] tmpval = new Float[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = new Float (values[i]);
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(Character.class)) {
                Character[] tmpval = new Character[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = Character.valueOf(values[i].charAt(0));
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(int.class)) {
                int []tmpval = new int[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = Integer.parseInt (values[i]);
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(byte.class)) {
                byte[] tmpval = new byte[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = Byte.parseByte (values[i]);
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(boolean.class)) {
                boolean[] tmpval = new boolean[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = (Boolean.valueOf(values[i])).booleanValue();
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(short.class)) {
                short[] tmpval = new short[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = Short.parseShort (values[i]);
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(long.class)) {
                long[] tmpval = new long[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = Long.parseLong (values[i]);
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(double.class)) {
                double[] tmpval = new double[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = Double.valueOf(values[i]).doubleValue();
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(float.class)) {
                float[] tmpval = new float[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = Float.valueOf(values[i]).floatValue();
                method.invoke (bean, new Object[] {tmpval});
            } else if (t.equals(char.class)) {
                char[] tmpval = new char[values.length];
                for (int i = 0 ; i < values.length; i++)
                    tmpval[i] = values[i].charAt(0);
                method.invoke (bean, new Object[] {tmpval});
            } else {
                Object[] tmpval = new Integer[values.length];
                for (int i=0; i<values.length; i++) {
                    tmpval[i] =
                        getValueFromPropertyEditorManager(
                                            t, propertyName, values[i]);
                }
                method.invoke (bean, new Object[] {tmpval});
            }
        } catch (Exception ex) {
            Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
            ExceptionUtils.handleThrowable(thr);
            throw new JasperException (""error in invoking method"", ex);
        }
    }"
tomcat-C-887,10820,org/apache/jasper/runtime,org/apache/jasper/runtime/JspRuntimeLibrary.java,801,True,32,44,1160,2,12,250,8,39,0.7729516288252715,817,114,0.1395348837209302,0.1875,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,31,17,STYLE,0.0515254237288135,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,18,2,2,0.0190534726490473,0.0104486785494775,0.0012292562999385,0.0,0.1282051282051282,0.0034927679158448,0.1053719008264462,0.0543030765297002,-0.6923076923076923,0.0,0.0360169491525423,0.0543030765297002,-0.5757575757575758,-0.4117647058823529,20,11778,2836,18084,2,0.0109890109890109,0,3,-1,5,0.0012844298558584,0,0,0,0,2,0,1,0.0,3,0,0,0,0,-1,0,0,0.0,274,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6578,18084,274,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/runtime/JspRuntimeLibrary.java,getReadMethod,6578,open,"public static Method getReadMethod(Class<?> beanClass, String prop)
            throws JasperException {

        Method method = null;
        Class<?> type = null;
        try {
            java.beans.BeanInfo info
                = java.beans.Introspector.getBeanInfo(beanClass);
            if ( info != null ) {
                java.beans.PropertyDescriptor pd[]
                    = info.getPropertyDescriptors();
                for (int i = 0 ; i < pd.length ; i++) {
                    if ( pd[i].getName().equals(prop) ) {
                        method = pd[i].getReadMethod();
                        type   = pd[i].getPropertyType();
                        break;
                    }
                }
            } else {
                // just in case introspection silently fails.
                throw new JasperException(
                    Localizer.getMessage(""jsp.error.beans.nobeaninfo"",
                                         beanClass.getName()));
            }
        } catch (Exception ex) {
            throw new JasperException (ex);
        }
        if (method == null) {
            if (type == null) {
                throw new JasperException(
                    Localizer.getMessage(""jsp.error.beans.noproperty"", prop,
                                         beanClass.getName()));
            } else {
                throw new JasperException(
                    Localizer.getMessage(""jsp.error.beans.nomethod"", prop,
                                         beanClass.getName()));
            }
        }

        return method;
    }"
tomcat-C-895,10820,org/apache/jasper/runtime,org/apache/jasper/runtime/JspRuntimeLibrary.java,801,True,11,44,1160,2,8,250,4,39,0.5518262586377097,817,114,0.1395348837209302,0.7272727272727273,3,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,31,17,PERFORMANCE,0.0054237288135593,SBSC_USE_STRINGBUFFER_CONCATENATION,18,2,1,0.0190534726490473,0.0104486785494775,0.0006146281499692685,-1.0,0.1111111111111111,0.0075973409306742,0.0848484848484848,0.0755918430465237,-0.7777777777777778,0.0,0.0098870056497175,0.0755918430465237,-0.5757575757575758,-0.4117647058823529,20,11778,2836,18084,2,0.0109890109890109,0,3,-1,5,0.0012844298558584,0,0,0,0,2,0,1,0.0,3,0,0,0,0,-1,0,0,0.0,274,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6578,18084,274,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/runtime/JspRuntimeLibrary.java,escapeQueryString,6578,close,"public static String escapeQueryString(String unescString) {
    if ( unescString == null )
        return null;

    String escString    = """";
    String shellSpChars = ""&;`'\""|*?~<>^()[]{}$\\\n"";

    for(int index=0; index<unescString.length(); index++) {
        char nextChar = unescString.charAt(index);

        if( shellSpChars.indexOf(nextChar) != -1 )
        escString += ""\\"";

        escString += nextChar;
    }
    return escString;
    }"
tomcat-C-896,18084,org/apache/jasper/runtime,org/apache/jasper/runtime/PageContextImpl.java,2836,True,25,45,1160,14,20,250,5,39,0.7246376811594203,717,104,0.1450488145048814,0.72,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,31,5,STYLE,0.0108474576271186,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,20,3,1,0.0190534726490473,0.0030731407498463,0.0006146281499692685,-1.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-0.5757575757575758,-0.6666666666666666,39,11778,2836,18084,2,0.0069930069930069,0,3,-1,5,0.0012844298558584,0,0,0,0,1,0,1,0.0,2,0,0,0,0,0,0,0,0.0,274,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6578,18084,274,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/runtime/PageContextImpl.java,forward,6578,open,"@Override
    public void forward(final String relativeUrlPath) throws ServletException,
            IOException {
        if (SecurityUtil.isPackageProtectionEnabled()) {
            try {
                AccessController.doPrivileged(
                        new PrivilegedExceptionAction<Void>() {
                    @Override
                    public Void run() throws Exception {
                        doForward(relativeUrlPath);
                        return null;
                    }
                });
            } catch (PrivilegedActionException e) {
                Exception ex = e.getException();
                if (ex instanceof IOException) {
                    throw (IOException) ex;
                } else {
                    throw (ServletException) ex;
                }
            }
        } else {
            doForward(relativeUrlPath);
        }
    }"
tomcat-C-897,18084,org/apache/jasper/runtime,org/apache/jasper/runtime/PageContextImpl.java,2836,True,26,45,1160,14,20,250,6,39,0.855072463768116,717,104,0.1450488145048814,0.7307692307692307,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,31,5,STYLE,0.0108474576271186,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,20,3,1,0.0190534726490473,0.0030731407498463,0.0006146281499692685,-1.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-0.5757575757575758,-0.6666666666666666,39,11778,2836,18084,2,0.0069930069930069,0,3,-1,5,0.0012844298558584,0,0,0,0,1,0,1,0.0,2,0,0,0,0,0,0,0,0.0,274,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6578,18084,274,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/runtime/PageContextImpl.java,handlePageException,6578,open,"@Override
    public void handlePageException(Exception ex) throws IOException,
            ServletException {
        // Should never be called since handleException() called with a
        // Throwable in the generated servlet.
        handlePageException((Throwable) ex);
    }"
tomcat-C-903,18084,org/apache/jasper/servlet,org/apache/jasper/servlet/JspCServletContext.java,2836,True,30,55,230,1,8,107,13,10,0.575177304964539,370,188,0.5081081081081081,0.2833333333333333,10,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,9,1,STYLE,0.0061016949152542,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,13,2,1,0.0055316533497234,0.0006146281499692685,0.0006146281499692685,-1.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,35,11778,2836,18084,70,0.1619915848527349,12,28,42,110,0.0799190190470296,9,3,0,12,4,6,17,0.1935483870967742,21,17,0,5,12,13,34,12,0.0954764553207267,19,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6323,18084,19,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/servlet/JspCServletContext.java,getResourcePaths,6323,close,"@Override
    public Set<String> getResourcePaths(String path) {

        Set<String> thePaths = new HashSet<>();
        if (!path.endsWith(""/""))
            path += ""/"";
        String basePath = getRealPath(path);
        if (basePath == null)
            return (thePaths);
        File theBaseDir = new File(basePath);
        if (!theBaseDir.exists() || !theBaseDir.isDirectory())
            return (thePaths);
        String theFiles[] = theBaseDir.list();
        for (int i = 0; i < theFiles.length; i++) {
            File testFile = new File(basePath + File.separator + theFiles[i]);
            if (testFile.isFile())
                thePaths.add(path + theFiles[i]);
            else if (testFile.isDirectory())
                thePaths.add(path + theFiles[i] + ""/"");
        }
        return (thePaths);

    }"
tomcat-C-907,18084,org/apache/jasper/servlet,org/apache/jasper/servlet/JspServletWrapper.java,2836,True,35,22,230,1,0,107,8,10,0.9847198641765704,394,130,0.3299492385786802,1.0,35,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,9,4,STYLE,0.0481355932203389,REC_CATCH_EXCEPTION,20,3,1,0.0055316533497234,0.002458512599877,0.0006146281499692685,-1.0,0.1739130434782608,0.0044896030245746,0.1053719008264462,0.0543030765297002,-0.6086956521739131,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,53,11778,2836,18084,70,0.0053763440860215,12,28,42,110,0.0799190190470296,0,0,0,0,3,0,3,0.0,6,17,0,5,12,0,34,12,0.0954764553207267,368,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,1,0,0,0,0,6672,18084,19,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/servlet/JspServletWrapper.java,handleJspException,6323,open,"protected JasperException handleJspException(Exception ex) {
        try {
            Throwable realException = ex;
            if (ex instanceof ServletException) {
                realException = ((ServletException) ex).getRootCause();
            }

            // First identify the stack frame in the trace that represents the JSP
            StackTraceElement[] frames = realException.getStackTrace();
            StackTraceElement jspFrame = null;

            for (int i=0; i<frames.length; ++i) {
                if ( frames[i].getClassName().equals(this.getServlet().getClass().getName()) ) {
                    jspFrame = frames[i];
                    break;
                }
            }


            if (jspFrame == null ||
                    this.ctxt.getCompiler().getPageNodes() == null) {
                // If we couldn't find a frame in the stack trace corresponding
                // to the generated servlet class or we don't have a copy of the
                // parsed JSP to hand, we can't really add anything
                return new JasperException(ex);
            }

            int javaLineNumber = jspFrame.getLineNumber();
            JavacErrorDetail detail = ErrorDispatcher.createJavacError(
                    jspFrame.getMethodName(),
                    this.ctxt.getCompiler().getPageNodes(),
                    null,
                    javaLineNumber,
                    ctxt);

            // If the line number is less than one we couldn't find out
            // where in the JSP things went wrong
            int jspLineNumber = detail.getJspBeginLineNumber();
            if (jspLineNumber < 1) {
                throw new JasperException(ex);
            }

            if (options.getDisplaySourceFragment()) {
                return new JasperException(Localizer.getMessage
                        (""jsp.exception"", detail.getJspFileName(),
                                """" + jspLineNumber) + Constants.NEWLINE +
                                Constants.NEWLINE + detail.getJspExtract() +
                                Constants.NEWLINE + Constants.NEWLINE +
                                ""Stacktrace:"", ex);

            }

            return new JasperException(Localizer.getMessage
                    (""jsp.exception"", detail.getJspFileName(),
                            """" + jspLineNumber), ex);
        } catch (Exception je) {
            // If anything goes wrong, just revert to the original behaviour
            if (ex instanceof JasperException) {
                return (JasperException) ex;
            }
            return new JasperException(ex);
        }
    }"
tomcat-C-908,7234,org/apache/jasper/servlet,org/apache/jasper/servlet/TldScanner.java,144,True,0,12,230,4,0,107,1,10,0.88,255,88,0.3450980392156862,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,9,1,STYLE,0.0061016949152542,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,13,2,1,0.0055316533497234,0.0006146281499692685,0.0006146281499692685,0.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-1.0,0.0,3,123,34,6429,70,0.2304772694639793,12,28,42,110,0.0799190190470296,8,2,12,22,13,6,34,0.3793103448275862,59,17,12,5,12,21,34,12,0.0954764553207267,22,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,6326,18084,19,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/servlet/TldScanner.java,visitFile,6323,close,"@Override
                public FileVisitResult visitFile(Path file,
                                                 BasicFileAttributes attrs)
                        throws IOException {
                    if (!file.getFileName().toString()
                            .toLowerCase(Locale.ENGLISH).endsWith(TLD_EXT)) {
                        return FileVisitResult.CONTINUE;
                    }

                    String subPath = file.subpath(
                            filePath.getNameCount(), file.getNameCount()).toString();
                    if ('/' != File.separatorChar) {
                        subPath = subPath.replace(File.separatorChar, '/');
                    }
                    String resourcePath = webappPath + ""/"" + subPath;

                    try {
                        URL url = file.toUri().toURL();
                        TldResourcePath path = new TldResourcePath(url, resourcePath);
                        parseTld(path);
                        tldFound = true;
                    } catch (SAXException e) {
                        throw new IOException(e);
                    }
                    return FileVisitResult.CONTINUE;
                }"
tomcat-C-910,18084,org/apache/jasper/xmlparser,org/apache/jasper/xmlparser/XMLEncodingDetector.java,2836,True,236,24,1870,2,20,84,61,11,0.8418884664131813,964,483,0.5010373443983402,0.3135593220338983,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,6,5,BAD_PRACTICE,0.0040677966101694,ES_COMPARING_STRINGS_WITH_EQ,14,3,2,0.0036877688998156,0.0030731407498463,0.0012292562999385,-1.0,0.0,0.0,0.128099173553719,0.106556527989236,-1.0,0.0,0.0218926553672316,0.106556527989236,0.2,0.0,23,11778,2836,18084,3,0.005181347150259,0,3,0,6,0.0005757052389176742,0,0,0,0,3,0,3,0.0,6,0,0,0,0,0,0,0,0.0,368,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,6672,18084,368,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/xmlparser/XMLEncodingDetector.java,scanXMLDeclOrTextDecl,6672,open,"private void scanXMLDeclOrTextDecl(boolean scanningTextDecl)
        throws IOException, JasperException {

        // scan decl
        scanXMLDeclOrTextDecl(scanningTextDecl, fStrings);

        // pseudo-attribute values
        String encodingPseudoAttr = fStrings[1];

        // set encoding on reader
        if (encodingPseudoAttr != null) {
            isEncodingSetInProlog = true;
            encoding = encodingPseudoAttr;
        }
    }"
tomcat-C-911,18084,org/apache/jasper/xmlparser,org/apache/jasper/xmlparser/XMLEncodingDetector.java,2836,True,50,24,1870,2,16,84,13,11,0.6150190114068441,964,483,0.5010373443983402,0.32,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,6,5,CORRECTNESS,0.0020338983050847,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,11,2,1,0.0036877688998156,0.0030731407498463,0.0006146281499692685,1.0,0.3333333333333333,0.0246913580246913,0.1304347826086956,0.0559756353707204,0.0,0.0,0.0021186440677966,0.0559756353707204,0.2,0.0,23,11778,2836,18084,3,0.005181347150259,0,3,0,6,0.0005757052389176742,0,0,0,0,3,0,3,0.0,6,0,0,0,0,0,0,0,0.0,368,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,6672,18084,368,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/jasper/xmlparser/XMLEncodingDetector.java,load,6672,open,"final boolean load(int offset, boolean changeEntity)
        throws IOException {

        // read characters
        int count = fCurrentEntity.reader.read(fCurrentEntity.ch, offset,
                DEFAULT_XMLDECL_BUFFER_SIZE);

        // reset count and position
        boolean entityChanged = false;
        if (count != -1) {
            if (count != 0) {
                fCurrentEntity.count = count + offset;
                fCurrentEntity.position = offset;
            }
        }

        // end of this entity
        else {
            fCurrentEntity.count = offset;
            fCurrentEntity.position = offset;
            entityChanged = true;
            if (changeEntity) {
                endEntity();
                if (fCurrentEntity == null) {
                    throw new EOFException();
                }
                // handle the trailing edges
                if (fCurrentEntity.position == fCurrentEntity.count) {
                    load(0, false);
                }
            }
        }

        return entityChanged;

    }"
tomcat-C-931,18084,org/apache/naming/factory,org/apache/naming/factory/BeanFactory.java,2836,True,119,1,538,1,32,13,29,15,0.71484375,139,77,0.5539568345323741,0.4621848739495798,82,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,11,6,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,6,0.0067609096496619,0.0036877688998156,0.0036877688998156,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,10,11778,2836,18084,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,4367,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,10671,18084,974,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/naming/factory/BeanFactory.java,getObjectInstance,7278,close,"@Override
    public Object getObjectInstance(Object obj, Name name, Context nameCtx,
                                    Hashtable<?,?> environment)
        throws NamingException {

        if (obj instanceof ResourceRef) {

            try {

                Reference ref = (Reference) obj;
                String beanClassName = ref.getClassName();
                Class<?> beanClass = null;
                ClassLoader tcl =
                    Thread.currentThread().getContextClassLoader();
                if (tcl != null) {
                    try {
                        beanClass = tcl.loadClass(beanClassName);
                    } catch(ClassNotFoundException e) {
                    }
                } else {
                    try {
                        beanClass = Class.forName(beanClassName);
                    } catch(ClassNotFoundException e) {
                        e.printStackTrace();
                    }
                }
                if (beanClass == null) {
                    throw new NamingException
                        (""Class not found: "" + beanClassName);
                }

                BeanInfo bi = Introspector.getBeanInfo(beanClass);
                PropertyDescriptor[] pda = bi.getPropertyDescriptors();

                Object bean = beanClass.newInstance();

                Enumeration<RefAddr> e = ref.getAll();
                while (e.hasMoreElements()) {

                    RefAddr ra = e.nextElement();
                    String propName = ra.getType();

                    if (propName.equals(Constants.FACTORY) ||
                        propName.equals(""scope"") || propName.equals(""auth"") ||
                        propName.equals(""singleton"")) {
                        continue;
                    }

                    String value = (String)ra.getContent();

                    Object[] valueArray = new Object[1];

                    int i = 0;
                    for (i = 0; i<pda.length; i++) {

                        if (pda[i].getName().equals(propName)) {

                            Class<?> propType = pda[i].getPropertyType();

                            if (propType.equals(String.class)) {
                                valueArray[0] = value;
                            } else if (propType.equals(Character.class)
                                       || propType.equals(char.class)) {
                                valueArray[0] =
                                    Character.valueOf(value.charAt(0));
                            } else if (propType.equals(Byte.class)
                                       || propType.equals(byte.class)) {
                                valueArray[0] = new Byte(value);
                            } else if (propType.equals(Short.class)
                                       || propType.equals(short.class)) {
                                valueArray[0] = new Short(value);
                            } else if (propType.equals(Integer.class)
                                       || propType.equals(int.class)) {
                                valueArray[0] = new Integer(value);
                            } else if (propType.equals(Long.class)
                                       || propType.equals(long.class)) {
                                valueArray[0] = new Long(value);
                            } else if (propType.equals(Float.class)
                                       || propType.equals(float.class)) {
                                valueArray[0] = new Float(value);
                            } else if (propType.equals(Double.class)
                                       || propType.equals(double.class)) {
                                valueArray[0] = new Double(value);
                            } else if (propType.equals(Boolean.class)
                                       || propType.equals(boolean.class)) {
                                valueArray[0] = Boolean.valueOf(value);
                            } else {
                                throw new NamingException
                                    (""String conversion for property type '""
                                     + propType.getName() + ""' not available"");
                            }

                            Method setProp = pda[i].getWriteMethod();
                            if (setProp != null) {
                                setProp.invoke(bean, valueArray);
                            } else {
                                throw new NamingException
                                    (""Write not allowed for property: ""
                                     + propName);
                            }

                            break;

                        }

                    }

                    if (i == pda.length) {
                        throw new NamingException
                            (""No set method found for property: "" + propName);
                    }

                }

                return bean;

            } catch (java.beans.IntrospectionException ie) {
                NamingException ne = new NamingException(ie.getMessage());
                ne.setRootCause(ie);
                throw ne;
            } catch (java.lang.IllegalAccessException iae) {
                NamingException ne = new NamingException(iae.getMessage());
                ne.setRootCause(iae);
                throw ne;
            } catch (java.lang.InstantiationException ie2) {
                NamingException ne = new NamingException(ie2.getMessage());
                ne.setRootCause(ie2);
                throw ne;
            } catch (java.lang.reflect.InvocationTargetException ite) {
                Throwable cause = ite.getCause();
                if (cause instanceof ThreadDeath) {
                    throw (ThreadDeath) cause;
                }
                if (cause instanceof VirtualMachineError) {
                    throw (VirtualMachineError) cause;
                }
                NamingException ne = new NamingException(ite.getMessage());
                ne.setRootCause(ite);
                throw ne;
            }

        } else {
            return null;
        }

    }"
tomcat-C-941,14692,org/apache/tomcat/jdbc/naming,org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java,1474,True,109,3,118,1,28,3,27,1,0.5110132158590308,160,42,0.2625,0.2018348623853211,70,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,2,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,2,0.0012292562999385,0.0012292562999385,0.0012292562999385,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,8,8386,1474,14692,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2852,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,9156,18084,2852,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java,setProperty,9156,close,"@SuppressWarnings(""null"") // setPropertyMethodVoid can't be null when used
    private static boolean setProperty(Object o, String name, String value) {
        if (log.isDebugEnabled())
            log.debug(""IntrospectionUtils: setProperty("" +
                    o.getClass() + "" "" + name + ""="" + value + "")"");

        String setter = ""set"" + capitalize(name);

        try {
            Method methods[] = o.getClass().getMethods();
            Method setPropertyMethodVoid = null;
            Method setPropertyMethodBool = null;

            // First, the ideal case - a setFoo( String ) method
            for (int i = 0; i < methods.length; i++) {
                Class<?> paramT[] = methods[i].getParameterTypes();
                if (setter.equals(methods[i].getName()) && paramT.length == 1
                        && ""java.lang.String"".equals(paramT[0].getName())) {

                    methods[i].invoke(o, new Object[] { value });
                    return true;
                }
            }

            // Try a setFoo ( int ) or ( boolean )
            for (int i = 0; i < methods.length; i++) {
                boolean ok = true;
                if (setter.equals(methods[i].getName())
                        && methods[i].getParameterTypes().length == 1) {

                    // match - find the type and invoke it
                    Class<?> paramType = methods[i].getParameterTypes()[0];
                    Object params[] = new Object[1];

                    // Try a setFoo ( int )
                    if (""java.lang.Integer"".equals(paramType.getName())
                            || ""int"".equals(paramType.getName())) {
                        try {
                            params[0] = new Integer(value);
                        } catch (NumberFormatException ex) {
                            ok = false;
                        }
                    // Try a setFoo ( long )
                    }else if (""java.lang.Long"".equals(paramType.getName())
                                || ""long"".equals(paramType.getName())) {
                            try {
                                params[0] = new Long(value);
                            } catch (NumberFormatException ex) {
                                ok = false;
                            }

                        // Try a setFoo ( boolean )
                    } else if (""java.lang.Boolean"".equals(paramType.getName())
                            || ""boolean"".equals(paramType.getName())) {
                        params[0] = Boolean.valueOf(value);

                        // Try a setFoo ( InetAddress )
                    } else if (""java.net.InetAddress"".equals(paramType
                            .getName())) {
                        try {
                            params[0] = InetAddress.getByName(value);
                        } catch (UnknownHostException exc) {
                            if (log.isDebugEnabled())
                                log.debug(""IntrospectionUtils: Unable to resolve host name:"" + value);
                            ok = false;
                        }

                        // Unknown type
                    } else {
                        if (log.isDebugEnabled())
                            log.debug(""IntrospectionUtils: Unknown type "" +
                                    paramType.getName());
                    }

                    if (ok) {
                        methods[i].invoke(o, params);
                        return true;
                    }
                }

                // save ""setProperty"" for later
                if (""setProperty"".equals(methods[i].getName())) {
                    if (methods[i].getReturnType()==Boolean.TYPE){
                        setPropertyMethodBool = methods[i];
                    }else {
                        setPropertyMethodVoid = methods[i];
                    }

                }
            }

            // Ok, no setXXX found, try a setProperty(""name"", ""value"")
            if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {
                Object params[] = new Object[2];
                params[0] = name;
                params[1] = value;
                if (setPropertyMethodBool != null) {
                    try {
                        return ((Boolean) setPropertyMethodBool.invoke(o, params)).booleanValue();
                    }catch (IllegalArgumentException biae) {
                        //the boolean method had the wrong
                        //parameter types. lets try the other
                        if (setPropertyMethodVoid!=null) {
                            setPropertyMethodVoid.invoke(o, params);
                            return true;
                        }else {
                            throw biae;
                        }
                    }
                } else {
                    setPropertyMethodVoid.invoke(o, params);
                    return true;
                }
            }

        } catch (IllegalArgumentException ex2) {
            log.warn(""IAE "" + o + "" "" + name + "" "" + value, ex2);
        } catch (SecurityException ex1) {
            if (log.isDebugEnabled())
                log.debug(""IntrospectionUtils: SecurityException for "" +
                        o.getClass() + "" "" + name + ""="" + value + "")"", ex1);
        } catch (IllegalAccessException iae) {
            if (log.isDebugEnabled())
                log.debug(""IntrospectionUtils: IllegalAccessException for "" +
                        o.getClass() + "" "" + name + ""="" + value + "")"", iae);
        } catch (InvocationTargetException ie) {
            Throwable cause = ie.getCause();
            if (cause instanceof ThreadDeath) {
                throw (ThreadDeath) cause;
            }
            if (cause instanceof VirtualMachineError) {
                throw (VirtualMachineError) cause;
            }
            if (log.isDebugEnabled())
                log.debug(""IntrospectionUtils: InvocationTargetException for "" +
                        o.getClass() + "" "" + name + ""="" + value + "")"", ie);
        }
        return false;
    }"
tomcat-C-1065,17776,org/apache/tomcat/util,org/apache/tomcat/util/IntrospectionUtils.java,2643,True,31,11,12,2,16,36,9,4,0.9118942731277532,353,53,0.1501416430594901,0.2580645161290322,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,6,6,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,1,0.0036877688998156,0.0036877688998156,0.0006146281499692685,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,36,11778,2836,18084,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2132,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,8436,18084,889,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/IntrospectionUtils.java,convert,7193,close,"public static Object convert(String object, Class<?> paramType) {
        Object result = null;
        if (""java.lang.String"".equals(paramType.getName())) {
            result = object;
        } else if (""java.lang.Integer"".equals(paramType.getName())
                || ""int"".equals(paramType.getName())) {
            try {
                result = new Integer(object);
            } catch (NumberFormatException ex) {
            }
            // Try a setFoo ( boolean )
        } else if (""java.lang.Boolean"".equals(paramType.getName())
                || ""boolean"".equals(paramType.getName())) {
            result = Boolean.valueOf(object);

            // Try a setFoo ( InetAddress )
        } else if (""java.net.InetAddress"".equals(paramType
                .getName())) {
            try {
                result = InetAddress.getByName(object);
            } catch (UnknownHostException exc) {
                if (log.isDebugEnabled())
                    log.debug(""IntrospectionUtils: Unable to resolve host name:"" +
                            object);
            }

            // Unknown type
        } else {
            if (log.isDebugEnabled())
                log.debug(""IntrospectionUtils: Unknown type "" +
                        paramType.getName());
        }
        if (result == null) {
            throw new IllegalArgumentException(""Can't convert argument: "" + object);
        }
        return result;
    }"
tomcat-C-1066,17776,org/apache/tomcat/util,org/apache/tomcat/util/IntrospectionUtils.java,2643,True,103,11,12,2,28,36,25,4,0.1828193832599119,353,53,0.1501416430594901,0.2135922330097087,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,6,6,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,2,0.0036877688998156,0.0036877688998156,0.0012292562999385,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,36,11778,2836,18084,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2132,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,8436,18084,889,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/IntrospectionUtils.java,setProperty,7193,close,"public static boolean setProperty(Object o, String name, String value) {
        return setProperty(o,name,value,true);
    }"
tomcat-C-1068,17776,org/apache/tomcat/util,org/apache/tomcat/util/IntrospectionUtils.java,2643,True,63,11,12,2,0,36,28,4,0.7209985315712187,353,53,0.1501416430594901,1.0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,6,6,STYLE,0.0013559322033898,NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE,13,2,2,0.0036877688998156,0.0036877688998156,0.0012292562999385,-1.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,36,11778,2836,18084,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2132,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,8436,18084,889,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/IntrospectionUtils.java,findMethod,7193,open,"@SuppressWarnings(""null"") // Neither params nor methodParams can be null
                              // when comparing their lengths
    public static Method findMethod(Class<?> c, String name,
            Class<?> params[]) {
        Method methods[] = findMethods(c);
        if (methods == null)
            return null;
        for (int i = 0; i < methods.length; i++) {
            if (methods[i].getName().equals(name)) {
                Class<?> methodParams[] = methods[i].getParameterTypes();
                if (methodParams == null)
                    if (params == null || params.length == 0)
                        return methods[i];
                if (params == null)
                    if (methodParams == null || methodParams.length == 0)
                        return methods[i];
                if (params.length != methodParams.length)
                    continue;
                boolean found = true;
                for (int j = 0; j < params.length; j++) {
                    if (params[j] != methodParams[j]) {
                        found = false;
                        break;
                    }
                }
                if (found)
                    return methods[i];
            }
        }
        return null;
    }"
tomcat-C-1069,17776,org/apache/tomcat/util,org/apache/tomcat/util/IntrospectionUtils.java,2643,True,42,11,12,2,0,36,19,4,0.7158590308370044,353,53,0.1501416430594901,1.0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,6,6,STYLE,0.0515254237288135,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,18,2,2,0.0036877688998156,0.0036877688998156,0.0012292562999385,-1.0,0.1282051282051282,0.0034927679158448,0.1053719008264462,0.0543030765297002,-0.6923076923076923,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,36,11778,2836,18084,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2132,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,8436,18084,889,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/IntrospectionUtils.java,findMethod,7193,open,"@SuppressWarnings(""null"") // Neither params nor methodParams can be null
                              // when comparing their lengths
    public static Method findMethod(Class<?> c, String name,
            Class<?> params[]) {
        Method methods[] = findMethods(c);
        if (methods == null)
            return null;
        for (int i = 0; i < methods.length; i++) {
            if (methods[i].getName().equals(name)) {
                Class<?> methodParams[] = methods[i].getParameterTypes();
                if (methodParams == null)
                    if (params == null || params.length == 0)
                        return methods[i];
                if (params == null)
                    if (methodParams == null || methodParams.length == 0)
                        return methods[i];
                if (params.length != methodParams.length)
                    continue;
                boolean found = true;
                for (int j = 0; j < params.length; j++) {
                    if (params[j] != methodParams[j]) {
                        found = false;
                        break;
                    }
                }
                if (found)
                    return methods[i];
            }
        }
        return null;
    }"
tomcat-C-1070,17776,org/apache/tomcat/util,org/apache/tomcat/util/IntrospectionUtils.java,2643,True,7,11,12,2,0,36,2,4,0.7004405286343612,353,53,0.1501416430594901,1.0,3,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,6,6,STYLE,0.0515254237288135,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,18,2,1,0.0036877688998156,0.0036877688998156,0.0006146281499692685,-1.0,0.1282051282051282,0.0034927679158448,0.1053719008264462,0.0543030765297002,-0.6923076923076923,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,36,11778,2836,18084,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2132,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,8436,18084,889,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/IntrospectionUtils.java,findMethod,7193,open,"@SuppressWarnings(""null"") // Neither params nor methodParams can be null
                              // when comparing their lengths
    public static Method findMethod(Class<?> c, String name,
            Class<?> params[]) {
        Method methods[] = findMethods(c);
        if (methods == null)
            return null;
        for (int i = 0; i < methods.length; i++) {
            if (methods[i].getName().equals(name)) {
                Class<?> methodParams[] = methods[i].getParameterTypes();
                if (methodParams == null)
                    if (params == null || params.length == 0)
                        return methods[i];
                if (params == null)
                    if (methodParams == null || methodParams.length == 0)
                        return methods[i];
                if (params.length != methodParams.length)
                    continue;
                boolean found = true;
                for (int j = 0; j < params.length; j++) {
                    if (params[j] != methodParams[j]) {
                        found = false;
                        break;
                    }
                }
                if (found)
                    return methods[i];
            }
        }
        return null;
    }"
tomcat-C-1145,7351,org/apache/tomcat/util/descriptor/web,org/apache/tomcat/util/descriptor/web/FragmentJarScannerCallback.java,166,True,308,7,1083,1,8,488,45,56,0.8336192109777014,109,32,0.2935779816513761,0.0643166357452071,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,25,1,EXPERIMENTAL,0.0040677966101694,OBL_UNSATISFIED_OBLIGATION,20,2,1,0.0153657037492317,0.0006146281499692685,0.0006146281499692685,0.0,0.0,0.0,0.0625,0.02490234375,-1.0,0.0,0.0007062146892655367,0.02490234375,0.0,0.0,4,1045,166,7351,14,0.0629674362428578,0,8,6,22,0.0019808528343185,0,0,0,0,5,0,10,0.0,15,0,0,0,0,5,0,0,0.0,94,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,6398,18084,90,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/descriptor/web/FragmentJarScannerCallback.java,scan,6394,close,"@Override
    public void scan(JarURLConnection jarConn, String webappPath, boolean isWebapp)
            throws IOException {

        URL url = jarConn.getURL();
        URL resourceURL = jarConn.getJarFileURL();
        Jar jar = null;
        InputStream is = null;
        WebXml fragment = new WebXml();
        fragment.setWebappJar(isWebapp);
        fragment.setDelegate(delegate);

        try {
            // Only web application JARs are checked for web-fragment.xml
            // files.
            // web-fragment.xml files don't need to be parsed if they are never
            // going to be used.
            if (isWebapp && parseRequired) {
                jar = JarFactory.newInstance(url);
                is = jar.getInputStream(FRAGMENT_LOCATION);
            }

            if (is == null) {
                // If there is no web.xml, normal JAR no impact on
                // distributable
                fragment.setDistributable(true);
            } else {
                InputSource source = new InputSource(
                        ""jar:"" + resourceURL.toString() + ""!/"" + FRAGMENT_LOCATION);
                source.setByteStream(is);
                if (!webXmlParser.parseWebXml(source, fragment, true)) {
                    ok = false;
                }
            }
        } finally {
            if (jar != null) {
                jar.close();
            }
            fragment.setURL(url);
            if (fragment.getName() == null) {
                fragment.setName(fragment.getURL().toString());
            }
            fragment.setJarName(extractJarFileName(url));
            fragments.put(fragment.getName(), fragment);
        }
    }"
tomcat-C-1158,18084,org/apache/tomcat/util/http,org/apache/tomcat/util/http/FastHttpDateFormat.java,2836,True,20,6,666,1,8,87,8,14,0.5807860262008734,117,63,0.5384615384615384,0.1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,6,2,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,1,0.0036877688998156,0.0012292562999385,0.0006146281499692685,0.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-0.5555555555555556,0.0,13,11778,2836,18084,6,0.0,2,23,-17,31,0.0679824561403508,0,0,0,0,0,0,0,0.0,0,6,0,23,2,0,31,-17,0.0679824561403508,2412,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,8716,18084,15,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/http/FastHttpDateFormat.java,formatDate,6319,close,"public static final String formatDate
        (long value, DateFormat threadLocalformat) {

        Long longValue = new Long(value);
        String cachedDate = formatCache.get(longValue);
        if (cachedDate != null) {
            return cachedDate;
        }

        String newDate = null;
        Date dateValue = new Date(value);
        if (threadLocalformat != null) {
            newDate = threadLocalformat.format(dateValue);
            updateFormatCache(longValue, newDate);
        } else {
            synchronized (format) {
                newDate = format.format(dateValue);
            }
            updateFormatCache(longValue, newDate);
        }
        return newDate;
    }"
tomcat-C-1159,18084,org/apache/tomcat/util/http,org/apache/tomcat/util/http/FastHttpDateFormat.java,2836,True,14,6,666,1,8,87,4,14,0.8602620087336245,117,63,0.5384615384615384,0.9285714285714286,3,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,6,2,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,1,0.0036877688998156,0.0012292562999385,0.0006146281499692685,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-0.5555555555555556,0.0,13,11778,2836,18084,6,0.0,2,23,-17,31,0.0679824561403508,0,0,0,0,0,0,0,0.0,0,6,0,23,2,0,31,-17,0.0679824561403508,2412,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,8716,18084,15,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/http/FastHttpDateFormat.java,internalParseDate,6319,close,"private static final Long internalParseDate
        (String value, DateFormat[] formats) {
        Date date = null;
        for (int i = 0; (date == null) && (i < formats.length); i++) {
            try {
                date = formats[i].parse(value);
            } catch (ParseException e) {
                // Ignore
            }
        }
        if (date == null) {
            return null;
        }
        return new Long(date.getTime());
    }"
tomcat-C-1160,14886,org/apache/tomcat/util/http/fileupload,org/apache/tomcat/util/http/fileupload/ByteArrayOutputStream.java,1505,True,3,10,553,1,8,132,1,36,0.9924812030075189,136,114,0.8382352941176471,0.6666666666666666,2,6,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,16,1,I18N,0.0359322033898305,DM_DEFAULT_ENCODING,19,1,1,0.0098340503995082,0.0006146281499692685,0.0006146281499692685,-1.0,0.1428571428571428,0.0612244897959183,0.1403508771929824,0.0024630812620523,-0.6785714285714286,0.0,0.0056497175141242,0.0024630812620523,-0.3333333333333333,-1.0,5,8580,1505,14886,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1973,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,8277,18084,708,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/http/fileupload/ByteArrayOutputStream.java,toString,7012,open,"@Override
    public String toString() {
        return new String(toByteArray());
    }"
tomcat-C-1161,17983,org/apache/tomcat/util/http/fileupload,org/apache/tomcat/util/http/fileupload/DeferredFileOutputStream.java,2763,True,18,8,553,1,8,132,3,36,0.6809954751131222,65,121,1.8615384615384616,0.3055555555555556,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,16,2,EXPERIMENTAL,0.0061016949152542,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,20,2,1,0.0098340503995082,0.0012292562999385,0.0006146281499692685,-1.0,0.0,0.0,0.0625,0.02490234375,-1.0,0.0,0.0007062146892655367,0.02490234375,-0.3333333333333333,-1.0,9,11677,2763,17983,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1973,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,8277,18084,708,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/http/fileupload/DeferredFileOutputStream.java,thresholdReached,7012,open,"@Override
    protected void thresholdReached() throws IOException
    {
        if (prefix != null) {
            outputFile = File.createTempFile(prefix, suffix, directory);
        }
        FileOutputStream fos = new FileOutputStream(outputFile);
        memoryOutputStream.writeTo(fos);
        currentOutputStream = fos;
        memoryOutputStream = null;
    }"
tomcat-C-1162,17983,org/apache/tomcat/util/http/fileupload,org/apache/tomcat/util/http/fileupload/DeferredFileOutputStream.java,2763,True,6,8,553,1,8,132,2,36,0.8461538461538461,65,121,1.8615384615384616,0.8333333333333334,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,16,2,STYLE,0.0359322033898305,PZLA_PREFER_ZERO_LENGTH_ARRAYS,20,3,1,0.0098340503995082,0.0012292562999385,0.0006146281499692685,-1.0,0.0625,0.0018310546875,0.1053719008264462,0.0543030765297002,-0.7916666666666666,0.0,0.0360169491525423,0.0543030765297002,-0.3333333333333333,-1.0,9,11677,2763,17983,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1973,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,8277,18084,708,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/http/fileupload/DeferredFileOutputStream.java,getData,7012,open,"public byte[] getData()
    {
        if (memoryOutputStream != null)
        {
            return memoryOutputStream.toByteArray();
        }
        return null;
    }"
tomcat-C-1178,13398,org/apache/tomcat/util/http/fileupload/disk,org/apache/tomcat/util/http/fileupload/disk/DiskFileItem.java,1248,True,27,24,197,1,12,31,4,3,0.4677165354330708,263,313,1.1901140684410647,0.4444444444444444,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,5,5,BAD_PRACTICE,0.0013559322033898,RR_NOT_CHECKED,16,2,2,0.0030731407498463,0.0030731407498463,0.0012292562999385,-1.0,0.0,0.0,0.128099173553719,0.106556527989236,-1.0,0.0,0.0218926553672316,0.106556527989236,-0.6666666666666666,-0.6666666666666666,16,7092,1248,13398,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1514,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7818,18084,1514,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/http/fileupload/disk/DiskFileItem.java,get,7818,close,"@Override
    public byte[] get() {
        if (isInMemory()) {
            if (cachedContent == null) {
                cachedContent = dfos.getData();
            }
            return cachedContent;
        }

        byte[] fileData = new byte[(int) getSize()];
        InputStream fis = null;

        try {
            fis = new BufferedInputStream(new FileInputStream(dfos.getFile()));
            fis.read(fileData);
        } catch (IOException e) {
            fileData = null;
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException e) {
                    // ignore
                }
            }
        }

        return fileData;
    }"
tomcat-C-1179,13398,org/apache/tomcat/util/http/fileupload/disk,org/apache/tomcat/util/http/fileupload/disk/DiskFileItem.java,1248,True,7,24,197,1,12,31,2,3,0.7007874015748031,263,313,1.1901140684410647,0.7142857142857143,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,5,5,BAD_PRACTICE,0.0142372881355932,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,16,2,1,0.0030731407498463,0.0030731407498463,0.0006146281499692685,-1.0,0.1428571428571428,0.0038265306122448,0.128099173553719,0.106556527989236,-0.7142857142857143,0.0,0.0218926553672316,0.106556527989236,-0.6666666666666666,-0.6666666666666666,16,7092,1248,13398,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1514,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7818,18084,1514,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/http/fileupload/disk/DiskFileItem.java,delete,7818,open,"@Override
    public void delete() {
        cachedContent = null;
        File outputFile = getStoreLocation();
        if (outputFile != null && outputFile.exists()) {
            outputFile.delete();
        }
    }"
tomcat-C-1180,13398,org/apache/tomcat/util/http/fileupload/disk,org/apache/tomcat/util/http/fileupload/disk/DiskFileItem.java,1248,True,6,24,197,1,12,31,2,3,0.8771653543307086,263,313,1.1901140684410647,0.6666666666666666,3,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,5,5,BAD_PRACTICE,0.0142372881355932,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,16,2,1,0.0030731407498463,0.0030731407498463,0.0006146281499692685,-1.0,0.1428571428571428,0.0038265306122448,0.128099173553719,0.106556527989236,-0.7142857142857143,0.0,0.0218926553672316,0.106556527989236,-0.6666666666666666,-0.6666666666666666,16,7092,1248,13398,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,1514,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7818,18084,1514,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/http/fileupload/disk/DiskFileItem.java,finalize,7818,open,"@Override
    protected void finalize() {
        File outputFile = dfos.getFile();

        if (outputFile != null && outputFile.exists()) {
            outputFile.delete();
        }
    }"
tomcat-C-1205,13256,org/apache/tomcat/util/modeler,org/apache/tomcat/util/modeler/Registry.java,1215,True,24,24,522,1,12,136,6,13,0.7115646258503401,418,232,0.5550239234449761,0.625,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,21,7,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,2,0.0129071911493546,0.0043023970497848,0.0012292562999385,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,36,11767,2834,18073,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2142,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,8446,18084,1949,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/modeler/Registry.java,convertValue,8253,close,"public Object convertValue(String type, String value)
    {
        Object objValue=value;

        if( type==null || ""java.lang.String"".equals( type )) {
            // string is default
            objValue=value;
        } else if( ""javax.management.ObjectName"".equals( type ) ||
                ""ObjectName"".equals( type )) {
            try {
                objValue=new ObjectName( value );
            } catch (MalformedObjectNameException e) {
                return null;
            }
        } else if( ""java.lang.Integer"".equals( type ) ||
                ""int"".equals( type )) {
            objValue=new Integer( value );
        } else if( ""java.lang.Long"".equals( type ) ||
                ""long"".equals( type )) {
            objValue=new Long( value );
        } else if( ""java.lang.Boolean"".equals( type ) ||
                ""boolean"".equals( type )) {
            objValue=Boolean.valueOf( value );
        }
        return objValue;
    }"
tomcat-C-1207,13256,org/apache/tomcat/util/modeler,org/apache/tomcat/util/modeler/Registry.java,1215,True,25,24,522,1,8,136,6,13,0.4353741496598639,418,232,0.5550239234449761,0.92,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,21,7,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,1,0.0129071911493546,0.0043023970497848,0.0006146281499692685,-1.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-1.0,-1.0,36,11767,2834,18073,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2142,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,8446,18084,1949,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/modeler/Registry.java,getId,8253,close,"@Override
    public synchronized int getId( String domain, String name) {
        if( domain==null) {
            domain="""";
        }
        Hashtable<String,Integer> domainTable = idDomains.get(domain);
        if( domainTable == null ) {
            domainTable = new Hashtable<>();
            idDomains.put( domain, domainTable);
        }
        if( name==null ) {
            name="""";
        }
        Integer i = domainTable.get(name);

        if( i!= null ) {
            return i.intValue();
        }

        int id[] = ids.get(domain);
        if( id == null ) {
            id=new int[1];
            ids.put( domain, id);
        }
        int code=id[0]++;
        domainTable.put( name, new Integer( code ));
        return code;
    }"
tomcat-C-1209,13256,org/apache/tomcat/util/modeler,org/apache/tomcat/util/modeler/Registry.java,1215,True,301,24,522,1,10,136,64,13,0.7797862001943634,418,232,0.5550239234449761,0.0884929024463908,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,21,7,EXPERIMENTAL,0.0040677966101694,OBL_UNSATISFIED_OBLIGATION,20,2,2,0.0129071911493546,0.0043023970497848,0.0012292562999385,-1.0,0.0,0.0,0.0625,0.02490234375,-1.0,0.0,0.0007062146892655367,0.02490234375,-1.0,-1.0,36,11767,2834,18073,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2142,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,8446,18084,1949,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/modeler/Registry.java,load,8253,open,"public List<ObjectName> load( String sourceType, Object source,
            String param) throws Exception {
        if( log.isTraceEnabled()) {
            log.trace(""load "" + source );
        }
        String location=null;
        String type=null;
        Object inputsource=null;

        if( source instanceof URL ) {
            URL url=(URL)source;
            location=url.toString();
            type=param;
            inputsource=url.openStream();
            if (sourceType == null && location.endsWith("".xml"")) {
                sourceType = ""MbeansDescriptorsDigesterSource"";
            }
        } else if( source instanceof File ) {
            location=((File)source).getAbsolutePath();
            inputsource=new FileInputStream((File)source);
            type=param;
            if (sourceType == null && location.endsWith("".xml"")) {
                sourceType = ""MbeansDescriptorsDigesterSource"";
            }
        } else if( source instanceof InputStream ) {
            type=param;
            inputsource=source;
        } else if( source instanceof Class<?> ) {
            location=((Class<?>)source).getName();
            type=param;
            inputsource=source;
            if( sourceType== null ) {
                sourceType=""MbeansDescriptorsIntrospectionSource"";
            }
        }

        if( sourceType==null ) {
            sourceType=""MbeansDescriptorsDigesterSource"";
        }
        ModelerSource ds=getModelerSource(sourceType);
        List<ObjectName> mbeans =
            ds.loadDescriptors(this, type, inputsource);

        return mbeans;
    }"
tomcat-C-1210,13256,org/apache/tomcat/util/modeler,org/apache/tomcat/util/modeler/Registry.java,1215,True,27,24,522,1,8,136,8,13,0.9360544217687076,418,232,0.5550239234449761,0.6296296296296297,10,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,21,7,STYLE,0.0006779661016949153,RV_CHECK_FOR_POSITIVE_INDEXOF,20,3,1,0.0129071911493546,0.0043023970497848,0.0006146281499692685,-1.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,-1.0,-1.0,36,11767,2834,18073,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2142,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,8446,18084,1949,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/modeler/Registry.java,findDescriptor,8253,open,"private void findDescriptor(Class<?> beanClass, String type) {
        if( type==null ) {
            type=beanClass.getName();
        }
        ClassLoader classLoader=null;
        if( beanClass!=null ) {
            classLoader=beanClass.getClassLoader();
        }
        if( classLoader==null ) {
            classLoader=Thread.currentThread().getContextClassLoader();
        }
        if( classLoader==null ) {
            classLoader=this.getClass().getClassLoader();
        }

        String className=type;
        String pkg=className;
        while( pkg.indexOf( ""."") > 0 ) {
            int lastComp=pkg.lastIndexOf( ""."");
            if( lastComp <= 0 ) return;
            pkg=pkg.substring(0, lastComp);
            if( searchedPaths.get( pkg ) != null ) {
                return;
            }
            loadDescriptors(pkg, classLoader);
        }
        return;
    }"
tomcat-C-1211,18073,org/apache/tomcat/util/modeler/modules,org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java,2834,True,27,5,7,1,12,16,4,3,0.8695652173913043,136,19,0.1397058823529411,0.2592592592592592,9,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,4,1,STYLE,0.0149152542372881,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,17,2,1,0.002458512599877,0.0006146281499692685,0.0006146281499692685,-1.0,0.16,0.0042,0.1053719008264462,0.0543030765297002,-0.64,0.0,0.0360169491525423,0.0543030765297002,-0.6,-1.0,10,4691,831,10997,0,0.0,0,0,0,0,0.0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,2986,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,9290,18084,2986,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java,execute,9290,open,"public void execute() throws Exception {
        if (registry == null) {
            registry = Registry.getRegistry(null, null);
        }

        InputStream stream = (InputStream) source;

        if (digester == null) {
            digester = createDigester();
        }
        ArrayList<ManagedBean> loadedMbeans = new ArrayList<>();

        synchronized (digester) {

            // Process the input file to configure our registry
            try {
                // Push our registry object onto the stack
                digester.push(loadedMbeans);
                digester.parse(stream);
            } catch (Exception e) {
                log.error(""Error digesting Registry data"", e);
                throw e;
            } finally {
                digester.reset();
            }

        }
        Iterator<ManagedBean> iter = loadedMbeans.iterator();
        while (iter.hasNext()) {
            registry.addManagedBean(iter.next());
        }
    }"
tomcat-C-1229,14929,org/apache/tomcat/util/net,org/apache/tomcat/util/net/AprEndpoint.java,1513,True,0,68,875,13,0,478,1,57,0.875,1563,621,0.3973128598848368,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,69,38,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,1,0.0424093423478795,0.0233558696988322,0.0006146281499692685,0.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,-0.4893617021276595,0.1578947368421052,194,10544,2274,16850,206,0.2899810359692774,90,167,39,463,0.0704208989212435,0,0,0,0,50,0,104,0.0,204,0,50,0,0,54,0,0,0.0,42,1,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,6346,1550,30,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/net/AprEndpoint.java,remove,6334,close,"public long remove(long socket) {
            long result = 0;
            for (int i = 0; i < size; i++) {
                if (sockets[i] == socket) {
                    result = timeouts[i];
                    sockets[i] = sockets[size - 1];
                    timeouts[i] = timeouts[size - 1];
                    size--;
                    break;
                }
            }
            return result;
        }"
tomcat-C-1231,14929,org/apache/tomcat/util/net,org/apache/tomcat/util/net/AprEndpoint.java,1513,True,0,68,875,13,0,478,1,57,0.8633064516129032,1563,621,0.3973128598848368,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,69,38,STYLE,0.0128813559322033,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,20,3,5,0.0424093423478795,0.0233558696988322,0.0030731407498463,1.0,0.2222222222222222,0.0054012345679012,0.1053719008264462,0.0543030765297002,-0.5555555555555556,0.0,0.0360169491525423,0.0543030765297002,-0.4893617021276595,0.1578947368421052,72,2424,349,8730,206,0.2899810359692774,90,167,39,463,0.0704208989212435,0,0,0,0,50,0,104,0.0,204,0,50,0,0,54,0,0,0.0,42,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,6346,1550,30,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/net/AprEndpoint.java,add,6334,open,"public void add(long socket, long timeout) {
            sockets[size] = socket;
            timeouts[size] = timeout;
            size++;
        }"
tomcat-C-1273,8137,org/apache/tomcat/websocket,org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java,281,True,0,7,725,7,0,231,1,56,0.972972972972973,412,48,0.116504854368932,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,15,4,PERFORMANCE,0.0366101694915254,DM_NUMBER_CTOR,18,2,2,0.009219422249539,0.002458512599877,0.0012292562999385,0.0,0.0,0.0,0.0848484848484848,0.0755918430465237,-1.0,0.0,0.0098870056497175,0.0755918430465237,0.3333333333333333,0.0,9,1826,280,8132,80,0.0,74,48,32,202,0.057169709118564,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,876,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7180,18084,45,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java,get,6349,close,"@Override
        public T get() throws InterruptedException, ExecutionException {
            completionLatch.await();
            if (throwable != null) {
                throw new ExecutionException(throwable);
            }
            return result;
        }"
tomcat-C-1275,8137,org/apache/tomcat/websocket,org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java,281,True,0,7,725,7,0,231,1,56,0.6,412,48,0.116504854368932,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,15,4,STYLE,0.0481355932203389,REC_CATCH_EXCEPTION,17,2,2,0.009219422249539,0.002458512599877,0.0012292562999385,0.0,0.1739130434782608,0.0044896030245746,0.1053719008264462,0.0543030765297002,-0.6086956521739131,0.0,0.0360169491525423,0.0543030765297002,0.3333333333333333,0.0,9,1826,280,8132,80,0.0,74,48,32,202,0.057169709118564,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,876,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7180,18084,45,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java,run,6349,open,"@Override
        public void run() {
            long written = 0;

            try {
                for (int i = offset; i < offset + length; i++) {
                    ByteBuffer src = srcs[i];
                    while (src.hasRemaining()) {
                        socketWriteBuffer.clear();

                        // Encrypt the data
                        SSLEngineResult r = sslEngine.wrap(src, socketWriteBuffer);
                        written += r.bytesConsumed();
                        Status s = r.getStatus();

                        if (s == Status.OK || s == Status.BUFFER_OVERFLOW) {
                            // Need to write out the bytes and may need to read from
                            // the source again to empty it
                        } else {
                            // Status.BUFFER_UNDERFLOW - only happens on unwrap
                            // Status.CLOSED - unexpected
                            throw new IllegalStateException(sm.getString(
                                    ""asyncChannelWrapperSecure.statusWrap""));
                        }

                        // Check for tasks
                        if (r.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {
                            Runnable runnable = sslEngine.getDelegatedTask();
                            while (runnable != null) {
                                runnable.run();
                                runnable = sslEngine.getDelegatedTask();
                            }
                        }

                        socketWriteBuffer.flip();

                        // Do the write
                        int toWrite = r.bytesProduced();
                        while (toWrite > 0) {
                            Future<Integer> f =
                                    socketChannel.write(socketWriteBuffer);
                            Integer socketWrite = f.get();
                            toWrite -= socketWrite.intValue();
                        }
                    }
                }


                if (writing.compareAndSet(true, false)) {
                    future.complete(Long.valueOf(written));
                } else {
                    future.fail(new IllegalStateException(sm.getString(
                            ""asyncChannelWrapperSecure.wrongStateWrite"")));
                }
            } catch (Exception e) {
                future.fail(e);
            }
        }"
tomcat-C-1276,8137,org/apache/tomcat/websocket,org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java,281,True,0,7,725,7,0,231,1,56,0.4216216216216216,412,48,0.116504854368932,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,15,4,STYLE,0.0481355932203389,REC_CATCH_EXCEPTION,20,3,2,0.009219422249539,0.002458512599877,0.0012292562999385,0.0,0.1739130434782608,0.0044896030245746,0.1053719008264462,0.0543030765297002,-0.6086956521739131,0.0,0.0360169491525423,0.0543030765297002,0.3333333333333333,0.0,9,1826,280,8132,80,0.0,74,48,32,202,0.057169709118564,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,876,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7180,18084,45,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java,run,6349,open,"@Override
        public void run() {
            long written = 0;

            try {
                for (int i = offset; i < offset + length; i++) {
                    ByteBuffer src = srcs[i];
                    while (src.hasRemaining()) {
                        socketWriteBuffer.clear();

                        // Encrypt the data
                        SSLEngineResult r = sslEngine.wrap(src, socketWriteBuffer);
                        written += r.bytesConsumed();
                        Status s = r.getStatus();

                        if (s == Status.OK || s == Status.BUFFER_OVERFLOW) {
                            // Need to write out the bytes and may need to read from
                            // the source again to empty it
                        } else {
                            // Status.BUFFER_UNDERFLOW - only happens on unwrap
                            // Status.CLOSED - unexpected
                            throw new IllegalStateException(sm.getString(
                                    ""asyncChannelWrapperSecure.statusWrap""));
                        }

                        // Check for tasks
                        if (r.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {
                            Runnable runnable = sslEngine.getDelegatedTask();
                            while (runnable != null) {
                                runnable.run();
                                runnable = sslEngine.getDelegatedTask();
                            }
                        }

                        socketWriteBuffer.flip();

                        // Do the write
                        int toWrite = r.bytesProduced();
                        while (toWrite > 0) {
                            Future<Integer> f =
                                    socketChannel.write(socketWriteBuffer);
                            Integer socketWrite = f.get();
                            toWrite -= socketWrite.intValue();
                        }
                    }
                }


                if (writing.compareAndSet(true, false)) {
                    future.complete(Long.valueOf(written));
                } else {
                    future.fail(new IllegalStateException(sm.getString(
                            ""asyncChannelWrapperSecure.wrongStateWrite"")));
                }
            } catch (Exception e) {
                future.fail(e);
            }
        }"
tomcat-C-1282,8698,org/apache/tomcat/websocket,org/apache/tomcat/websocket/WsWebSocketContainer.java,348,True,93,30,725,3,0,231,16,56,0.432590855803048,600,102,0.17,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,15,4,STYLE,0.0257627118644067,DLS_DEAD_LOCAL_STORE,15,1,1,0.009219422249539,0.002458512599877,0.0006146281499692685,0.0,0.131578947368421,0.0035708102493074,0.1053719008264462,0.0543030765297002,-0.6842105263157895,0.0,0.0360169491525423,0.0543030765297002,0.3333333333333333,0.0,50,2337,341,8643,80,0.4268292682926829,74,48,32,202,0.057169709118564,0,0,0,0,1,0,13,0.0,35,0,21,0,0,12,0,0,0.0,95,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,6399,18084,45,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/websocket/WsWebSocketContainer.java,connectToServer,6349,close,"@Override
    public Session connectToServer(Object pojo, URI path)
            throws DeploymentException {

        ClientEndpoint annotation =
                pojo.getClass().getAnnotation(ClientEndpoint.class);
        if (annotation == null) {
            throw new DeploymentException(
                    sm.getString(""wsWebSocketContainer.missingAnnotation"",
                            pojo.getClass().getName()));
        }

        Endpoint ep = new PojoEndpointClient(pojo, annotation.decoders());

        Class<? extends ClientEndpointConfig.Configurator> configuratorClazz =
                pojo.getClass().getAnnotation(
                        ClientEndpoint.class).configurator();

        ClientEndpointConfig.Configurator configurator = null;
        if (!ClientEndpointConfig.Configurator.class.equals(
                configuratorClazz)) {
            try {
                configurator = configuratorClazz.newInstance();
            } catch (InstantiationException | IllegalAccessException e) {
                throw new DeploymentException(sm.getString(
                        ""wsWebSocketContainer.defaultConfiguratorFail""), e);
            }
        }

        ClientEndpointConfig config = ClientEndpointConfig.Builder.create().
                configurator(configurator).
                decoders(Arrays.asList(annotation.decoders())).
                encoders(Arrays.asList(annotation.encoders())).
                build();
        return connectToServer(ep, config, path);
    }"
tomcat-C-1284,8698,org/apache/tomcat/websocket,org/apache/tomcat/websocket/WsWebSocketContainer.java,348,True,36,30,725,3,0,231,6,56,0.8253223915592028,600,102,0.17,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,15,4,STYLE,0.0481355932203389,REC_CATCH_EXCEPTION,20,3,1,0.009219422249539,0.002458512599877,0.0006146281499692685,0.0,0.1739130434782608,0.0044896030245746,0.1053719008264462,0.0543030765297002,-0.6086956521739131,0.0,0.0360169491525423,0.0543030765297002,0.3333333333333333,0.0,15,1826,280,8132,80,0.4268292682926829,74,48,32,202,0.057169709118564,0,0,0,0,1,0,13,0.0,35,0,21,0,0,12,0,0,0.0,95,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,6399,18084,45,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/websocket/WsWebSocketContainer.java,createSSLEngine,6349,open,"private SSLEngine createSSLEngine(Map<String,Object> userProperties)
            throws DeploymentException {

        try {
            // See if a custom SSLContext has been provided
            SSLContext sslContext =
                    (SSLContext) userProperties.get(SSL_CONTEXT_PROPERTY);

            if (sslContext == null) {
                // Create the SSL Context
                sslContext = SSLContext.getInstance(""TLS"");

                // Trust store
                String sslTrustStoreValue =
                        (String) userProperties.get(SSL_TRUSTSTORE_PROPERTY);
                if (sslTrustStoreValue != null) {
                    String sslTrustStorePwdValue = (String) userProperties.get(
                            SSL_TRUSTSTORE_PWD_PROPERTY);
                    if (sslTrustStorePwdValue == null) {
                        sslTrustStorePwdValue = SSL_TRUSTSTORE_PWD_DEFAULT;
                    }

                    File keyStoreFile = new File(sslTrustStoreValue);
                    KeyStore ks = KeyStore.getInstance(""JKS"");
                    try (InputStream is = new FileInputStream(keyStoreFile)) {
                        ks.load(is, sslTrustStorePwdValue.toCharArray());
                    }

                    TrustManagerFactory tmf = TrustManagerFactory.getInstance(
                            TrustManagerFactory.getDefaultAlgorithm());
                    tmf.init(ks);

                    sslContext.init(null, tmf.getTrustManagers(), null);
                } else {
                    sslContext.init(null, null, null);
                }
            }

            SSLEngine engine = sslContext.createSSLEngine();

            String sslProtocolsValue =
                    (String) userProperties.get(SSL_PROTOCOLS_PROPERTY);
            if (sslProtocolsValue != null) {
                engine.setEnabledProtocols(sslProtocolsValue.split("",""));
            }

            engine.setUseClientMode(true);

            return engine;
        } catch (Exception e) {
            throw new DeploymentException(sm.getString(
                    ""wsWebSocketContainer.sslEngineFail""), e);
        }
    }"
tomcat-C-1285,8698,org/apache/tomcat/websocket,org/apache/tomcat/websocket/WsWebSocketContainer.java,348,True,17,30,725,3,12,231,4,56,0.5662368112543963,600,102,0.17,0.2352941176470588,12,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,15,4,STYLE,0.0061016949152542,UC_USELESS_OBJECT,17,2,1,0.009219422249539,0.002458512599877,0.0006146281499692685,0.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,0.3333333333333333,0.0,11,1357,190,7663,80,0.4268292682926829,74,48,32,202,0.057169709118564,0,0,0,0,1,0,13,0.0,35,0,21,0,0,12,0,0,0.0,95,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,6399,18084,45,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/websocket/WsWebSocketContainer.java,generateExtensionHeaders,6349,close,"private List<String> generateExtensionHeaders(List<Extension> extensions) {
        List<String> result = new ArrayList<>(extensions.size());
        for (Extension extension : extensions) {
            StringBuilder header = new StringBuilder();
            header.append(extension.getName());
            for (Extension.Parameter param : extension.getParameters()) {
                header.append(';');
                header.append(param.getName());
                String value = param.getValue();
                if (value != null && value.length() > 0) {
                    header.append('=');
                    header.append(value);
                }
            }
        }
        return result;
    }"
tomcat-C-1286,8344,org/apache/tomcat/websocket/pojo,org/apache/tomcat/websocket/pojo/PojoEndpointServer.java,299,True,16,1,149,1,8,53,1,17,0.6388888888888888,38,21,0.5526315789473685,0.125,11,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,STYLE,0.0223728813559322,BC_UNCONFIRMED_CAST,20,3,1,0.0012292562999385,0.0006146281499692685,0.0006146281499692685,0.0,0.032258064516129,0.0009755463059313216,0.1053719008264462,0.0543030765297002,-0.935483870967742,0.0,0.0360169491525423,0.0543030765297002,0.0,0.0,2,2038,299,8344,4,0.0,0,2,2,6,0.0119047619047619,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0.0,936,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,7240,18084,43,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/websocket/pojo/PojoEndpointServer.java,onOpen,6347,open,"@Override
    public void onOpen(Session session, EndpointConfig endpointConfig) {

        ServerEndpointConfig sec = (ServerEndpointConfig) endpointConfig;

        Object pojo;
        try {
            pojo = sec.getConfigurator().getEndpointInstance(
                    sec.getEndpointClass());
        } catch (InstantiationException e) {
            throw new IllegalArgumentException(sm.getString(
                    ""pojoEndpointServer.getPojoInstanceFail"",
                    sec.getEndpointClass().getName()), e);
        }
        setPojo(pojo);

        @SuppressWarnings(""unchecked"")
        Map<String,String> pathParameters =
                (Map<String, String>) sec.getUserProperties().get(
                        POJO_PATH_PARAM_KEY);
        setPathParameters(pathParameters);

        PojoMethodMapping methodMapping =
                (PojoMethodMapping) sec.getUserProperties().get(
                        POJO_METHOD_MAPPING_KEY);
        setMethodMapping(methodMapping);

        doOnOpen(session, endpointConfig);
    }"
tomcat-C-1296,6808,websocket/drawboard,websocket/drawboard/DrawboardEndpoint.java,84,True,0,4,218,5,0,48,1,16,0.7974137931034483,128,67,0.5234375,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,1,STYLE,0.0149152542372881,SF_SWITCH_NO_DEFAULT,19,2,1,0.0018438844499078,0.0006146281499692685,0.0006146281499692685,0.0,0.0,0.0,0.1053719008264462,0.0543030765297002,-1.0,0.0,0.0360169491525423,0.0543030765297002,0.0,0.0,11,502,84,6808,490,0.1811114059081539,534,54,436,1078,0.3083638727536898,0,0,0,0,10,0,15,0.0,195,0,170,0,0,5,0,0,0.0,220,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,6524,18084,220,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//webapps/examples/WEB-INF/classes/websocket/drawboard/DrawboardEndpoint.java,run,6524,open,"@Override
            public void run() {
                try {

                    // Create a new Player and add it to the room.
                    try {
                        player = room.createAndAddPlayer(client);
                    } catch (IllegalStateException ex) {
                        // Probably the max. number of players has been
                        // reached.
                        client.sendMessage(new StringWebsocketMessage(
                                ""0"" + ex.getLocalizedMessage()));
                        // Close the connection.
                        client.close();
                    }

                } catch (RuntimeException ex) {
                    log.error(""Unexpected exception: "" + ex.toString(), ex);
                }
            }"
