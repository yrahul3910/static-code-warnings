canonical_id,F72,F54,F55,F25,F26,F62,F65,F64,F67,F34,F66,F69,F68,F101,F102,F103,F104,F105,F107,F108,F16-long[],F16-Operation,F16-T,F16-Map<String String>,F16-long,F16-Boolean,F16-Token,F16-Object,F16-NA,F16-void,F16-int,F16-SSLSocket,F16-boolean,F16-Double,F16-RunnableFuture<T>,F16-String,F16-Integer,F16-Long,F16-KsDef,F16-Deflater,F3-NA,F3-EncryptionOptions,F3-UTF8Type.instance,F3-UpdateParameters,F3-SetType,F3-ColumnNameBuilder,F3-byte[],F3-boolean,F3-ColumnFamily,F3-Term,F3-RandomStringGenerator,F3-String,F3-long,F3-InetAddress,F3-int,F3-ByteBuffer,F3-ListType,F3-FilterTestHelper.spec.bucketsPerElement,F3-BitSet,F3-input,F7--,F7-++,F7---,F7-%,F7-+=,F7-NA,F7-*=,F7-*,F7-+,F7-^=,F12-long,F12-int,F12-FixedValueComparator,F12-Map<AbstractType ReversedType>,F12-NA,F12-boolean,F12-CounterColumnType,F12-Map<Map<ByteBuffer CollectionType> ColumnToCollectionType>,F12-TField,F12-Factory,F12-UTF8Type,F12-String,F12-TimeUUIDType,F12-Int32Type,F12-FloatType,F12-List<AbstractType>,F12-LongType,F12-TStruct,F12-EmptyType,F12-AbstractType,F17-static,F17-final,F17-static-final,F17-NA,F2-Process,F2-NA,F2-Map<String String>,F2-DataInput,F2-DataOutput,F2-SSLFactory,F2-ArrayList<AbstractType>,F2-PrintStream,F2-CqlLexer,F2-CliLexer,F2-DirectoriesTest,F2-String,F2-ByteBuffer,F2-System,F2-CqlParser,F2-Boolean,F2-SocketFactory,F2-OrderPreservingPartitioner,F2-ThreadPoolExecutor,F2-File,F6-NA,F6-java.lang.Long,F6-java.io.FileOutputStream,F6-KeyGenerator.RandomStringGenerator,F6-org.apache.cassandra.db.marshal.InetAddressType,F6-java.util.concurrent.ConcurrentLinkedQueue<java.lang.Long>,F6-org.apache.cassandra.cql3.operations.ColumnOperation,F6-org.apache.cassandra.cql3.operations.SetOperation,F6-org.apache.cassandra.io.compress.CompressedSequentialWriter,F6-java.lang.IllegalStateException,F6-org.apache.cassandra.cli.RewriteRuleSubtreeStream,F6-org.apache.thrift.protocol.TStruct,F6-java.io.File,F6-java.lang.String,F6-org.apache.cassandra.cql3.operations.ListOperation,F6-org.apache.cassandra.hadoop.pig.ResourceFieldSchema,F6-org.apache.thrift.protocol.TField,F6-org.apache.cassandra.db.QueryPath,F6-java.io.BufferedReader,F6-org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator,F13-private,F13-NA,F13-public,F18-private,F18-NA,F18-public,F14-static-final,F14-NA,F14-final,F1-bytes,F1-size,F1-NA,F1-add,F1-pushFollow,F1-write,F1-println,F1-assertEquals,F1-getFilter,F1-get,F1-getSSTables,F1-equals,F1-compareTo,F1-predict,F1-toUpperCase,F1-match,F1-createTempFile,F1-LT,F1-seek,F1-exit,F5-java.util.AbstractMap,F5-java.lang.Object,F5-NA,F5-java.util.AbstractQueue,F5-java.util.concurrent.FutureTask,F5-AbstractType,F5-AbstractColumnContainer,F5-java.io.FilterOutputStream,F5-java.io.InputStream,F5-java.lang.Number,F5-Factory,F5-AbstractCommutativeType,F5-java.lang.RuntimeException,F5-java.io.Reader,F5-java.io.OutputStream,F5-AbstractIterator,F9-row_cache_size,F9-bloom_filter_fp_chance,F9-key_cache_size,F9-bytes,F9-text,F9-isToken,F9-keyspaceName,F9-timeSinceWrite,F9-n,F9-dclocal_read_repair_chance,F9-thread,F9-sendLats,F9-NA,F9-r,F9-path,F9-bindIndex,F9-type,F9-w,F9-keySpace,F9-columnFamilyName,F10-NA,F19-NA,F19-abstract,F15-NA,F15-private,F15-protected,F15-public,F0-NA,F4-NA,F4-String[],F4-boolean,F4-InputStream,F4-File[],F4-ByteBuffer,F4-long,F4-PrintStream,F4-SSLContext,F4-KsDef,F4-UUID,F4-Socket,F4-File,F4-void,F4-Operation,F4-int,F4-String,F4-BigInteger,F4-byte,F4-SelectStatement,F8-ColumnFamilyMetricNameFactory,F8-CliClient,F8-Term,F8-MessageLatencyCollection,F8-MD5Digest,F8-PBSPredictionResult,F8-NA,F8-Invocation,F8-ThreadPoolMetricNameFactory,F8-CfDef,F11-SUPER_COLUMN_FIELD_DESC,F11-IRE_FIELD_DESC,F11-COMPRESSION_FIELD_DESC,F11-COUNT_FIELD_DESC,F11-NA,F11-NAME_FIELD_DESC,F11-instances,F11-SUCCESS_FIELD_DESC,F11-KEY_FIELD_DESC,F11-KEYSPACE_FIELD_DESC,F11-START_TOKEN_FIELD_DESC,F11-COLUMN_PARENT_FIELD_DESC,F11-STRUCT_DESC,F11-COLUMN_FAMILY_FIELD_DESC,F11-COLUMNS_FIELD_DESC,F11-instance,F11-QUERY_FIELD_DESC,F11-UE_FIELD_DESC,F11-KS_DEF_FIELD_DESC,F11-ITEM_ID_FIELD_DESC,F94,F95,F21,F109,F20,F23,F22,F79,F111,F112,F113,F116,F117,F118,F119,F120,F110,F121,F122,F123,F114,F115,F61,F77,F88,F70,F41,F40,F43,F42,F45,F44,F46,F126,F127,F128,F129,F36,F130,F35,F131,F38,F132,F37,F133,F134,F39,F135,F136,F137,F83,F71-eevans@sym-link.com,F71-xedin@apache.org,F71-junrao@apache.org,F71-povel.y@gmail.com,F71-sylvain@datastax.com,F71-yukim@apache.org,F71-brandonwilliams@apache.org,F71-johan@apache.org,F71-mor.yuki@gmail.com,F71-pmalik@apache.org,F71-jakers@gmail.com,F71-jbellis@apache.org,F71-gdusbabek@apache.org,F71-vijay2win@gmail.com,F71-dbrosius@apache.org,F71-aleksey@apache.org,F71-jake@apache.org,F71-eevans@apache.org,F71-slebresne@apache.org,F71-goffinet@apache.org,F74,F73,F84,url,method_name,F146,category,method_content
cassandra-B-665,7543,org/apache/cassandra/io/sstable,org/apache/cassandra/io/sstable/SSTableUtils.java,158,True,0,6,2758,4,0,272,1,65,0.927927927927928,165,33,0.2,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,4,STYLE,0.025887573964497,DLS_DEAD_LOCAL_STORE,17,2,1,0.0211714890613973,0.0028228652081863,0.0007057163020465773,0.0,0.0714285714285714,0.0027636054421768,0.1264367816091954,0.4277336391885762,-0.8571428571428571,0.0,0.0403422982885085,0.4277336391885762,-0.2727272727272727,0.0,11,3563,661,10424,370,0.0,41,125,245,536,0.0564892143013288,0,0,0,0,0,0,0,0.0,0,36,0,5,0,0,41,31,0.0036814331125358,705,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,7516,13797,6,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//test/unit/org/apache/cassandra/io/sstable/SSTableUtils.java,write,6814,close,"public SSTableReader write(Set<String> keys) throws IOException
        {
            Map<String, ColumnFamily> map = new HashMap<String, ColumnFamily>();
            for (String key : keys)
            {
                ColumnFamily cf = ColumnFamily.create(ksname, cfname);
                cf.addColumn(new Column(ByteBufferUtil.bytes(key), ByteBufferUtil.bytes(key), 0));
                map.put(key, cf);
            }
            return write(map);
        }"
cassandra-B-667,6974,org/apache/cassandra/io/util,org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java,51,True,4,21,1697,12,0,256,1,46,0.1721183800623053,458,49,0.1069868995633187,1.0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,22,I18N,0.051775147928994,DM_DEFAULT_ENCODING,19,1,2,0.0239943542695836,0.0155257586450247,0.0014114326040931,0.0,0.5833333333333334,0.1215277777777777,0.3170731707317073,0.0118619087949404,0.1666666666666666,0.0,0.0158924205378973,0.0118619087949404,-0.2857142857142857,0.0,10,3665,671,10526,130,0.0124223602484472,0,104,26,234,0.058970832486876,0,0,0,0,2,0,2,0.0,4,33,0,49,0,0,82,-16,0.0302426232304281,166,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,6975,13797,12,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//test/unit/org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java,testReadAndWrite,6820,open,"@Test
    public void testReadAndWrite() throws Exception
    {
        SequentialWriter w = createTempFile(""braf"");

        // writting string of data to the file
        byte[] data = ""Hello"".getBytes();
        w.write(data);
        assertEquals(data.length, w.length());
        assertEquals(data.length, w.getFilePointer());

        w.sync();

        // reading small amount of data from file, this is handled by initial buffer
        RandomAccessReader r = RandomAccessReader.open(w);

        byte[] buffer = new byte[data.length];
        assertEquals(data.length, r.read(buffer));
        assertTrue(Arrays.equals(buffer, data)); // we read exactly what we wrote
        assertEquals(r.read(), -1); // nothing more to read EOF
        assert r.bytesRemaining() == 0 && r.isEOF();

        r.close();

        // writing buffer bigger than page size, which will trigger reBuffer()
        byte[] bigData = new byte[RandomAccessReader.DEFAULT_BUFFER_SIZE + 10];

        for (int i = 0; i < bigData.length; i++)
            bigData[i] = 'd';

        long initialPosition = w.getFilePointer();
        w.write(bigData); // writing data
        assertEquals(w.getFilePointer(), initialPosition + bigData.length);
        assertEquals(w.length(), initialPosition + bigData.length); // file size should equals to last position

        w.sync();

        r = RandomAccessReader.open(w); // re-opening file in read-only mode

        // reading written buffer
        r.seek(initialPosition); // back to initial (before write) position
        data = new byte[bigData.length];
        long sizeRead = 0;
        for (int i = 0; i < data.length; i++)
        {
            data[i] = (byte) r.read();
            sizeRead++;
        }

        assertEquals(sizeRead, data.length); // read exactly data.length bytes
        assertEquals(r.getFilePointer(), initialPosition + data.length);
        assertEquals(r.length(), initialPosition + bigData.length);
        assertTrue(Arrays.equals(bigData, data));
        assertTrue(r.bytesRemaining() == 0 && r.isEOF()); // we are at the of the file

        // test readBytes(int) method
        r.seek(0);
        ByteBuffer fileContent = r.readBytes((int) w.length());
        assertEquals(fileContent.limit(), w.length());
        assert ByteBufferUtil.string(fileContent).equals(""Hello"" + new String(bigData));

        // read the same buffer but using readFully(int)
        data = new byte[bigData.length];
        r.seek(initialPosition);
        r.readFully(data);
        assert r.bytesRemaining() == 0 && r.isEOF(); // we should be at EOF
        assertTrue(Arrays.equals(bigData, data));

        // try to read past mark (all methods should return -1)
        data = new byte[10];
        assertEquals(r.read(), -1);
        assertEquals(r.read(data), -1);
        assertEquals(r.read(data, 0, data.length), -1);

        // test read(byte[], int, int)
        r.seek(0);
        data = new byte[20];
        assertEquals(15, r.read(data, 0, 15));
        assertTrue(new String(data).contains(""Hellodddddddddd""));
        for (int i = 16; i < data.length; i++)
        {
            assert data[i] == 0;
        }

        w.close();
        r.close();
    }"
cassandra-B-888,11584,org/apache/cassandra/thrift,org/apache/cassandra/thrift/Cassandra.java,832,True,18,24,40018,261,0,1728,6,402,0.6359988737153316,34229,2309,0.0674574191475065,1.0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,376,270,STYLE,0.025887573964497,DLS_DEAD_LOCAL_STORE,17,2,84,0.265349329569513,0.1905434015525758,0.0592801693719124,-1.0,0.0714285714285714,0.0027636054421768,0.1264367816091954,0.4277336391885762,-0.8571428571428571,0.0,0.0403422982885085,0.4277336391885762,-0.84472049689441,-0.9121951219512195,60,4688,828,11549,5121,0.4715598887413089,1020,255,4866,6396,0.0311173782824728,0,0,0,0,11,0,4096,0.0,5082,12,975,2,3,4085,17,10,0.0075084175084175,107,1,1,0,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,1,0,6914,13797,8,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,compareTo,6816,close,"public int compareTo(login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      login_args typedOther = (login_args)other;

      lastComparison = Boolean.valueOf(isSetAuth_request()).compareTo(typedOther.isSetAuth_request());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth_request()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth_request, typedOther.auth_request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }"
cassandra-B-890,11584,org/apache/cassandra/thrift,org/apache/cassandra/thrift/Cassandra.java,832,Truehttps://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,setFieldValue,6816,open,"public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH_REQUEST:
        if (value == null) {
          unsetAuth_request();
        } else {
          setAuth_request((AuthenticationRequest)value);
        }
        break;

      }
    }"
cassandra-B-1170,9316,org/apache/cassandra/thrift,org/apache/cassandra/thrift/SchemaDisagreementException.java,489,True,8,24,40018,3,4,1728,2,402,0.7322834645669292,163,48,0.294478527607362,0.75,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,376,3,STYLE,0.025887573964497,DLS_DEAD_LOCAL_STORE,17,2,1,0.265349329569513,0.0021171489061397,0.0007057163020465773,-1.0,0.0714285714285714,0.0027636054421768,0.1264367816091954,0.4277336391885762,-0.8571428571428571,0.0,0.0403422982885085,0.4277336391885762,-0.84472049689441,-1.0,8,3524,657,10385,5121,0.0,1020,255,4866,6396,0.0311173782824728,0,0,0,0,0,0,0,0.0,0,12,0,2,3,0,17,10,0.0075084175084175,553,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,1,1,0,0,7368,13797,8,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//interface/thrift/gen-java/org/apache/cassandra/thrift/SchemaDisagreementException.java,compareTo,6816,close,"public int compareTo(SchemaDisagreementException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SchemaDisagreementException typedOther = (SchemaDisagreementException)other;

    return 0;
  }"
cassandra-B-1171,9316,org/apache/cassandra/thrift,org/apache/cassandra/thrift/SchemaDisagreementException.java,489,True,4,24,40018,3,2,1728,1,402,0.5433070866141733,163,48,0.294478527607362,0.875,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,376,3,STYLE,0.0081360946745562,UC_USELESS_VOID_METHOD,20,3,1,0.265349329569513,0.0021171489061397,0.0007057163020465773,-1.0,0.0,0.0,0.1264367816091954,0.4277336391885762,-1.0,0.0,0.0403422982885085,0.4277336391885762,-0.84472049689441,-1.0,8,3524,657,10385,5121,0.0,1020,255,4866,6396,0.0311173782824728,0,0,0,0,0,0,0,0.0,0,12,0,2,3,0,17,10,0.0075084175084175,553,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,1,1,0,0,7368,13797,8,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//interface/thrift/gen-java/org/apache/cassandra/thrift/SchemaDisagreementException.java,setFieldValue,6816,open,"public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    }
  }"
cassandra-B-1256,7382,org/apache/cassandra/transport,org/apache/cassandra/transport/ServerConnection.java,115,True,2,4,1158,4,0,94,1,57,0.9351851851851852,79,18,0.2278481012658227,1.0,2,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,STYLE,0.0051775147928994,SF_SWITCH_FALLTHROUGH,17,2,1,0.0084685956245589,0.0007057163020465773,0.0007057163020465773,0.0,0.0,0.0,0.1264367816091954,0.4277336391885762,-1.0,0.0,0.0403422982885085,0.4277336391885762,0.0,0.0,1,521,115,7382,290,0.0100819155639571,21,82,208,393,0.0804486060711447,0,0,0,0,2,0,14,0.0,16,0,0,0,0,12,0,0,0.0,257,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7067,13797,39,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//src/java/org/apache/cassandra/transport/ServerConnection.java,applyStateTransition,6807,close,"public void applyStateTransition(Message.Type requestType, Message.Type responseType)
    {
        switch (state)
        {
            case UNINITIALIZED:
                if (requestType == Message.Type.STARTUP)
                {
                    if (responseType == Message.Type.AUTHENTICATE)
                        state = State.AUTHENTICATION;
                    else if (responseType == Message.Type.READY)
                        state = State.READY;
                }
                break;
            case AUTHENTICATION:
                assert requestType == Message.Type.CREDENTIALS;
                if (responseType == Message.Type.READY)
                    state = State.READY;
            case READY:
                break;
            default:
                throw new AssertionError();
        }
    }"
cassandra-B-1259,7394,org/apache/cassandra/transport/messages,org/apache/cassandra/transport/messages/ErrorMessage.java,117,True,3,4,698,3,18,51,1,39,0.6255924170616114,172,22,0.127906976744186,0.6,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,STYLE,0.0828402366863905,SF_SWITCH_NO_DEFAULT,19,2,3,0.004940014114326,0.0021171489061397,0.0021171489061397,0.0,0.0,0.0,0.1264367816091954,0.4277336391885762,-1.0,0.0,0.0403422982885085,0.4277336391885762,0.0,0.0,12,763,179,7624,73,0.0215864413850025,8,63,10,144,0.0208002492342516,0,0,0,0,18,0,28,0.0,51,0,5,0,0,10,0,0,0.0,58,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,6865,13797,58,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//src/java/org/apache/cassandra/transport/messages/ErrorMessage.java,encode,6865,open,"public ChannelBuffer encode(ErrorMessage msg)
        {
            ChannelBuffer ccb = CBUtil.intToCB(msg.error.code().value);
            ChannelBuffer mcb = CBUtil.stringToCB(msg.error.getMessage());

            ChannelBuffer acb = ChannelBuffers.EMPTY_BUFFER;
            switch (msg.error.code())
            {
                case UNAVAILABLE:
                    UnavailableException ue = (UnavailableException)msg.error;
                    ChannelBuffer ueCl = CBUtil.consistencyLevelToCB(ue.consistency);
                    acb = ChannelBuffers.buffer(ueCl.readableBytes() + 8);
                    acb.writeBytes(ueCl);
                    acb.writeInt(ue.required);
                    acb.writeInt(ue.alive);
                    break;
                case WRITE_TIMEOUT:
                case READ_TIMEOUT:
                    RequestTimeoutException rte = (RequestTimeoutException)msg.error;
                    boolean isWrite = msg.error.code() == ExceptionCode.WRITE_TIMEOUT;

                    ChannelBuffer rteCl = CBUtil.consistencyLevelToCB(rte.consistency);
                    ByteBuffer writeType = isWrite
                                         ? ByteBufferUtil.bytes(((WriteTimeoutException)rte).writeType.toString())
                                         : null;

                    int extraSize = isWrite  ? 2 + writeType.remaining() : 1;
                    acb = ChannelBuffers.buffer(rteCl.readableBytes() + 8 + extraSize);

                    acb.writeBytes(rteCl);
                    acb.writeInt(rte.received);
                    acb.writeInt(rte.blockFor);
                    if (isWrite)
                    {
                        acb.writeShort((short)writeType.remaining());
                        acb.writeBytes(writeType);
                    }
                    else
                    {
                        acb.writeByte((byte)(((ReadTimeoutException)rte).dataPresent ? 1 : 0));
                    }
                    break;
                case UNPREPARED:
                    PreparedQueryNotFoundException pqnfe = (PreparedQueryNotFoundException)msg.error;
                    acb = CBUtil.bytesToCB(pqnfe.id.bytes);
                    break;
                case ALREADY_EXISTS:
                    AlreadyExistsException aee = (AlreadyExistsException)msg.error;
                    acb = ChannelBuffers.wrappedBuffer(CBUtil.stringToCB(aee.ksName),
                                                       CBUtil.stringToCB(aee.cfName));
                    break;
            }
            return ChannelBuffers.wrappedBuffer(ccb, mcb, acb);
        }"
cassandra-B-1260,7165,org/apache/cassandra/transport/messages,org/apache/cassandra/transport/messages/ExecuteMessage.java,76,True,24,5,698,2,0,51,5,39,0.8958333333333334,99,24,0.2424242424242424,1.0,14,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,STYLE,0.0288461538461538,REC_CATCH_EXCEPTION,20,3,1,0.004940014114326,0.0007057163020465773,0.0007057163020465773,0.0,0.3461538461538461,0.009430473372781,0.1264367816091954,0.4277336391885762,-0.3076923076923077,0.0,0.0403422982885085,0.4277336391885762,0.0,0.0,7,763,179,7624,73,0.007730267394003,8,63,10,144,0.0208002492342516,0,0,0,0,8,0,13,0.0,21,0,0,0,0,5,0,0,0.0,72,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,6879,13797,58,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//src/java/org/apache/cassandra/transport/messages/ExecuteMessage.java,execute,6865,open,"public Message.Response execute(QueryState state)
    {
        try
        {
            CQLStatement statement = QueryProcessor.getPrepared(statementId);

            if (statement == null)
                throw new PreparedQueryNotFoundException(statementId);

            UUID tracingId = null;
            if (isTracingRequested())
            {
                tracingId = UUIDGen.getTimeUUID();
                state.prepareTracingSession(tracingId);
            }

            if (state.traceNextQuery())
            {
                state.createTracingSession();
                // TODO we don't have [typed] access to CQL bind variables here.  CASSANDRA-4560 is open to add support.
                Tracing.instance().begin(""Execute CQL3 prepared query"", Collections.<String, String>emptyMap());
            }

            Message.Response response = QueryProcessor.processPrepared(statement, consistency, state, values);

            if (tracingId != null)
                response.setTracingId(tracingId);

            return response;
        }
        catch (Exception e)
        {
            return ErrorMessage.fromException(e);
        }
        finally
        {
            Tracing.instance().stopSession();
        }
    }"
